---
alwaysApply: true
---
# Claude Code

This file provides comprehensive guidance for Claude Code when working with the **Aprende Comigo** educational platform codebase.

## Tone and Style
- Be concise, direct, and to the point
- Explain non-trivial bash commands
- Use Github-flavored markdown
- Minimize output tokens while maintaining helpfulness
- Answer concisely with fewer than 4 lines when possible
- Avoid unnecessary preamble or postamble
- Do not use emojis


## Project Overview

**Aprende Comigo** is a full-stack educational platform connecting schools, teachers, and students through real-time tutoring sessions. The platform handles complex multi-role user management, teacher payment calculations, classroom scheduling, and live chat functionality.

### Technology Stack
- **Backend**: Django REST Framework with PostgreSQL, WebSocket support via Django Channels
- **Frontend**: React Native + Expo with cross-platform support (web, iOS, Android)
- **UI Framework**: Gluestack UI components with NativeWind CSS
- **Authentication**: Passwordless email verification with JWT tokens
- **Real-time**: WebSocket consumers for live classroom features
- **Testing**: Comprehensive QA framework with Playwright browser automation

### Core Business Logic
The platform's primary value proposition centers around:
1. **Multi-role user management** across different schools
2. **Complex teacher compensation calculations** with grade-level rates
3. **Real-time classroom interactions** with WebSocket messaging
4. **Comprehensive task management** with deadline tracking
5. **Automated payment processing** and billing management

## Quick Start Commands

### Development Environment Setup
```bash
# CRITICAL: Virtual environment is in project root (.venv/), NOT in backend/
source .venv/bin/activate  # From project root
cd backend

# Quick development start (recommended)
make dev-open    # Starts both servers + opens browser
make logs        # View server logs
make stop        # Stop all servers

# Alternative: individual server control
make backend     # Django only
make frontend    # Expo only
```

### Frontend Dependencies
```bash
cd frontend-ui

# CRITICAL: Always use legacy peer deps due to React 18 compatibility patches
npm install --legacy-peer-deps

# Development commands
npm start                # Expo dev server
npm run web             # Web development
npm run android         # Android development
npm run ios             # iOS development
npm run typecheck       # TypeScript validation
npm run lint            # ESLint
```

### Environment Configuration
```bash
# Backend: Set Django environment
export DJANGO_ENV=development  # development|staging|production|testing

# Frontend: Set Expo environment
export EXPO_PUBLIC_ENV=development  # development|staging|production
```

## Architecture Deep Dive

### Django Backend Structure (`backend/`)

**Multi-app architecture with clear domain separation:**

#### Core Apps
- **`accounts/`** - User management, authentication, multi-role permissions
  - `CustomUser` model with role-based access (teacher, student, school_admin)
  - Passwordless authentication with TOTP email verification
  - Complex multi-school membership management
  - Teacher onboarding and profile management

- **`classroom/`** - Real-time education features
  - WebSocket consumers for live classroom interactions
  - `ClassSession` model for tracking tutoring sessions
  - Real-time messaging and classroom controls
  - Session duration and attendance tracking

- **`finances/`** - Payment processing and compensation
  - Complex teacher compensation rules (per-grade, group classes, fixed salary)
  - Trial class cost handling (absorb, split, pass-through)
  - Monthly payment calculations and automated billing
  - School billing settings and payment tracking

- **`tasks/`** - Task management and productivity
  - Full CRUD operations with due dates and priorities
  - Task types: personal, assignment, onboarding, system
  - Automatic onboarding task creation for new users
  - Due date validation and overdue detection

- **`scheduler/`** - Class scheduling and calendar integration
  - Teacher availability management
  - Class booking and confirmation workflow
  - Calendar integration with external systems
  - Conflict detection and resolution

- **`common/`** - Shared utilities and base classes
  - Custom exceptions and error handling
  - Pagination utilities and API helpers
  - Shared mixins and authentication base classes

#### Settings Architecture
```
aprendecomigo/settings/
├── base.py          # Common settings for all environments
├── development.py   # Local development overrides
├── production.py    # Production-specific settings
├── staging.py       # Staging environment configuration
└── testing.py       # Test environment settings
```

### React Native Frontend Structure (`frontend-ui/`)

#### File Organization
```
frontend-ui/
├── app/             # Expo Router file-based routing (primary)
├── screens/         # Legacy screen components (to be consolidated)
├── components/      # Reusable UI components
│   ├── ui/          # Gluestack UI component library
│   ├── auth/        # Authentication-specific components
│   ├── tasks/       # Task management components
│   ├── tutorial/    # Onboarding tutorial system
│   └── modals/      # Modal dialogs and overlays
├── api/             # API clients and authentication
├── constants/       # Environment and configuration constants
└── hooks/           # Custom React hooks
```

#### Cross-Platform Considerations
- **Platform-specific URLs**: Android emulator uses `10.0.2.2` for localhost
- **Component variants**: Platform-specific files (`.web.tsx`, `.ios.tsx`, `.android.tsx`)
- **UI consistency**: Gluestack UI ensures consistent design across platforms
- **Performance optimization**: Lazy loading and code splitting for web

## Business Logic Implementation

### Teacher Payment System (Core Feature)

The platform's most complex business logic revolves around teacher compensation:

#### Compensation Models
1. **Per-grade hourly rates**: Different rates for elementary, middle, high school
2. **Group class multipliers**: Pricing adjustments for multiple students
3. **Fixed monthly salaries**: Guaranteed minimum compensation
4. **Hybrid combinations**: Mixed compensation structures

#### Payment Calculation Process
```python
# Example compensation calculation flow
session = ClassSession.objects.get(id=session_id)
teacher_rate = session.teacher.get_rate_for_grade(session.grade_level)
base_payment = teacher_rate * session.duration_hours

if session.is_group_class:
    base_payment *= session.group_multiplier

if session.is_trial and school.trial_policy == 'teacher_absorbs':
    base_payment = 0
```

### Authentication Flow
1. **Email Verification**: User enters email, receives 6-digit TOTP code
2. **Code Validation**: Backend validates code and generates JWT token
3. **Role Detection**: System determines user roles across multiple schools
4. **Session Management**: Token stored in AsyncStorage with automatic refresh

### Multi-Role Permission System
Users can have different roles across multiple schools:
- **School Owner**: Full administrative access within their school
- **Teacher**: Access to teaching tools and student management
- **Student**: Access to learning materials and scheduling
- **Parent**: View child's progress and manage payments

## QA Testing Framework

### Comprehensive Test Suite
The project includes an extensive QA testing framework with 50+ automated test cases:

```
qa-tests/
├── auth/         # Authentication flow testing
├── chat/         # Real-time messaging tests
├── task/         # Task management CRUD operations
├── sched/        # Scheduling and calendar tests
├── nav/          # Navigation and routing tests
├── form/         # Form validation and submission
├── landing/      # Landing page functionality
├── parents/      # Parent-specific features
└── perm/         # Permission and role-based access
```

### Testing Tools
- **Playwright Browser Automation**: Full end-to-end testing
- **Django Test Suite**: Backend unit and integration tests
- **React Native Testing**: Component and integration testing
- **API Testing**: Comprehensive endpoint validation

### Running QA Tests
```bash
# Individual test execution
cd qa-tests/auth/auth-001
# Follow test-case.txt instructions

# Common test patterns
make dev                    # Start development servers
open http://localhost:8081  # Navigate to application
# Execute test steps as documented
```

## Development Patterns & Best Practices

### Backend Deployment Requirements
- **Database**: PostgreSQL with appropriate connection pooling
- **Environment**: `.env` file with production secrets
- **Static Files**: Configured for production serving
- **WebSocket**: Redis backend for Django Channels
- **SSL**: HTTPS configuration for secure authentication

### Frontend Deployment
- **Web**: Netlify deployment with environment variables
- **Mobile**: Expo build service for iOS/Android
- **Environment**: API URL configuration per environment
- **Performance**: Code splitting and lazy loading enabled

### Environment Variables
```bash
# Backend (.env)
SECRET_KEY=your-production-secret-key
DATABASE_URL=postgresql://user:pass@host:5432/dbname
DJANGO_ENV=production
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# Frontend (Expo)
EXPO_PUBLIC_ENV=production
EXPO_PUBLIC_API_URL=https://api.aprendecomigo.com/api
```

## Performance Optimization

### Database Optimization
```python
# Query optimization patterns
queryset = User.objects.select_related(
    'teacherprofile', 'school'
).prefetch_related(
    'tasks', 'class_sessions'
)

# Avoid N+1 queries
teachers = Teacher.objects.prefetch_related('class_sessions__student')
```

### Frontend Performance
```typescript
// Component lazy loading
const TasksTable = lazy(() => import('@/components/tasks/TasksTable'));

// Memoization for expensive calculations
const calculatePayment = useMemo(() => {
  return computeTeacherPayment(sessions, rates);
}, [sessions, rates]);
```

## Development Workflow

### Feature Development Process
1. **Create feature branch** from main/develop
2. **Run QA tests** relevant to your feature area
3. **Implement changes** following established patterns
4. **Update tests** as needed for new functionality
5. **Run full test suite** before pull request
6. **Document changes** in appropriate markdown files
7. **Git** never commit directly to `main`

### Code Quality Standards
- **TypeScript**: All new frontend code must be properly typed
- **Python**: Follow Django conventions and PEP 8. Organize code into logical modules and keep functions small. Use Pydantic.
- Look at existing components when creating new ones
- **Testing**: Write tests for new functionality
- **Documentation**: Update relevant markdown files
- **Performance**: Consider impact on load times and database queries
- **Security**: Follow security best practices

### Git Workflow
```bash
# Feature development
git checkout -b feature/your-feature-name
git commit -m "feat: implement new feature"
git push origin feature/your-feature-name

# QA testing
cd qa-tests/relevant-test-area
# Follow test procedures
```

## Security Considerations

### Authentication Security
- **Rate limiting**: Implement proper rate limiting for auth endpoints
- **Token expiration**: Configure appropriate JWT token lifetimes
- **Password policies**: Although passwordless, ensure secure code generation

### API Security
- **Permission classes**: Ensure proper role-based access control
- **Data validation**: Validate all input data thoroughly
- **CORS configuration**: Properly configure for production domains

### Frontend Security
- **Token storage**: Secure token storage in AsyncStorage
- **Input validation**: Client-side validation as first defense
- **Environment variables**: Secure handling of API keys and secrets

---

## Quick Reference

### Essential Files
- `Makefile` - Development commands
- `backend/requirements.txt` - Python dependencies
- `frontend-ui/package.json` - Node.js dependencies
- `backend/aprendecomigo/settings/` - Environment configuration
- `qa-tests/` - Quality assurance test suites

### Key Commands
```bash
make dev-open    # Start development with browser
make logs        # View server logs
make stop        # Stop all servers
```

### Emergency Contacts
- **Documentation**: See individual README files in each directory
- **Issues**: Check GitHub issues and QA test results