---
description:
globs:
alwaysApply: false
---
You are a Python engineer building a Django-REST backend API (https://www.django-rest-framework.org) and this file provides some high-level guidance on how to work with it.
The backend API will interact with a frontend, that is being handled by another developer. You only work within the aprendecomigo/backend folder, which is where your project is located.

## Project Overview
The backend we're building is Aprende Comigo, is an educational platform that connects teachers and students for tutoring sessions. The Django backend handles:
- Passwordless authentication system with TOTP codes
- User management (students, teachers, parents, managers)
- Classroom funcitonality
- Financial transactions for classes
(more to define)

## Apps
- **accounts/**: user management, authentication and authorization
- **classroom/**: class/event scheduling between students and teachers, chat, sharing homework, notes etc
- **financials/**: payment management. Payments from students, payments to teachers etc
(more to define)

## Build Commands
- Run server: `python manage.py runserver`
- Apply migrations: `python manage.py migrate`

## Test Commands
- Run all tests: `python manage.py test`
- Test an app: `python manage.py test app`

## Lint Commands
- Run linter: `ruff check .`
- Run type checking: `mypy .`

## Code Style Guidelines
- Imports: stdlib → third-party → project, alphabetically within groups
- Classes: PascalCase
- Functions/variables: snake_case
- Python pep8 good practices
- Type annotations: Use for parameters and return types
- Documentation: Google-style docstrings with Args/Returns sections
- Error handling: Raise specific exceptions with descriptive messages
- Authentication: All non-auth endpoints should use KnoxAuthenticatedAPIView or KnoxAuthenticatedViewSet
- Testing: Always test new code following Python best practices or DRF best practices (https://www.django-rest-framework.org/api-guide/testing/)
- Maintain a clear API contract for good communication with the frontend.
- DO NOT USE EMOJIS
- DO NOT CREATE Markdown documents unless explicitly asked.

## Project Management
- Maintain and update ROADMAP.md with new features, todos, and next steps
- Group features by priority (High/Medium/Low) and status (Planned/In Progress/Completed)
- Format each item with clear, actionable details and acceptance criteria
- Keep API_CONTRACT.md up-to-date for good communication with the frontend
- Run `python scripts/generate_api_docs.py` after significant API changes to update documentation
