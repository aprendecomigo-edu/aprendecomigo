# Generated by Django 5.2.5 on 2025-09-24 13:51

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0014_revert_educational_system_to_charfield"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="teacherinvitation",
            name="unique_active_teacher_invitation_per_school",
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="can_book_classes",
            field=models.BooleanField(
                default=True,
                help_text="Can book and cancel classes for the student",
                verbose_name="can book classes",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="can_edit_profile",
            field=models.BooleanField(
                default=True,
                help_text="Can edit student's profile information",
                verbose_name="can edit profile",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="can_manage_finances",
            field=models.BooleanField(
                default=False,
                help_text="Can manage student's financial accounts and payments",
                verbose_name="can manage finances",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="can_receive_notifications",
            field=models.BooleanField(
                default=True,
                help_text="Receives notifications about the student",
                verbose_name="can receive notifications",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="can_view_records",
            field=models.BooleanField(
                default=True,
                help_text="Can view student's academic records and progress",
                verbose_name="can view records",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="created_by",
            field=models.ForeignKey(
                help_text="User who created this relationship",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_guardian_relationships",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="is_primary",
            field=models.BooleanField(
                default=False,
                help_text="Primary guardian handles billing and is main contact",
                verbose_name="is primary guardian",
            ),
        ),
        migrations.AddField(
            model_name="guardianstudentrelationship",
            name="relationship_type",
            field=models.CharField(
                blank=True,
                help_text="e.g., 'Mother', 'Father', 'Legal Guardian'",
                max_length=50,
                verbose_name="relationship type",
            ),
        ),
        migrations.AlterField(
            model_name="guardianstudentrelationship",
            name="guardian",
            field=models.ForeignKey(
                help_text="Guardian user who manages the student account",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="guardian_student_relationships",
                to=settings.AUTH_USER_MODEL,
                verbose_name="guardian user",
            ),
        ),
        migrations.AlterField(
            model_name="guardianstudentrelationship",
            name="student",
            field=models.ForeignKey(
                help_text="Student user whose account is managed by the guardian",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_guardian_relationships",
                to=settings.AUTH_USER_MODEL,
                verbose_name="student user",
            ),
        ),
        migrations.AlterField(
            model_name="studentprofile",
            name="guardian",
            field=models.ForeignKey(
                blank=True,
                help_text="DEPRECATED - Use guardians ManyToMany instead. Guardian of the student (required for guardian-managed accounts)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="students_old",
                to="accounts.guardianprofile",
            ),
        ),
        migrations.AddIndex(
            model_name="guardianstudentrelationship",
            index=models.Index(
                fields=["student", "is_primary"], name="accounts_gu_student_09d389_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="guardianstudentrelationship",
            index=models.Index(
                fields=["guardian", "is_primary"], name="accounts_gu_guardia_0ef7fd_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="guardianstudentrelationship",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_primary", True)),
                fields=("student",),
                name="unique_primary_guardian_per_student",
            ),
        ),
        migrations.AddConstraint(
            model_name="teacherinvitation",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    (
                        "expires_at__gt",
                        datetime.datetime(
                            2025,
                            9,
                            24,
                            13,
                            51,
                            52,
                            173695,
                            tzinfo=datetime.timezone.utc,
                        ),
                    ),
                    ("is_accepted", False),
                    ("status__in", ["pending", "sent", "delivered", "viewed"]),
                ),
                fields=("email", "school"),
                name="unique_active_teacher_invitation_per_school",
            ),
        ),
    ]
