# Generated by Django 4.2.15 on 2025-08-07 08:18

import accounts.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=150, null=True, verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='phone number')),
                ('profile_photo', models.ImageField(blank=True, help_text='User profile photo', null=True, upload_to='profile_photos/', verbose_name='profile photo')),
                ('primary_contact', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone')], default='email', max_length=10, verbose_name='primary contact')),
                ('email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('phone_verified', models.BooleanField(default=False, verbose_name='phone verified')),
                ('first_login_completed', models.BooleanField(default=False, verbose_name='first login completed')),
                ('onboarding_completed', models.BooleanField(default=False, verbose_name='onboarding completed')),
                ('onboarding_progress', models.JSONField(blank=True, default=dict, verbose_name='onboarding progress')),
                ('tutorial_preferences', models.JSONField(blank=True, default=dict, verbose_name='tutorial preferences')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', accounts.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='course name')),
                ('code', models.CharField(help_text='Alphanumeric code for the course (e.g., educational system codes)', max_length=20, verbose_name='course code')),
                ('education_level', models.CharField(default='other', help_text='Education level within the educational system', max_length=50, verbose_name='education level')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the course content and objectives', verbose_name='course description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EducationalSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the educational system (e.g., 'Portugal', 'Brazil')", max_length=100, verbose_name='system name')),
                ('code', models.CharField(choices=[('pt', 'Portugal'), ('custom', 'Custom'), ('br', 'Brazil')], help_text="Unique code for the system (e.g., 'pt', 'br')", max_length=20, unique=True, verbose_name='system code')),
                ('description', models.TextField(blank=True, help_text='Description of the educational system', verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Educational System',
                'verbose_name_plural': 'Educational Systems',
            },
        ),
        migrations.CreateModel(
            name='ParentChildRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('parent', 'Parent'), ('guardian', 'Guardian'), ('other', 'Other')], default='parent', help_text='Type of relationship (parent, guardian, etc.)', max_length=20, verbose_name='relationship type')),
                ('permissions', models.JSONField(blank=True, default=dict, help_text='Specific permissions the parent has for this child', verbose_name='permissions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this relationship is currently active', verbose_name='is active')),
                ('requires_purchase_approval', models.BooleanField(default=True, help_text='Whether parent approval is required for purchases', verbose_name='requires purchase approval')),
                ('requires_session_approval', models.BooleanField(default=True, help_text='Whether parent approval is required for booking sessions', verbose_name='requires session approval')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Parent-Child Relationship',
                'verbose_name_plural': 'Parent-Child Relationships',
            },
        ),
        migrations.CreateModel(
            name='ParentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_preferences', models.JSONField(blank=True, default=dict, help_text='Parent notification preferences (email, SMS, in-app)', verbose_name='notification preferences')),
                ('default_approval_settings', models.JSONField(blank=True, default=dict, help_text='Default purchase approval settings for all children', verbose_name='default approval settings')),
                ('email_notifications_enabled', models.BooleanField(default=True, help_text='Enable email notifications for parent alerts', verbose_name='email notifications enabled')),
                ('sms_notifications_enabled', models.BooleanField(default=False, help_text='Enable SMS notifications for parent alerts', verbose_name='SMS notifications enabled')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Parent Profile',
                'verbose_name_plural': 'Parent Profiles',
            },
        ),
        migrations.CreateModel(
            name='ProgressAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('quiz', 'Quiz'), ('test', 'Test'), ('homework', 'Homework'), ('project', 'Project'), ('oral_exam', 'Oral Exam'), ('practical', 'Practical Exercise'), ('presentation', 'Presentation'), ('other', 'Other')], help_text='Type of assessment conducted', max_length=20, verbose_name='assessment type')),
                ('title', models.CharField(help_text='Title or name of the assessment', max_length=200, verbose_name='assessment title')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the assessment', verbose_name='description')),
                ('score', models.DecimalField(decimal_places=2, help_text='Score achieved by the student', max_digits=6, verbose_name='score')),
                ('max_score', models.DecimalField(decimal_places=2, help_text='Maximum possible score for this assessment', max_digits=6, verbose_name='maximum score')),
                ('assessment_date', models.DateField(help_text='Date when the assessment was conducted', verbose_name='assessment date')),
                ('skills_assessed', models.JSONField(blank=True, default=list, help_text='List of specific skills that were assessed', verbose_name='skills assessed')),
                ('teacher_notes', models.TextField(blank=True, help_text="Teacher's observations and feedback", verbose_name='teacher notes')),
                ('is_graded', models.BooleanField(default=True, help_text='Whether this assessment contributes to grades', verbose_name='is graded')),
                ('improvement_areas', models.JSONField(blank=True, default=list, help_text='Areas where the student needs improvement', verbose_name='improvement areas')),
                ('strengths', models.JSONField(blank=True, default=list, help_text='Areas where the student performed well', verbose_name='strengths')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Progress Assessment',
                'verbose_name_plural': 'Progress Assessments',
                'ordering': ['-assessment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('address', models.TextField(blank=True, verbose_name='address')),
                ('contact_email', models.EmailField(blank=True, max_length=254, verbose_name='contact email')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='phone number')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('logo', models.ImageField(blank=True, help_text='School logo image', null=True, upload_to='school_logos/', verbose_name='logo')),
                ('primary_color', models.CharField(blank=True, default='#3B82F6', help_text='Primary brand color in hex format', max_length=7, verbose_name='primary color')),
                ('secondary_color', models.CharField(blank=True, default='#1F2937', help_text='Secondary brand color in hex format', max_length=7, verbose_name='secondary color')),
                ('email_domain', models.CharField(blank=True, help_text='Official email domain for the school', max_length=100, verbose_name='email domain')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('secret_key', models.CharField(max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_code_generated_at', models.DateTimeField(auto_now=True)),
                ('is_used', models.BooleanField(default=False)),
                ('failed_attempts', models.PositiveSmallIntegerField(default=0)),
                ('max_attempts', models.PositiveSmallIntegerField(default=5)),
            ],
            options={
                'indexes': [models.Index(fields=['email', 'is_used'], name='accounts_ve_email_7e3f97_idx'), models.Index(fields=['email', 'created_at'], name='accounts_ve_email_87ad10_idx')],
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="Teacher's professional biography", verbose_name='biography')),
                ('specialty', models.CharField(blank=True, max_length=100, verbose_name='specialty')),
                ('education', models.TextField(blank=True, help_text='Educational background and qualifications', verbose_name='education')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='hourly rate')),
                ('availability', models.TextField(blank=True, help_text='Available days and times for lessons', verbose_name='availability')),
                ('address', models.TextField(blank=True, help_text='Street, number, postal code and location', verbose_name='address')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='teacher phone')),
                ('calendar_iframe', models.TextField(blank=True, verbose_name='calendar iframe')),
                ('education_background', models.JSONField(blank=True, default=dict, help_text='Structured educational background data (degree, institution, field, year)', verbose_name='education background')),
                ('teaching_subjects', models.JSONField(blank=True, default=list, help_text='List of subjects the teacher specializes in', verbose_name='teaching subjects')),
                ('rate_structure', models.JSONField(blank=True, default=dict, help_text='Detailed rate structure for different class types', verbose_name='rate structure')),
                ('weekly_availability', models.JSONField(blank=True, default=dict, help_text='Structured weekly availability schedule', verbose_name='weekly availability')),
                ('grade_level_preferences', models.JSONField(blank=True, default=list, help_text='List of preferred grade levels (elementary, middle, high school, university)', verbose_name='grade level preferences')),
                ('teaching_experience', models.JSONField(blank=True, default=dict, help_text='Structured teaching experience data (years, institutions, specializations)', verbose_name='teaching experience')),
                ('credentials_documents', models.JSONField(blank=True, default=list, help_text='List of uploaded credential document references', verbose_name='credentials documents')),
                ('availability_schedule', models.JSONField(blank=True, default=dict, help_text='Detailed availability schedule with time slots and preferences', verbose_name='availability schedule')),
                ('profile_completion_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Calculated profile completion percentage (0-100)', max_digits=5, verbose_name='profile completion score')),
                ('is_profile_complete', models.BooleanField(default=False, help_text='Whether the profile meets completion requirements', verbose_name='is profile complete')),
                ('last_profile_update', models.DateTimeField(auto_now=True, help_text='When the profile was last updated', verbose_name='last profile update')),
                ('last_activity', models.DateTimeField(blank=True, help_text='When the teacher was last active in the system', null=True, verbose_name='last activity')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('role', models.CharField(choices=[('school_owner', 'School Owner'), ('school_admin', 'School Administrator'), ('teacher', 'Teacher'), ('school_staff', 'School Staff'), ('student', 'Student'), ('parent', 'Parent')], default='teacher', max_length=20, verbose_name='role')),
                ('custom_message', models.TextField(blank=True, help_text='Personal message to include in the invitation', max_length=1000, null=True, verbose_name='custom message')),
                ('batch_id', models.UUIDField(help_text='UUID to group related invitations together', verbose_name='batch ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('viewed', 'Viewed'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='status')),
                ('email_delivery_status', models.CharField(choices=[('not_sent', 'Not Sent'), ('queued', 'Queued'), ('sending', 'Sending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('failed', 'Failed')], default='not_sent', max_length=20, verbose_name='email delivery status')),
                ('email_sent_at', models.DateTimeField(blank=True, null=True, verbose_name='email sent at')),
                ('email_delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='email delivered at')),
                ('email_failure_reason', models.TextField(blank=True, null=True, verbose_name='email failure reason')),
                ('retry_count', models.PositiveSmallIntegerField(default=0, verbose_name='retry count')),
                ('max_retries', models.PositiveSmallIntegerField(default=3, verbose_name='max retries')),
                ('token', models.CharField(max_length=64, unique=True, verbose_name='token')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField()),
                ('is_accepted', models.BooleanField(default=False, verbose_name='is accepted')),
                ('accepted_at', models.DateTimeField(blank=True, null=True, verbose_name='accepted at')),
                ('declined_at', models.DateTimeField(blank=True, help_text='When the invitation was declined', null=True, verbose_name='declined at')),
                ('viewed_at', models.DateTimeField(blank=True, help_text='When the invitation was first viewed', null=True, verbose_name='viewed at')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_teacher_invitations', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_invitations', to='accounts.school')),
            ],
            options={
                'verbose_name': 'Teacher Invitation',
                'verbose_name_plural': 'Teacher Invitations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text="Specific hourly rate for this course (overrides teacher's default rate)", max_digits=6, null=True, verbose_name='hourly rate for this course')),
                ('is_active', models.BooleanField(default=True, verbose_name='is actively teaching')),
                ('started_teaching', models.DateField(auto_now_add=True, verbose_name='started teaching date')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_teachers', to='accounts.course')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_courses', to='accounts.teacherprofile')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_level', models.CharField(choices=[('beginner', 'Beginner'), ('elementary', 'Elementary'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', help_text='Current learning level of the student', max_length=20, verbose_name='current level')),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage of course completed (0-100)', max_digits=5, verbose_name='completion percentage')),
                ('skills_mastered', models.JSONField(blank=True, default=list, help_text='List of skills the student has mastered', verbose_name='skills mastered')),
                ('current_topics', models.JSONField(blank=True, default=list, help_text='Topics currently being studied', verbose_name='current topics')),
                ('learning_goals', models.JSONField(blank=True, default=list, help_text='Specific learning goals for this student', verbose_name='learning goals')),
                ('notes', models.TextField(blank=True, help_text="Teacher's notes about student progress", verbose_name='progress notes')),
                ('last_assessment_date', models.DateField(blank=True, help_text='Date of the most recent assessment', null=True, verbose_name='last assessment date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('course', models.ForeignKey(help_text='Course for which progress is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to='accounts.course', verbose_name='course')),
                ('school', models.ForeignKey(help_text='School where progress is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to='accounts.school', verbose_name='school')),
                ('student', models.ForeignKey(help_text='Student whose progress is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL, verbose_name='student')),
                ('teacher', models.ForeignKey(help_text="Teacher tracking this student's progress", on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to='accounts.teacherprofile', verbose_name='teacher')),
            ],
            options={
                'verbose_name': 'Student Progress',
                'verbose_name_plural': 'Student Progress Records',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_year', models.CharField(help_text='School year within the educational system', max_length=50, verbose_name='school year')),
                ('birth_date', models.DateField(verbose_name='birth date')),
                ('address', models.TextField(blank=True, help_text='Street, number, postal code and location', verbose_name='address')),
                ('cc_number', models.CharField(blank=True, max_length=20, verbose_name='CC number')),
                ('cc_photo', models.ImageField(blank=True, help_text='Photo of CC front and back (only for in-person students)', null=True, upload_to='cc_photos/', verbose_name='CC photo')),
                ('calendar_iframe', models.TextField(blank=True, verbose_name='calendar iframe')),
                ('educational_system', models.ForeignKey(default=1, help_text='Educational system this student belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='students', to='accounts.educationalsystem')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_levels', models.JSONField(blank=True, default=list, help_text='List of grade levels offered by this school', verbose_name='grade levels')),
                ('trial_cost_absorption', models.CharField(choices=[('school', 'School'), ('teacher', 'Teacher'), ('split', 'Split')], default='school', max_length=20)),
                ('default_session_duration', models.PositiveIntegerField(default=60, help_text='Default session duration in minutes')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('billing_contact_name', models.CharField(blank=True, help_text='Name of billing contact person', max_length=100, verbose_name='billing contact name')),
                ('billing_contact_email', models.EmailField(blank=True, help_text='Email for billing-related communications', max_length=254, verbose_name='billing contact email')),
                ('billing_address', models.TextField(blank=True, help_text='Billing address for invoices and payments', verbose_name='billing address')),
                ('tax_id', models.CharField(blank=True, help_text='Tax identification number for billing', max_length=50, verbose_name='tax ID')),
                ('currency_code', models.CharField(choices=[('EUR', 'Euro'), ('USD', 'US Dollar'), ('BRL', 'Brazilian Real'), ('GBP', 'British Pound')], default='EUR', help_text='Default currency for pricing and billing', max_length=3, verbose_name='currency')),
                ('language', models.CharField(choices=[('pt', 'Portuguese'), ('en', 'English'), ('es', 'Spanish'), ('fr', 'French')], default='pt', help_text='Default language for the school interface', max_length=5, verbose_name='language')),
                ('working_hours_start', models.TimeField(default='08:00', help_text='School working hours start time', verbose_name='working hours start')),
                ('working_hours_end', models.TimeField(default='18:00', help_text='School working hours end time', verbose_name='working hours end')),
                ('working_days', models.JSONField(default=list, help_text='List of working days (0=Monday, 6=Sunday)', verbose_name='working days')),
                ('email_notifications_enabled', models.BooleanField(default=True, help_text='Enable email notifications for school events', verbose_name='email notifications enabled')),
                ('sms_notifications_enabled', models.BooleanField(default=False, help_text='Enable SMS notifications for school events', verbose_name='SMS notifications enabled')),
                ('allow_student_self_enrollment', models.BooleanField(default=False, help_text='Allow students to enroll themselves', verbose_name='allow student self-enrollment')),
                ('require_parent_approval', models.BooleanField(default=True, help_text='Require parental approval for student actions', verbose_name='require parent approval')),
                ('auto_assign_teachers', models.BooleanField(default=False, help_text='Automatically assign available teachers to classes', verbose_name='auto assign teachers')),
                ('class_reminder_hours', models.PositiveIntegerField(default=24, help_text='Hours before class to send reminder notifications', verbose_name='class reminder hours')),
                ('enable_calendar_integration', models.BooleanField(default=False, help_text='Enable integration with external calendar systems', verbose_name='enable calendar integration')),
                ('calendar_integration_type', models.CharField(blank=True, choices=[('google', 'Google Calendar'), ('outlook', 'Microsoft Outlook'), ('caldav', 'CalDAV')], help_text='Type of calendar integration', max_length=20, verbose_name='calendar integration type')),
                ('enable_email_integration', models.BooleanField(default=False, help_text='Enable integration with external email systems', verbose_name='enable email integration')),
                ('email_integration_provider', models.CharField(blank=True, choices=[('none', 'None'), ('smtp', 'SMTP'), ('sendgrid', 'SendGrid'), ('mailgun', 'Mailgun')], help_text='Email integration provider', max_length=20, verbose_name='email integration provider')),
                ('data_retention_policy', models.CharField(choices=[('1_year', '1 Year'), ('2_years', '2 Years'), ('5_years', '5 Years'), ('indefinite', 'Indefinite')], default='2_years', help_text='How long to retain student and class data', max_length=20, verbose_name='data retention policy')),
                ('gdpr_compliance_enabled', models.BooleanField(default=True, help_text='Enable GDPR compliance features', verbose_name='GDPR compliance enabled')),
                ('allow_data_export', models.BooleanField(default=True, help_text='Allow users to export their personal data', verbose_name='allow data export')),
                ('require_data_processing_consent', models.BooleanField(default=True, help_text='Require explicit consent for data processing', verbose_name='require data processing consent')),
                ('dashboard_refresh_interval', models.PositiveIntegerField(default=30, help_text='Dashboard refresh interval in seconds')),
                ('activity_retention_days', models.PositiveIntegerField(default=90, help_text='Days to retain activity logs')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('educational_system', models.ForeignKey(default=1, help_text='Educational system used by this school', on_delete=django.db.models.deletion.PROTECT, related_name='schools_using_system', to='accounts.educationalsystem', verbose_name='educational system')),
                ('school', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='accounts.school')),
            ],
            options={
                'verbose_name': 'School Settings',
                'verbose_name_plural': 'School Settings',
            },
        ),
        migrations.CreateModel(
            name='SchoolMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('school_owner', 'School Owner'), ('school_admin', 'School Administrator'), ('teacher', 'Teacher'), ('school_staff', 'School Staff'), ('student', 'Student'), ('parent', 'Parent')], max_length=20, verbose_name='role')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='accounts.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='school_memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolInvitationLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('school_owner', 'School Owner'), ('school_admin', 'School Administrator'), ('teacher', 'Teacher'), ('school_staff', 'School Staff'), ('student', 'Student'), ('parent', 'Parent')], max_length=20, verbose_name='role')),
                ('token', models.CharField(max_length=64, unique=True, verbose_name='token')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='usage count')),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Leave blank for unlimited uses', null=True, verbose_name='max uses')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_invitation_links', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitation_links', to='accounts.school')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('role', models.CharField(choices=[('school_owner', 'School Owner'), ('school_admin', 'School Administrator'), ('teacher', 'Teacher'), ('school_staff', 'School Staff'), ('student', 'Student'), ('parent', 'Parent')], max_length=20, verbose_name='role')),
                ('token', models.CharField(max_length=64, unique=True, verbose_name='token')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_accepted', models.BooleanField(default=False, verbose_name='is accepted')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='accounts.school')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('invitation_sent', 'Invitation Sent'), ('invitation_accepted', 'Invitation Accepted'), ('invitation_declined', 'Invitation Declined'), ('student_joined', 'Student Joined'), ('teacher_joined', 'Teacher Joined'), ('class_created', 'Class Created'), ('class_completed', 'Class Completed'), ('class_cancelled', 'Class Cancelled'), ('settings_updated', 'Settings Updated')], max_length=30)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('description', models.TextField()),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities_performed', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='accounts.school')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
    ]
