# Generated by Django 5.2.5 on 2025-09-12 11:47

import accounts.models.users
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                ("address", models.TextField(blank=True, verbose_name="address")),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="contact email"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="phone number"
                    ),
                ),
                ("website", models.URLField(blank=True, verbose_name="website")),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="School logo image",
                        null=True,
                        upload_to="school_logos/",
                        verbose_name="logo",
                    ),
                ),
                (
                    "primary_color",
                    models.CharField(
                        blank=True,
                        default="#3B82F6",
                        help_text="Primary brand color in hex format",
                        max_length=7,
                        verbose_name="primary color",
                    ),
                ),
                (
                    "secondary_color",
                    models.CharField(
                        blank=True,
                        default="#1F2937",
                        help_text="Secondary brand color in hex format",
                        max_length=7,
                        verbose_name="secondary color",
                    ),
                ),
                (
                    "email_domain",
                    models.CharField(
                        blank=True,
                        help_text="Official email domain for the school",
                        max_length=100,
                        verbose_name="email domain",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="SchoolInvitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="email address"),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("school_owner", "School Owner"),
                            ("school_admin", "School Administrator"),
                            ("teacher", "Teacher"),
                            ("school_staff", "School Staff"),
                            ("student", "Student"),
                            ("guardian", "Guardian"),
                        ],
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "token",
                    models.CharField(max_length=64, unique=True, verbose_name="token"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "is_accepted",
                    models.BooleanField(default=False, verbose_name="is accepted"),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SchoolInvitationLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("school_owner", "School Owner"),
                            ("school_admin", "School Administrator"),
                            ("teacher", "Teacher"),
                            ("school_staff", "School Staff"),
                            ("student", "Student"),
                            ("guardian", "Guardian"),
                        ],
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "token",
                    models.CharField(max_length=64, unique=True, verbose_name="token"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "usage_count",
                    models.PositiveIntegerField(default=0, verbose_name="usage count"),
                ),
                (
                    "max_uses",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Leave blank for unlimited uses",
                        null=True,
                        verbose_name="max uses",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SchoolMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("school_owner", "School Owner"),
                            ("school_admin", "School Administrator"),
                            ("teacher", "Teacher"),
                            ("student", "Student"),
                            ("parent", "Parent"),
                        ],
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="SchoolSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "grade_levels",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of grade levels offered by this school",
                        verbose_name="grade levels",
                    ),
                ),
                (
                    "trial_cost_absorption",
                    models.CharField(
                        choices=[
                            ("school", "School"),
                            ("teacher", "Teacher"),
                            ("split", "Split"),
                        ],
                        default="school",
                        max_length=20,
                    ),
                ),
                (
                    "default_session_duration",
                    models.PositiveIntegerField(
                        default=60, help_text="Default session duration in minutes"
                    ),
                ),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                (
                    "billing_contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of billing contact person",
                        max_length=100,
                        verbose_name="billing contact name",
                    ),
                ),
                (
                    "billing_contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email for billing-related communications",
                        max_length=254,
                        verbose_name="billing contact email",
                    ),
                ),
                (
                    "billing_address",
                    models.TextField(
                        blank=True,
                        help_text="Billing address for invoices and payments",
                        verbose_name="billing address",
                    ),
                ),
                (
                    "tax_id",
                    models.CharField(
                        blank=True,
                        help_text="Tax identification number for billing",
                        max_length=50,
                        verbose_name="tax ID",
                    ),
                ),
                (
                    "currency_code",
                    models.CharField(
                        choices=[
                            ("EUR", "Euro"),
                            ("USD", "US Dollar"),
                            ("BRL", "Brazilian Real"),
                            ("GBP", "British Pound"),
                        ],
                        default="EUR",
                        help_text="Default currency for pricing and billing",
                        max_length=3,
                        verbose_name="currency",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("pt", "Portuguese"),
                            ("en", "English"),
                            ("es", "Spanish"),
                            ("fr", "French"),
                        ],
                        default="pt",
                        help_text="Default language for the school interface",
                        max_length=5,
                        verbose_name="language",
                    ),
                ),
                (
                    "working_hours_start",
                    models.TimeField(
                        default="08:00",
                        help_text="School working hours start time",
                        verbose_name="working hours start",
                    ),
                ),
                (
                    "working_hours_end",
                    models.TimeField(
                        default="18:00",
                        help_text="School working hours end time",
                        verbose_name="working hours end",
                    ),
                ),
                (
                    "working_days",
                    models.JSONField(
                        default=list,
                        help_text="List of working days (0=Monday, 6=Sunday)",
                        verbose_name="working days",
                    ),
                ),
                (
                    "email_notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Enable email notifications for school events",
                        verbose_name="email notifications enabled",
                    ),
                ),
                (
                    "sms_notifications_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable SMS notifications for school events",
                        verbose_name="SMS notifications enabled",
                    ),
                ),
                (
                    "allow_student_self_enrollment",
                    models.BooleanField(
                        default=False,
                        help_text="Allow students to enroll themselves",
                        verbose_name="allow student self-enrollment",
                    ),
                ),
                (
                    "require_parent_approval",
                    models.BooleanField(
                        default=True,
                        help_text="Require parental approval for student actions",
                        verbose_name="require parent approval",
                    ),
                ),
                (
                    "auto_assign_teachers",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically assign available teachers to classes",
                        verbose_name="auto assign teachers",
                    ),
                ),
                (
                    "class_reminder_hours",
                    models.PositiveIntegerField(
                        default=24,
                        help_text="Hours before class to send reminder notifications",
                        verbose_name="class reminder hours",
                    ),
                ),
                (
                    "enable_calendar_integration",
                    models.BooleanField(
                        default=False,
                        help_text="Enable integration with external calendar systems",
                        verbose_name="enable calendar integration",
                    ),
                ),
                (
                    "calendar_integration_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("google", "Google Calendar"),
                            ("outlook", "Microsoft Outlook"),
                            ("caldav", "CalDAV"),
                        ],
                        help_text="Type of calendar integration",
                        max_length=20,
                        verbose_name="calendar integration type",
                    ),
                ),
                (
                    "enable_email_integration",
                    models.BooleanField(
                        default=False,
                        help_text="Enable integration with external email systems",
                        verbose_name="enable email integration",
                    ),
                ),
                (
                    "email_integration_provider",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("none", "None"),
                            ("smtp", "SMTP"),
                            ("sendgrid", "SendGrid"),
                            ("mailgun", "Mailgun"),
                        ],
                        help_text="Email integration provider",
                        max_length=20,
                        verbose_name="email integration provider",
                    ),
                ),
                (
                    "data_retention_policy",
                    models.CharField(
                        choices=[
                            ("1_year", "1 Year"),
                            ("2_years", "2 Years"),
                            ("5_years", "5 Years"),
                            ("indefinite", "Indefinite"),
                        ],
                        default="2_years",
                        help_text="How long to retain student and class data",
                        max_length=20,
                        verbose_name="data retention policy",
                    ),
                ),
                (
                    "gdpr_compliance_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Enable GDPR compliance features",
                        verbose_name="GDPR compliance enabled",
                    ),
                ),
                (
                    "allow_data_export",
                    models.BooleanField(
                        default=True,
                        help_text="Allow users to export their personal data",
                        verbose_name="allow data export",
                    ),
                ),
                (
                    "require_data_processing_consent",
                    models.BooleanField(
                        default=True,
                        help_text="Require explicit consent for data processing",
                        verbose_name="require data processing consent",
                    ),
                ),
                (
                    "dashboard_refresh_interval",
                    models.PositiveIntegerField(
                        default=30, help_text="Dashboard refresh interval in seconds"
                    ),
                ),
                (
                    "activity_retention_days",
                    models.PositiveIntegerField(
                        default=90, help_text="Days to retain activity logs"
                    ),
                ),
                (
                    "default_minimum_notice_minutes",
                    models.PositiveIntegerField(
                        default=120,
                        help_text="Default minimum notice period in minutes (2 hours)",
                        verbose_name="default minimum notice minutes",
                    ),
                ),
                (
                    "default_buffer_time_minutes",
                    models.PositiveIntegerField(
                        default=15,
                        help_text="Default buffer time between classes in minutes",
                        verbose_name="default buffer time minutes",
                    ),
                ),
                (
                    "default_max_daily_bookings",
                    models.PositiveIntegerField(
                        default=8,
                        help_text="Default maximum classes per day for teachers",
                        verbose_name="default max daily bookings",
                    ),
                ),
                (
                    "default_max_weekly_bookings",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Default maximum classes per week for teachers",
                        verbose_name="default max weekly bookings",
                    ),
                ),
                (
                    "student_max_daily_bookings",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum classes per day for students",
                        verbose_name="student max daily bookings",
                    ),
                ),
                (
                    "student_max_weekly_bookings",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Maximum classes per week for students",
                        verbose_name="student max weekly bookings",
                    ),
                ),
                (
                    "buffer_time_group",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Buffer time in minutes for group classes",
                        verbose_name="buffer time for group classes",
                    ),
                ),
                (
                    "buffer_time_trial",
                    models.PositiveIntegerField(
                        default=10,
                        help_text="Buffer time in minutes for trial classes",
                        verbose_name="buffer time for trial classes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                "verbose_name": "School Settings",
                "verbose_name_plural": "School Settings",
            },
        ),
        migrations.CreateModel(
            name="StudentPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("can_view_profile", models.BooleanField(default=False)),
                ("can_view_grades", models.BooleanField(default=False)),
                ("can_view_attendance", models.BooleanField(default=False)),
                ("can_make_payment", models.BooleanField(default=False)),
                ("can_book_session", models.BooleanField(default=False)),
                ("can_cancel_session", models.BooleanField(default=False)),
                ("can_update_profile", models.BooleanField(default=False)),
                ("can_manage_budget", models.BooleanField(default=False)),
                ("can_view_financial", models.BooleanField(default=False)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "school_year",
                    models.CharField(
                        help_text="School year within the educational system",
                        max_length=50,
                        verbose_name="school year",
                    ),
                ),
                ("birth_date", models.DateField(verbose_name="birth date")),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("STUDENT_GUARDIAN", "Student + Guardian Accounts"),
                            ("ADULT_STUDENT", "Adult Student Only"),
                            ("GUARDIAN_ONLY", "Guardian Manages Student Data"),
                        ],
                        default="STUDENT_GUARDIAN",
                        help_text="Defines who has accounts and manages this student",
                        max_length=20,
                        verbose_name="account type",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about the student, special needs, etc.",
                        verbose_name="notes",
                    ),
                ),
                (
                    "email_notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Enable email notifications for student alerts",
                        verbose_name="email notifications enabled",
                    ),
                ),
                (
                    "sms_notifications_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable SMS notifications for student alerts",
                        verbose_name="SMS notifications enabled",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Student address (only for adult students)",
                        verbose_name="address",
                    ),
                ),
                (
                    "tax_nr",
                    models.CharField(
                        blank=True,
                        help_text="Tax number (only for adult students)",
                        max_length=20,
                        verbose_name="tax number",
                    ),
                ),
                (
                    "invoice",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to issue invoices (only for adult students)",
                        verbose_name="invoice",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["user__name", "birth_date"],
            },
        ),
        migrations.CreateModel(
            name="TeacherCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Specific hourly rate for this course (overrides teacher's default rate)",
                        max_digits=6,
                        null=True,
                        verbose_name="hourly rate for this course",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, verbose_name="is actively teaching"
                    ),
                ),
                (
                    "started_teaching",
                    models.DateField(
                        auto_now_add=True, verbose_name="started teaching date"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeacherInvitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="email address"),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("school_owner", "School Owner"),
                            ("school_admin", "School Administrator"),
                            ("teacher", "Teacher"),
                            ("school_staff", "School Staff"),
                            ("student", "Student"),
                            ("guardian", "Guardian"),
                        ],
                        default="teacher",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "custom_message",
                    models.TextField(
                        blank=True,
                        help_text="Personal message to include in the invitation",
                        max_length=1000,
                        null=True,
                        verbose_name="custom message",
                    ),
                ),
                (
                    "batch_id",
                    models.UUIDField(
                        help_text="UUID to group related invitations together",
                        verbose_name="batch ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("viewed", "Viewed"),
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "email_delivery_status",
                    models.CharField(
                        choices=[
                            ("not_sent", "Not Sent"),
                            ("queued", "Queued"),
                            ("sending", "Sending"),
                            ("sent", "Sent"),
                            ("delivered", "Delivered"),
                            ("opened", "Opened"),
                            ("clicked", "Clicked"),
                            ("failed", "Failed"),
                        ],
                        default="not_sent",
                        max_length=20,
                        verbose_name="email delivery status",
                    ),
                ),
                (
                    "email_sent_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="email sent at"
                    ),
                ),
                (
                    "email_delivered_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="email delivered at"
                    ),
                ),
                (
                    "email_failure_reason",
                    models.TextField(
                        blank=True, null=True, verbose_name="email failure reason"
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="retry count"
                    ),
                ),
                (
                    "max_retries",
                    models.PositiveSmallIntegerField(
                        default=3, verbose_name="max retries"
                    ),
                ),
                (
                    "token",
                    models.CharField(max_length=64, unique=True, verbose_name="token"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("expires_at", models.DateTimeField()),
                (
                    "is_accepted",
                    models.BooleanField(default=False, verbose_name="is accepted"),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="accepted at"
                    ),
                ),
                (
                    "declined_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was declined",
                        null=True,
                        verbose_name="declined at",
                    ),
                ),
                (
                    "viewed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the invitation was first viewed",
                        null=True,
                        verbose_name="viewed at",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Invitation",
                "verbose_name_plural": "Teacher Invitations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Teacher's professional biography",
                        verbose_name="biography",
                    ),
                ),
                (
                    "specialty",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="specialty"
                    ),
                ),
                (
                    "education",
                    models.TextField(
                        blank=True,
                        help_text="Educational background and qualifications",
                        verbose_name="education",
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="hourly rate",
                    ),
                ),
                (
                    "availability",
                    models.TextField(
                        blank=True,
                        help_text="Available days and times for lessons",
                        verbose_name="availability",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Street, number, postal code and location",
                        verbose_name="address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="teacher phone"
                    ),
                ),
                (
                    "calendar_iframe",
                    models.TextField(blank=True, verbose_name="calendar iframe"),
                ),
                (
                    "education_background",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured educational background data (degree, institution, field, year)",
                        verbose_name="education background",
                    ),
                ),
                (
                    "teaching_subjects",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of subjects the teacher specializes in",
                        verbose_name="teaching subjects",
                    ),
                ),
                (
                    "rate_structure",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed rate structure for different class types",
                        verbose_name="rate structure",
                    ),
                ),
                (
                    "weekly_availability",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured weekly availability schedule",
                        verbose_name="weekly availability",
                    ),
                ),
                (
                    "grade_level_preferences",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of preferred grade levels (elementary, middle, high school, university)",
                        verbose_name="grade level preferences",
                    ),
                ),
                (
                    "teaching_experience",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured teaching experience data (years, institutions, specializations)",
                        verbose_name="teaching experience",
                    ),
                ),
                (
                    "credentials_documents",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of uploaded credential document references",
                        verbose_name="credentials documents",
                    ),
                ),
                (
                    "availability_schedule",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed availability schedule with time slots and preferences",
                        verbose_name="availability schedule",
                    ),
                ),
                (
                    "last_profile_update",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the profile was last updated",
                        verbose_name="last profile update",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the teacher was last active in the system",
                        null=True,
                        verbose_name="last activity",
                    ),
                ),
                (
                    "minimum_notice_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Override minimum notice period in minutes (school default if null)",
                        null=True,
                        verbose_name="minimum notice minutes",
                    ),
                ),
                (
                    "buffer_time_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Buffer time between classes in minutes (school default if null)",
                        null=True,
                        verbose_name="buffer time minutes",
                    ),
                ),
                (
                    "max_daily_bookings",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum classes per day (school default if null)",
                        null=True,
                        verbose_name="maximum daily bookings",
                    ),
                ),
                (
                    "max_weekly_bookings",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum classes per week (school default if null)",
                        null=True,
                        verbose_name="maximum weekly bookings",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VerificationCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("secret_key", models.CharField(max_length=32)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_code_generated_at", models.DateTimeField(auto_now=True)),
                ("is_used", models.BooleanField(default=False)),
                ("failed_attempts", models.PositiveSmallIntegerField(default=0)),
                ("max_attempts", models.PositiveSmallIntegerField(default=5)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="username"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="name")),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="phone number"
                    ),
                ),
                (
                    "profile_photo",
                    models.ImageField(
                        blank=True,
                        help_text="User profile photo",
                        null=True,
                        upload_to="profile_photos/",
                        verbose_name="profile photo",
                    ),
                ),
                (
                    "primary_contact",
                    models.CharField(
                        choices=[("email", "Email"), ("phone", "Phone")],
                        default="email",
                        max_length=10,
                        verbose_name="primary contact",
                    ),
                ),
                (
                    "email_verified",
                    models.BooleanField(default=False, verbose_name="email verified"),
                ),
                (
                    "phone_verified",
                    models.BooleanField(default=False, verbose_name="phone verified"),
                ),
                (
                    "verification_required_after",
                    models.DateTimeField(
                        blank=True,
                        help_text="After this time, user must verify email/phone to continue accessing the platform",
                        null=True,
                        verbose_name="verification required after",
                    ),
                ),
                (
                    "first_login_completed",
                    models.BooleanField(
                        default=False, verbose_name="first login completed"
                    ),
                ),
                (
                    "onboarding_completed",
                    models.BooleanField(
                        default=False, verbose_name="onboarding completed"
                    ),
                ),
                (
                    "onboarding_progress",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="onboarding progress"
                    ),
                ),
                (
                    "tutorial_preferences",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="tutorial preferences"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["name", "email"],
            },
            managers=[
                ("objects", accounts.models.users.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="EducationalSystem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the educational system (e.g., 'Portugal')",
                        max_length=100,
                        verbose_name="system name",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[("pt", "Portugal"), ("custom", "Custom")],
                        help_text="Unique code for the system (e.g., 'pt')",
                        max_length=20,
                        unique=True,
                        verbose_name="system code",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the educational system",
                        verbose_name="description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Educational System",
                "verbose_name_plural": "Educational Systems",
                "ordering": ["name", "code"],
                "indexes": [
                    models.Index(fields=["code"], name="accounts_ed_code_23b18c_idx"),
                    models.Index(fields=["name"], name="accounts_ed_name_a84045_idx"),
                    models.Index(
                        fields=["is_active"], name="accounts_ed_is_acti_095f4f_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="accounts_ed_created_8099c4_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, verbose_name="course name")),
                (
                    "code",
                    models.CharField(
                        help_text="Alphanumeric code for the course (e.g., educational system codes)",
                        max_length=20,
                        verbose_name="course code",
                    ),
                ),
                (
                    "education_level",
                    models.CharField(
                        default="other",
                        help_text="Education level within the educational system",
                        max_length=50,
                        verbose_name="education level",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the course content and objectives",
                        verbose_name="course description",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "educational_system",
                    models.ForeignKey(
                        help_text="Educational system this course belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to="accounts.educationalsystem",
                    ),
                ),
            ],
            options={
                "ordering": ["educational_system__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="GuardianProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Guardian notification preferences (email, SMS, in-app)",
                        verbose_name="notification preferences",
                    ),
                ),
                (
                    "default_approval_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Default purchase approval settings for all studentren",
                        verbose_name="default approval settings",
                    ),
                ),
                (
                    "email_notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Enable email notifications for guardian alerts",
                        verbose_name="email notifications enabled",
                    ),
                ),
                (
                    "sms_notifications_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable SMS notifications for guardian alerts",
                        verbose_name="SMS notifications enabled",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Street, number, postal code and location",
                        verbose_name="address",
                    ),
                ),
                (
                    "tax_nr",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="tax number"
                    ),
                ),
                (
                    "invoice",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to issue invoices for this guardian",
                        verbose_name="invoice",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guardian_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "guardian Profile",
                "verbose_name_plural": "guardian Profiles",
            },
        ),
        migrations.CreateModel(
            name="GuardianStudentRelationship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this relationship is currently active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "requires_purchase_approval",
                    models.BooleanField(
                        default=True,
                        help_text="Whether guardian approval is required for purchases",
                        verbose_name="requires purchase approval",
                    ),
                ),
                (
                    "requires_session_approval",
                    models.BooleanField(
                        default=True,
                        help_text="Whether guardian approval is required for booking sessions",
                        verbose_name="requires session approval",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "guardian",
                    models.ForeignKey(
                        help_text="Guardian user who manages the student account",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="studentren_relationships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="guardian",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student user whose account is managed by the guardian",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guardian_relationships",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="student",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        help_text="School where this relationship is established",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
            ],
            options={
                "verbose_name": "guardian-student Relationship",
                "verbose_name_plural": "guardian-student Relationships",
            },
        ),
        migrations.CreateModel(
            name="SchoolActivity",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("invitation_sent", "Invitation Sent"),
                            ("invitation_accepted", "Invitation Accepted"),
                            ("invitation_declined", "Invitation Declined"),
                            ("student_joined", "Student Joined"),
                            ("teacher_joined", "Teacher Joined"),
                            ("class_created", "Class Created"),
                            ("class_completed", "Class Completed"),
                            ("class_cancelled", "Class Cancelled"),
                            ("settings_updated", "Settings Updated"),
                        ],
                        max_length=30,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("description", models.TextField()),
                (
                    "actor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activities_performed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="accounts.school",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
    ]
