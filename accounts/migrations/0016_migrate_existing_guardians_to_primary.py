# Generated by Django 5.2.5 on 2025-09-24 13:52

from django.db import migrations


def migrate_existing_guardians(apps, schema_editor):
    """
    Convert existing single guardian relationships to primary relationships.

    This migration:
    1. Sets existing GuardianStudentRelationship records as primary
    2. Ensures they have financial permissions
    3. Creates relationships for StudentProfiles that have direct guardian links
       but no corresponding GuardianStudentRelationship
    """
    StudentProfile = apps.get_model('accounts', 'StudentProfile')
    GuardianStudentRelationship = apps.get_model('accounts', 'GuardianStudentRelationship')

    # Step 1: Mark ALL existing GuardianStudentRelationship records as primary
    # Since previously each student could only have one guardian, all existing
    # relationships should be primary
    updated_count = GuardianStudentRelationship.objects.filter(
        is_primary=False
    ).update(
        is_primary=True,
        can_manage_finances=True,
        can_book_classes=True,
        can_view_records=True,
        can_edit_profile=True,
        can_receive_notifications=True
    )

    print(f"Marked {updated_count} existing guardian relationships as primary")

    # Step 2: Handle StudentProfiles with direct guardian links but no relationship records
    students_with_guardians = StudentProfile.objects.exclude(guardian__isnull=True).select_related('guardian__user', 'user')
    created_count = 0

    for student in students_with_guardians:
        if not student.user:
            continue  # Skip guardian-only students without user accounts

        # Skip invalid relationships where guardian == student (violates constraint)
        if student.user == student.guardian.user:
            print(f"Skipping invalid relationship: {student.user.email} cannot be guardian of themselves")
            continue

        # Check if relationship already exists
        existing_rel = GuardianStudentRelationship.objects.filter(
            student=student.user,
            guardian=student.guardian.user
        ).exists()

        if not existing_rel:
            # We need to find a school for this relationship
            # Try to find a school where both guardian and student are members
            SchoolMembership = apps.get_model('accounts', 'SchoolMembership')

            guardian_schools = SchoolMembership.objects.filter(
                user=student.guardian.user,
                is_active=True
            ).values_list('school', flat=True)

            student_schools = SchoolMembership.objects.filter(
                user=student.user,
                is_active=True
            ).values_list('school', flat=True)

            # Find common schools
            common_schools = set(guardian_schools) & set(student_schools)

            if common_schools:
                # Use the first common school
                School = apps.get_model('accounts', 'School')
                school = School.objects.get(id=list(common_schools)[0])

                # Create primary relationship
                GuardianStudentRelationship.objects.create(
                    student=student.user,
                    guardian=student.guardian.user,
                    school=school,
                    is_primary=True,
                    can_manage_finances=True,
                    can_book_classes=True,
                    can_view_records=True,
                    can_edit_profile=True,
                    can_receive_notifications=True,
                    is_active=True
                )
                created_count += 1
                print(f"Created primary relationship for student {student.user.email} with guardian {student.guardian.user.email} in school {school.name}")
            else:
                print(f"Warning: Could not create relationship for student {student.user.email} - no common school with guardian {student.guardian.user.email}")

    print(f"Created {created_count} new primary guardian relationships")


def reverse_migrate_guardians(apps, schema_editor):
    """
    Reverse the primary guardian migration by resetting is_primary to False
    and clearing permission fields.
    """
    GuardianStudentRelationship = apps.get_model('accounts', 'GuardianStudentRelationship')

    GuardianStudentRelationship.objects.update(
        is_primary=False,
        can_manage_finances=False,
        can_book_classes=True,  # Keep default value
        can_view_records=True,  # Keep default value
        can_edit_profile=True,  # Keep default value
        can_receive_notifications=True,  # Keep default value
        relationship_type='',
        created_by=None
    )


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0015_enhance_guardian_student_relationship"),
    ]

    operations = [
        migrations.RunPython(
            migrate_existing_guardians,
            reverse_code=reverse_migrate_guardians
        ),
    ]
