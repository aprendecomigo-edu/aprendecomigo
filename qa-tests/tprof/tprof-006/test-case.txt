QA Test Case: Step Navigation and Flow Control

Test ID: TPROF-006
Test Name: Step Navigation and Flow Control Testing
Purpose: Verify wizard navigation works correctly between steps, handles user interactions properly, and maintains flow integrity
Expected Result: Users can navigate freely between steps while maintaining data integrity and appropriate flow control

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo EdTech Platform
- Architecture: React Native + Expo frontend with Django REST backend
- Feature: Teacher Profile Wizard navigation and flow control

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Development servers: `make dev`
3. Browser dev tools for monitoring state changes
4. Access wizard at: http://localhost:8081/onboarding/teacher-profile

Test Data:
- Test email: navigation.test@aprendecomigo.com
- Progressive form data for testing step transitions
- Invalid data for testing flow control

Pre-Conditions:
- User authenticated with clean profile state
- Wizard accessible at expected URL
- All wizard steps are implemented and functional

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Basic Navigation Flow Testing
1. Navigate to teacher profile wizard
2. Verify initial state:
   - Step 1 of 7 is active
   - Progress bar shows 14% (1/7)
   - "Previous" button is disabled
   - "Next Step" button is enabled

3. Test forward navigation:
   - Fill required fields in Step 1
   - Click "Next Step"
   - Verify moves to Step 2
   - Progress bar updates to 28% (2/7)
   - "Previous" button now enabled

4. Test backward navigation:
   - Click "Previous" button
   - Verify returns to Step 1
   - Data from Step 1 preserved
   - Progress bar returns to 14%

Expected: Basic navigation works correctly with proper state updates
Screenshot: 01_basic_navigation.png

Step 2: Navigation Validation Testing
1. Start at Step 1 with empty form
2. Test validation enforcement:
   - Try to click "Next Step" with empty required fields
   - Verify navigation blocked
   - Error messages displayed
   - Step remains at 1

3. Fill some but not all required fields:
   - Fill first name only
   - Try to proceed
   - Verify still blocked with specific error messages

4. Complete all required fields:
   - Fill all mandatory fields
   - Click "Next Step"
   - Verify navigation allowed

Expected: Navigation properly enforces validation rules
Screenshot: 02_navigation_validation.png

Step 3: Desktop Step Navigation (Sidebar)
1. Use desktop viewport (1024px+ width)
2. Verify desktop navigation features:
   - Sidebar navigation visible
   - All 7 steps listed in sidebar
   - Current step highlighted
   - Completed steps marked differently

3. Test sidebar step clicking:
   - Click on Step 3 from sidebar
   - Verify direct navigation (if allowed)
   - OR verify prevented with explanation

4. Test step status indicators:
   - Complete Step 1, verify checkmark/completion indicator
   - Navigate to Step 2, verify current step highlighting
   - Check incomplete steps show as incomplete

Expected: Desktop navigation provides enhanced step control
Screenshot: 03_desktop_navigation.png

Step 4: Mobile Navigation Flow
1. Switch to mobile viewport (375px width)
2. Verify mobile navigation:
   - Sidebar navigation hidden/collapsed
   - Progress indicator optimized for mobile
   - Navigation buttons accessible
   - Step information clear

3. Test mobile-specific navigation:
   - Swipe gestures (if implemented)
   - Touch-friendly button sizing
   - Step indicator tap behavior
   - Compact progress display

Expected: Mobile navigation optimized for touch interaction
Screenshot: 04_mobile_navigation.png

Step 5: Progress Persistence During Navigation
1. Fill data in Step 1 and navigate to Step 2
2. Fill partial data in Step 2
3. Navigate back to Step 1
4. Verify Step 1 data preserved
5. Navigate forward to Step 2
6. Verify Step 2 partial data preserved

7. Test cross-step data consistency:
   - Change years of experience in Step 1
   - Navigate to Step 4 (Subjects)
   - Verify subject years teaching cannot exceed total experience

Expected: Data persists correctly during navigation with consistency checks
Screenshot: 05_progress_persistence.png

Step 6: URL-Based Navigation Testing
1. Complete Step 1 and navigate to Step 2
2. Note browser URL (should reflect current step)
3. Test browser back/forward buttons:
   - Click browser back button
   - Verify returns to Step 1
   - Click browser forward button
   - Verify returns to Step 2

4. Test direct URL access:
   - Copy Step 3 URL (if URLs are step-specific)
   - Open in new tab
   - Verify appropriate behavior (redirect to current progress or allow direct access)

5. Test invalid URLs:
   - Try accessing Step 8 (non-existent)
   - Try accessing Step 0 or negative step
   - Verify graceful handling

Expected: URL navigation integrates properly with wizard flow
Screenshot: 06_url_navigation.png

Step 7: Flow Control Logic Testing
1. Test step dependencies:
   - Try to access Step 4 (Subjects) without completing Step 1 (Basic Info)
   - Verify appropriate behavior (redirect or prevention)

2. Test required step completion:
   - Skip optional fields in steps
   - Verify can still proceed
   - Skip required fields
   - Verify navigation blocked

3. Test step completion tracking:
   - Complete all required fields in a step
   - Navigate away and back
   - Verify step marked as complete
   - Verify can still edit completed steps

Expected: Flow control enforces business rules while allowing flexibility
Screenshot: 07_flow_control.png

Step 8: Exit and Re-entry Flow
1. Complete Steps 1-3 partially
2. Click "Exit" button
3. Test exit dialog options:
   - "Save & Exit" - should save progress and exit
   - "Exit Without Saving" - should exit without saving
   - "Cancel" - should return to wizard

4. If saved and exited, test re-entry:
   - Navigate back to wizard
   - Verify resumes at correct step
   - Verify all data preserved
   - Can continue from where left off

Expected: Exit/re-entry flow preserves user choice and progress
Screenshot: 08_exit_reentry.png

Step 9: Completion Flow Testing
1. Complete all steps 1-6 with valid data
2. Navigate to Step 7 (Preview)
3. Test final step behavior:
   - "Previous" button still works
   - "Complete Profile" button replaces "Next Step"
   - Preview shows all entered data

4. Test completion process:
   - Click "Complete Profile"
   - Verify loading state shown
   - Verify success handling
   - Verify redirect to dashboard

Expected: Completion flow works smoothly with proper feedback
Screenshot: 09_completion_flow.png

Step 10: Error Handling in Navigation
1. Simulate navigation errors:
   - Network disconnection during step transition
   - Server errors during save
   - Invalid step data during navigation

2. Test error recovery:
   - Error messages displayed clearly
   - User can retry navigation
   - No data lost during errors
   - Can recover from error states

Expected: Navigation errors handled gracefully without data loss
Screenshot: 10_error_handling.png

Step 11: Performance During Navigation
1. Test navigation performance:
   - Time each step transition
   - Monitor for delays or lag
   - Test with large amounts of data in forms

2. Test concurrent navigation:
   - Rapid clicking of navigation buttons
   - Multiple rapid step changes
   - Navigation during auto-save

3. Verify performance metrics:
   - Step transitions under 500ms
   - No memory leaks during navigation
   - Smooth animations/transitions

Expected: Navigation performance meets user expectations
Screenshot: 11_navigation_performance.png

Step 12: Accessibility in Navigation
1. Test keyboard navigation:
   - Tab through navigation elements
   - Use Enter/Space to activate buttons
   - Arrow keys for step selection (if applicable)

2. Test screen reader compatibility:
   - Navigation structure announced properly
   - Step progress communicated clearly
   - Current step and total steps announced

3. Test focus management:
   - Focus moves appropriately during navigation
   - Focus visible indicators clear
   - Focus trapped within wizard appropriately

Expected: Navigation is fully accessible to users with disabilities
Screenshot: 12_navigation_accessibility.png

Step 13: Edge Cases in Navigation
1. Test boundary conditions:
   - Navigate to Step 1 when already at Step 1
   - Navigate to Step 7 when already at Step 7
   - Very rapid navigation clicks

2. Test interrupted navigation:
   - Start navigation, then interrupt with browser refresh
   - Start navigation, then close/reopen tab
   - Navigation during network interruption

3. Test navigation with corrupted state:
   - Corrupt local storage during navigation
   - Invalid wizard state during navigation
   - Missing step data during navigation

Expected: Edge cases handled gracefully without breaking navigation
Screenshot: 13_navigation_edge_cases.png

=== PASS/FAIL CRITERIA ===

PASS: All navigation works correctly AND maintains data integrity AND provides appropriate user feedback
FAIL: Any navigation fails OR data is lost during navigation OR user experience is confusing

Individual Criteria:
- Basic Navigation: PASS if forward/backward navigation works correctly, FAIL if navigation broken
- Validation Control: PASS if validation properly controls navigation, FAIL if can bypass validation
- Progress Tracking: PASS if progress accurately tracked and displayed, FAIL if progress indicators wrong
- Data Persistence: PASS if data preserved during navigation, FAIL if any data lost
- URL Integration: PASS if browser navigation works correctly, FAIL if URL handling broken
- Flow Control: PASS if business rules enforced properly, FAIL if can access invalid steps
- Exit/Re-entry: PASS if exit and resume flows work, FAIL if resume functionality broken
- Completion: PASS if completion flow works smoothly, FAIL if completion fails
- Error Handling: PASS if navigation errors handled gracefully, FAIL if errors break navigation
- Performance: PASS if navigation responsive, FAIL if navigation slow or laggy
- Accessibility: PASS if navigation accessible, FAIL if accessibility issues
- Edge Cases: PASS if edge cases handled properly, FAIL if edge cases break navigation

User Experience Requirements:
- Navigation should feel intuitive and responsive
- Progress should be clearly communicated
- Users should never lose their work during navigation
- Error states should be recoverable
- Mobile navigation should be touch-optimized

Performance Requirements:
- Step transitions should complete within 500ms
- Progress updates should be immediate
- No memory leaks during navigation
- Smooth animations at 60fps

Overall Result: PASS only if ALL navigation functionality works perfectly, FAIL if ANY navigation issues impact user experience