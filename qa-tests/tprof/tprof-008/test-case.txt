QA Test Case: Individual Tutor Profile Configuration System (GitHub Issue #46)

Test ID: TPROF-008
Test Name: Credentialing and Trust-Building System - Professional Verification for Individual Tutors
Purpose: Verify that individual tutors can configure their complete teaching profile with subjects, grade levels, availability, and professional credentials after school creation
Expected Result: Tutor successfully completes profile configuration with all required information and can preview their public profile

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo EdTech Platform
- Architecture: React Native + Expo frontend with Django REST backend
- GitHub Issue: #46 - Credentialing and Trust-Building System
- User Story: Individual tutor profile configuration after school creation
- Frontend: http://localhost:8081
- Backend API: http://localhost:8000/api/

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Development servers: `make dev-open`
3. Python Virtual Environment: .venv/ in project root
4. Individual tutor account (onboarded as SCHOOL_OWNER + TEACHER)

Test Data:
- Test Email: tutor.profile.test@test.com
- Tutor Name: Maria Silva
- Subjects: Mathematics, Physics, Portuguese
- Grade Levels: Elementary, Middle School, High School
- Teaching Rate: €25/hour (Elementary), €30/hour (Middle), €35/hour (High School)
- Availability: Mon-Fri 9:00-17:00, Sat 9:00-13:00
- Bio: "Experienced educator with 8 years teaching mathematics and physics"
- Credentials: "Master's in Mathematics Education, Licensed Teacher"

User Journey Context:
- Individual tutors are onboarded as both SCHOOL_OWNER and TEACHER of their own school
- After completing school creation, they need to configure their teaching profile
- Profile configuration includes professional verification elements for trust-building

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Complete Individual Tutor Signup and School Creation
1. Navigate to http://localhost:8081
2. Complete individual tutor signup process
3. Verify login successful and school created
4. Locate the "Configure Teaching Profile" or similar option
5. Access the profile configuration interface

Expected: Profile configuration interface loads successfully after school creation
Screenshot: 01_profile_config_access.png
Debug: Use browser console to check for any loading errors

Step 2: Verify Profile Configuration Interface Layout
1. Examine the main profile configuration page
2. Verify presence of all required sections:
   - Subject selection interface
   - Grade level selection options
   - Availability calendar interface
   - Teaching rate configuration
   - Profile photo upload area
   - Bio/description text area
   - Credentials and experience section
   - Profile preview functionality
3. Check that interface is clean and professional
4. Verify navigation between sections works

Expected: All profile configuration sections present and accessible
Screenshot: 02_profile_interface_overview.png

Step 3: Test Subject Selection with Standard Options
1. Locate the subject selection section
2. Verify standard subject options are available:
   - Mathematics
   - Physics
   - Chemistry
   - Biology
   - Portuguese
   - English
   - History
   - Geography
   - Computer Science
3. Test multi-select functionality
4. Select Mathematics, Physics, and Portuguese
5. Verify selected subjects are highlighted/marked

Expected: Subject selection works with multiple subjects selectable
Screenshot: 03_subject_selection_standard.png

Step 4: Test Custom Subject Entry
1. Look for "Add Custom Subject" or similar functionality
2. Enter a custom subject: "Advanced Calculus"
3. Verify custom subject is added to selection
4. Test custom subject can be selected alongside standard subjects
5. Verify custom subject persists in the selection

Expected: Custom subject entry works and integrates with standard subjects
Screenshot: 04_custom_subject_entry.png

Step 5: Test Grade Level Selection
1. Locate grade level selection section
2. Verify all education levels are available:
   - Elementary School (1º-4º ano)
   - Middle School (5º-9º ano)
   - High School (10º-12º ano)
   - University/Higher Education
3. Test multi-select functionality for grade levels
4. Select Elementary, Middle School, and High School
5. Verify selection feedback is clear

Expected: Grade level selection works with clear multi-select capability
Screenshot: 05_grade_level_selection.png

Step 6: Test Availability Calendar Interface
1. Locate the availability/schedule configuration section
2. Verify calendar or time slot interface is present
3. Test setting availability for different days:
   - Monday 9:00-17:00
   - Tuesday 9:00-17:00
   - Wednesday 9:00-17:00
   - Thursday 9:00-17:00
   - Friday 9:00-17:00
   - Saturday 9:00-13:00
   - Sunday: Not available
4. Verify time slot selection is intuitive
5. Test removing/editing availability slots

Expected: Availability calendar interface works smoothly for setting teaching hours
Screenshot: 06_availability_calendar.png

Step 7: Test Teaching Rate Configuration
1. Locate teaching rate/pricing section
2. Test setting different rates by grade level:
   - Elementary: €25/hour
   - Middle School: €30/hour
   - High School: €35/hour
3. Verify rate input accepts currency formatting
4. Test that rates can be different for different subjects (if supported)
5. Check for any rate validation (minimum/maximum limits)

Expected: Teaching rate configuration works with proper validation
Screenshot: 07_teaching_rates.png

Step 8: Test Profile Photo Upload
1. Locate profile photo upload section
2. Test uploading a profile photo
3. Verify photo preview appears correctly
4. Test photo cropping/resizing functionality (if available)
5. Verify photo upload progress and completion
6. Test replacing existing photo

Expected: Profile photo upload works with proper preview and validation
Screenshot: 08_profile_photo_upload.png

Step 9: Test Bio/Description Section
1. Locate bio or description text area
2. Enter comprehensive bio: "Experienced educator with 8 years teaching mathematics and physics. Passionate about helping students understand complex concepts through practical examples."
3. Verify character limits (if any)
4. Test text formatting options (if available)
5. Check that bio text saves properly

Expected: Bio section accepts text input with proper validation
Screenshot: 09_bio_description.png

Step 10: Test Teaching Credentials and Experience Section
1. Locate credentials/experience section
2. Enter teaching credentials:
   - "Master's in Mathematics Education"
   - "Licensed Teacher - Ministry of Education"
   - "8 years teaching experience"
   - "Specialization in Advanced Mathematics"
3. Verify credentials can be added/removed
4. Test credential verification features (if available)
5. Check professional validation elements

Expected: Credentials section works for building trust and credibility
Screenshot: 10_credentials_experience.png

Step 11: Test Profile Preview Functionality
1. Locate "Preview Profile" or similar button
2. Click to view how profile appears to students
3. Verify all entered information displays correctly:
   - Name and photo
   - Selected subjects and grade levels
   - Availability and rates
   - Bio and credentials
4. Check that preview matches student-facing view
5. Test preview on mobile viewport

Expected: Profile preview accurately shows how students will see the tutor
Screenshot: 11_profile_preview.png

Step 12: Test Save and Continue Functionality
1. Verify all profile sections are completed
2. Click "Save" or "Save and Continue" button
3. Check for loading indicators during save
4. Verify success confirmation appears
5. Check that data persists after save
6. Test navigation to next step (if applicable)

Expected: Save functionality works with proper feedback and persistence
Screenshot: 12_save_continue.png

Step 13: Test Form Validation and Error Handling
1. Test submitting with missing required fields
2. Verify proper error messages appear
3. Test invalid data inputs:
   - Negative rates
   - Invalid time slots
   - Empty required fields
4. Check error message clarity and positioning
5. Verify validation prevents invalid submissions

Expected: Form validation works properly with clear error messages
Screenshot: 13_form_validation.png

Step 14: Test Data Persistence and Recovery
1. Complete partial profile configuration
2. Navigate away from profile page
3. Return to profile configuration
4. Verify all entered data is preserved
5. Test auto-save functionality (if available)
6. Check data recovery after browser refresh

Expected: Profile data persists properly during and after configuration
Screenshot: 14_data_persistence.png

Step 15: Test Mobile Responsiveness
1. Switch to mobile viewport (375x667)
2. Test all profile configuration sections:
   - Subject selection on mobile
   - Availability calendar on touch screen
   - Rate input on mobile keyboard
   - Photo upload on mobile
   - Bio text entry on mobile
3. Verify touch interactions work smoothly
4. Check that layout adapts properly

Expected: Profile configuration is mobile-friendly with proper touch interactions
Screenshot: 15_mobile_responsiveness.png

Step 16: Test Integration with Student Discovery
1. Complete full profile configuration
2. Navigate to any student-facing areas (if accessible)
3. Verify tutor profile appears in student searches
4. Check that all configured information is available to students
5. Test that rates and availability are correctly displayed

Expected: Configured profile integrates properly with student discovery features
Screenshot: 16_student_integration.png

=== PASS/FAIL CRITERIA ===

PASS: Tutor can successfully configure complete teaching profile with all required elements AND profile displays correctly to students AND all data persists properly
FAIL: Any required configuration element is missing, broken, or doesn't save properly OR profile preview doesn't work OR mobile experience is poor

Individual Step Criteria:
- Step 1: PASS if profile configuration interface loads after school creation
- Step 2: PASS if all required sections are present and accessible
- Step 3: PASS if standard subject selection works with multi-select
- Step 4: PASS if custom subject entry works and integrates properly
- Step 5: PASS if grade level selection works with clear multi-select
- Step 6: PASS if availability calendar interface functions properly
- Step 7: PASS if teaching rate configuration works with validation
- Step 8: PASS if profile photo upload works with preview
- Step 9: PASS if bio section accepts text with proper validation
- Step 10: PASS if credentials section supports trust-building information
- Step 11: PASS if profile preview accurately shows student-facing view
- Step 12: PASS if save functionality works with proper feedback
- Step 13: PASS if form validation prevents invalid submissions
- Step 14: PASS if data persists properly during and after configuration
- Step 15: PASS if mobile experience is smooth and touch-friendly
- Step 16: PASS if profile integrates properly with student discovery

GitHub Issue #46 Acceptance Criteria Validation:
✓ Teacher can access profile configuration interface after school creation
✓ Subject selection with standard options and custom subject entry
✓ Grade level selection (elementary, middle, high school, university)
✓ Availability calendar interface for setting teaching hours
✓ Teaching rate configuration per grade level or subject
✓ Profile photo upload capability
✓ Bio/description section for marketing themselves
✓ Teaching credentials and experience section
✓ Preview of how their profile appears to students
✓ Save and continue functionality

Trust-Building and Credentialing Requirements:
- Professional appearance with clear credential display
- Comprehensive profile information for student confidence
- Proper validation to ensure quality information
- Preview functionality to maintain professional standards

User Experience Requirements:
- Intuitive interface that guides tutors through profile creation
- Clear visual feedback for all interactions
- Mobile-friendly design for on-the-go configuration
- Professional appearance that builds trust with students
- Smooth data persistence and auto-save functionality

Performance Requirements:
- Profile interface loads within 2 seconds
- Photo upload completes within 30 seconds
- Save operations complete within 5 seconds
- No console errors or JavaScript exceptions
- Responsive interactions under 200ms

Overall Result: PASS only if ALL acceptance criteria are met AND user experience is smooth AND mobile functionality works properly, FAIL if ANY required element is missing or broken