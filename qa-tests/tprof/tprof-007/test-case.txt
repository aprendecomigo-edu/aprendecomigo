QA Test Case: Complete Individual Tutor Onboarding Flow (GitHub Issue #44)

Test ID: TPROF-007
Test Name: Complete Individual Tutor Onboarding Flow with Course Catalog Selection
Purpose: Verify complete tutor onboarding including educational system selection, course catalog browsing, and rate configuration as per GitHub issue #44
Expected Result: Individual tutor successfully completes onboarding with course selection and published profile

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo EdTech Platform
- Architecture: React Native + Expo frontend with Django REST backend
- Feature: Individual Tutor Onboarding with Course Catalog Selection (GitHub issue #44)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Development servers: `make dev-open`
4. Backend logs: `make logs` (if needed for debugging)

Test Data:
- Test Email: individual.tutor@test.com
- User Role: Individual tutor (will become both school_owner and teacher)
- Educational System: Portugal (primary test), Brazil, Custom (secondary tests)
- Courses: Mathematics (Grades 10-12), Physics (Grades 11-12), Chemistry (Grade 12)
- Rates: Mathematics €25/hour, Physics €30/hour, Chemistry €35/hour

Key APIs to Validate:
- GET /api/accounts/courses/ - Enhanced course catalog with filtering
- GET /api/finances/tutor-analytics/<school_id>/ - Business analytics
- GET /api/accounts/tutors/discover/ - Public tutor discovery
- POST /api/accounts/schools/ - School creation for individual tutors
- POST/PUT /api/accounts/teacher-profiles/ - Teacher profile management

Pre-Conditions:
- Clean database state or test user should not exist
- All development servers running properly
- Course catalog populated with Portugal, Brazil, and Custom educational systems

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Access
1. Start development environment
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  make dev-open

2. Verify both servers are running:
   - Frontend: http://localhost:3000
   - Backend: http://localhost:8000

3. Open browser and navigate to the landing page
4. Verify the "Start Teaching" or "Join as Tutor" CTA is visible

Expected: Development environment running, landing page loads with tutor signup option
Screenshot: 01_landing_page_loaded.png
Debug: Use 'make logs' if servers fail to start

Step 2: Individual Tutor Signup Flow
1. Click on "Start Teaching" or equivalent tutor signup button
2. Verify user type selection screen appears
3. Select "Individual Tutor" option
4. Enter email: individual.tutor@test.com
5. Complete email verification process
6. Verify redirect to tutor onboarding flow

Expected: Email verification succeeds, user directed to TutorOnboardingFlow component
Screenshot: 02_tutor_signup_completed.png
API Check: Verify user created with proper role

Step 3: School Creation for Individual Tutor
1. Verify TutorSchoolCreationModal appears
2. Fill school creation form:
   - School Name: "Maria Silva Tutoring"
   - Description: "Individual tutoring services for mathematics and sciences"
   - Address: "Rua Augusta 123, Lisbon, Portugal"
   - Website: "https://mariasilva-tutoring.com"
3. Submit school creation form
4. Verify school is created successfully

Expected: School created, user becomes school_owner, modal closes
Screenshot: 03_school_creation_completed.png
API Check: Verify POST /api/accounts/schools/ creates school with user as owner

Step 4: Educational System Selection Interface
1. Verify EducationalSystemSelector component loads
2. Check that all three educational systems are displayed:
   - Portugal (with description about Portuguese curriculum)
   - Brazil (with description about Brazilian curriculum)
   - Custom (with description about custom/international curriculum)
3. Select "Portugal" educational system
4. Verify clear indication of selection
5. Click "Continue" or "Next"

Expected: Educational system selected, clear visual feedback, navigation continues
Screenshot: 04_educational_system_selected.png
API Check: Verify educational system preference saved

Step 5: Course Catalog Browsing Interface
1. Verify CourseCatalogBrowser component loads
2. Check course organization:
   - Courses grouped by education level (Primary, Middle School, High School, University)
   - Within each level, organized by subject area (Mathematics, Sciences, Languages, etc.)
   - Visual hierarchy clear and intuitive
3. Verify course catalog shows Portuguese educational system courses
4. Browse through different education levels
5. Check subject area groupings make logical sense

Expected: Course catalog displays with clear organization, Portuguese courses visible
Screenshot: 05_course_catalog_browsing.png
API Check: Verify GET /api/accounts/courses/?educational_system=portugal returns correct data

Step 6: Multi-Course Selection with Grade Levels
1. Verify CourseSelectionManager component functionality
2. Select "Mathematics" course:
   - Check the course selection box/button
   - Verify course appears in selected list
   - Specify grade levels: Check "10th Grade", "11th Grade", "12th Grade"
3. Select "Physics" course:
   - Add to selection
   - Specify grade levels: Check "11th Grade", "12th Grade"
4. Select "Chemistry" course:
   - Add to selection
   - Specify grade levels: Check "12th Grade"
5. Verify selected courses display with clear visual confirmation
6. Test removing one course and re-adding it

Expected: Multi-select works smoothly, grade levels configurable per course, visual feedback clear
Screenshot: 06_multi_course_selection.png

Step 7: Course-Specific Rate Configuration
1. Verify RateConfigurationManager component loads
2. Check that each selected course has individual rate configuration:
   - Mathematics: Set rate to €25/hour
   - Physics: Set rate to €30/hour
   - Chemistry: Set rate to €35/hour
3. Verify rate inputs accept decimal values
4. Check currency is properly displayed (EUR)
5. Verify each course can have different rates
6. Test validation for minimum rates

Expected: Individual rate configuration works per course, validation functions properly
Screenshot: 07_rate_configuration.png

Step 8: Search and Filter Functionality
1. Navigate back to course catalog (if needed)
2. Test search functionality:
   - Search for "Mathematics" - verify relevant results
   - Search for "Física" (Physics in Portuguese) - verify results
   - Search for "Química" (Chemistry in Portuguese) - verify results
3. Test filtering:
   - Filter by education level (High School)
   - Filter by subject area (Sciences)
   - Clear filters and verify all courses return
4. Verify search is responsive and fast

Expected: Search returns relevant results quickly, filters work correctly, clear functionality works
Screenshot: 08_search_and_filters.png

Step 9: Visual Confirmation and Course Management
1. Verify all selected courses display clearly
2. Check course removal functionality:
   - Remove one course using X button or similar
   - Verify it's removed from selection and rates
   - Re-add the course
3. Verify course details are preserved during navigation
4. Check for popular/high-demand course indicators
5. Verify total course count is displayed

Expected: Course management intuitive, visual confirmation clear, data persistence works
Screenshot: 09_visual_confirmation.png

Step 10: Onboarding Progress Tracking
1. Verify TutorOnboardingProgress component shows progress
2. Check progress indicators throughout flow
3. Verify steps completed are marked appropriately
4. Check estimated completion time or remaining steps
5. Verify ability to navigate between completed steps

Expected: Progress tracking clear, navigation between steps works
Screenshot: 10_progress_tracking.png

Step 11: Complete Onboarding
1. Proceed through any remaining onboarding steps
2. Complete teacher profile configuration
3. Verify OnboardingSuccessScreen appears
4. Check that all data has been saved
5. Verify redirect to published tutor profile or dashboard

Expected: Onboarding completes successfully, success screen appears, data persisted
Screenshot: 11_onboarding_success.png

Step 12: Data Persistence and API Integration Verification
1. Navigate to tutor profile or dashboard
2. Verify all course selections are saved:
   - Courses appear in teaching subjects
   - Grade levels are correct for each course
   - Rates are saved per course
3. Test API endpoints:
   - GET /api/accounts/courses/ returns proper data
   - GET /api/finances/tutor-analytics/<school_id>/ works
   - GET /api/accounts/tutors/discover/ includes the new tutor
4. Verify backend models updated correctly:
   - Course relationships created
   - TeacherCourse models have correct data
   - School and teacher profiles linked properly

Expected: All data persisted correctly, API endpoints functional, models updated
Screenshot: 12_data_verification.png

=== PASS/FAIL CRITERIA ===

PASS: Complete onboarding flow succeeds AND all course selections saved AND rates configured correctly AND APIs functional AND tutor discoverable
FAIL: Any step fails OR data not persisted OR API errors OR incomplete onboarding

Individual Step Criteria:
- Step 1-2: PASS if signup and verification complete, FAIL if authentication fails
- Step 3: PASS if school creation succeeds, FAIL if school creation fails
- Step 4: PASS if educational system selection works with clear feedback, FAIL if selection broken
- Step 5: PASS if course catalog displays organized properly, FAIL if organization poor or data missing
- Step 6: PASS if multi-course selection with grade levels works, FAIL if selection functionality broken
- Step 7: PASS if individual rate configuration works per course, FAIL if rates cannot be set properly
- Step 8: PASS if search and filters work quickly and accurately, FAIL if search broken or slow
- Step 9: PASS if visual confirmation and course management intuitive, FAIL if UI confusing or broken
- Step 10: PASS if progress tracking clear and navigation works, FAIL if progress unclear
- Step 11: PASS if onboarding completes with success screen, FAIL if completion fails
- Step 12: PASS if all data persisted and APIs work, FAIL if data loss or API failures

GitHub Issue #44 Acceptance Criteria Validation:
✓ Educational system selection (Portugal, Brazil, Custom) with clear descriptions
✓ Course browsing interface organized by education level and subject area
✓ Multi-select functionality for choosing multiple courses to teach
✓ Grade level specification for each selected course
✓ Course-specific rate configuration allowing different prices per subject
✓ Search and filter functionality for finding specific courses quickly
✓ Visual confirmation of selected courses with easy removal options
✓ Integration with existing Course and TeacherCourse backend models

Performance Requirements:
- Course catalog should load within 2 seconds
- Search should return results within 500ms
- Multi-selection should be responsive (<200ms per action)
- No JavaScript errors or console warnings
- Mobile-friendly interface

Overall Result: PASS only if ALL acceptance criteria met and complete flow succeeds, FAIL if ANY critical functionality broken or acceptance criteria not met