TEST ID: pytest-006
TEST NAME: Anonymous User API Handling and Database Query Tests
PURPOSE: Verify that anonymous user handling in database queries and API endpoints works correctly, validating the fixes for anonymous user issues from GitHub Issue #8

SETUP:
1. Navigate to project root directory
2. Activate virtual environment: source .venv/bin/activate
3. Change to backend directory: cd backend/
4. Ensure API endpoints are accessible for anonymous testing

EXECUTION STEPS:

Step 1: Anonymous User Database Query Tests
- Run: pytest accounts/tests/test_models.py -k "anonymous" -v
- Run: pytest accounts/tests/test_views.py -k "anonymous" -v
- Verify anonymous user database queries don't cause errors
- Check that anonymous users are handled gracefully in queries
- Take screenshot: 01-anonymous-db-queries

Step 2: API Endpoint Anonymous Access Tests
- Run: pytest accounts/tests/test_views.py::SchoolViewSetTests -v
- Verify SchoolViewSet handles anonymous users correctly
- Check that anonymous access is properly restricted or allowed
- Test API response codes for anonymous requests
- Take screenshot: 02-anonymous-api-access

Step 3: Authentication Required Endpoint Tests
- Run: python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing')
import django
django.setup()
from django.test import Client
from django.urls import reverse
client = Client()
response = client.get('/api/accounts/users/')
print(f'Status: {response.status_code}')
print(f'Content: {response.content.decode()[:200]}')
"
- Verify protected endpoints properly reject anonymous users
- Check authentication error messages are appropriate
- Take screenshot: 03-auth-required-endpoints

Step 4: Public Endpoint Anonymous Access Tests
- Run: python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing')
import django
django.setup()
from django.test import Client
client = Client()
response = client.get('/api/accounts/schools/')
print(f'Status: {response.status_code}')
print(f'Response headers: {dict(response.headers)}')
"
- Verify public endpoints allow anonymous access
- Check that public data is accessible without authentication
- Take screenshot: 04-public-endpoint-access

Step 5: Anonymous User Permission Tests
- Run: pytest accounts/tests/test_security.py -k "permission" -v
- Verify permission system handles anonymous users correctly
- Check that anonymous users get appropriate permissions
- Test permission denial scenarios for anonymous access
- Take screenshot: 05-anonymous-permissions

Step 6: Database Query Filter Tests for Anonymous Users
- Run: python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing')
import django
django.setup()
from accounts.models import School, CustomUser
from django.db import connection
# Test queries that might involve anonymous users
try:
    schools = School.objects.all()
    print(f'Schools query successful: {schools.count()}')
    users = CustomUser.objects.filter(is_anonymous=False)
    print(f'Users query successful: {users.count()}')
except Exception as e:
    print(f'Query error: {e}')
"
- Verify database queries work with anonymous user considerations
- Check that filtering by user authentication status works
- Take screenshot: 06-db-query-filters

Step 7: Anonymous User Session Handling Tests
- Run: python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing')
import django
django.setup()
from django.test import Client
client = Client()
session = client.session
print(f'Anonymous session created: {session.session_key}')
response = client.get('/api/accounts/request-code/', {'email': 'test@example.com'})
print(f'Request with anonymous session: {response.status_code}')
"
- Verify anonymous user sessions are handled correctly
- Check session management for unauthenticated users
- Take screenshot: 07-anonymous-sessions

Step 8: Anonymous User Error Handling Tests
- Run: pytest accounts/tests/test_auth.py::EmailAuthTests::test_request_email_code_unregistered_user -v
- Run: pytest accounts/tests/test_auth.py::EmailAuthTests::test_verify_email_code_unregistered_user -v
- Verify anonymous/unregistered user error handling
- Check that error messages don't leak sensitive information
- Take screenshot: 08-anonymous-error-handling

Step 9: Anonymous User Rate Limiting Tests
- Run: pytest accounts/tests/test_auth.py::ThrottlingTests::test_throttling_limits_requests -v
- Verify rate limiting works for anonymous users
- Check that anonymous requests are properly throttled
- Test IP-based throttling for anonymous access
- Take screenshot: 09-anonymous-rate-limiting

Step 10: Anonymous User API Integration Tests
- Run: python -c "
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing')
import django
django.setup()
from django.test import Client
from django.urls import reverse
import json
client = Client()
# Test various endpoints as anonymous user
endpoints = [
    '/api/accounts/request-code/',
    '/api/accounts/verify-code/',
    '/api/accounts/schools/',
]
for endpoint in endpoints:
    try:
        response = client.get(endpoint)
        print(f'{endpoint}: {response.status_code}')
    except Exception as e:
        print(f'{endpoint}: Error - {e}')
"
- Test multiple API endpoints with anonymous access
- Verify consistent anonymous user handling across endpoints
- Take screenshot: 10-anonymous-api-integration

VERIFICATION CRITERIA:
- Anonymous user database queries complete without errors
- API endpoints properly handle anonymous user requests
- Protected endpoints correctly reject anonymous access
- Public endpoints allow appropriate anonymous access
- Permission system handles anonymous users correctly
- Database query filters work with anonymous user logic
- Session management works for anonymous users
- Error handling for anonymous users is secure and appropriate
- Rate limiting properly applies to anonymous requests
- Anonymous user handling is consistent across all endpoints

PASS/FAIL CRITERIA:
PASS: All anonymous user scenarios handled correctly, no database errors, proper API responses, secure error handling
FAIL: Database query errors for anonymous users, API failures, security leaks, or inconsistent anonymous handling

EXPECTED OUTCOMES:
- Anonymous user database queries execute without errors
- Protected API endpoints return 401/403 for anonymous users
- Public API endpoints allow anonymous access appropriately
- Permission system grants/denies access correctly for anonymous users
- Database query filters handle anonymous user logic
- Session management works for unauthenticated users
- Error messages for anonymous users are secure and informative
- Rate limiting prevents abuse from anonymous requests
- Consistent anonymous user handling across all API endpoints

NOTES:
- This test validates the anonymous user handling fixes from GitHub Issue #8
- Focuses on database query improvements and API endpoint security
- Should catch any regressions in anonymous user access or security
- Critical for ensuring proper separation of public and private data