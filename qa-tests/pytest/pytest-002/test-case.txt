TEST ID: pytest-002
TEST NAME: Pytest Dependencies and Configuration Validation
PURPOSE: Verify that all pytest dependencies are correctly installed and configured, and that dependency conflicts from GitHub Issue #8 have been resolved

SETUP:
1. Navigate to project root directory
2. Activate virtual environment: source .venv/bin/activate  
3. Change to backend directory: cd backend/
4. Verify access to requirements.txt and configuration files

EXECUTION STEPS:

Step 1: Requirements File Validation
- Verify requirements.txt exists and is readable
- Check pytest version specification (>= 7.4.3, < 9.0.0)
- Check pytest-django version specification (>= 4.7.0, < 5.0.0)
- Verify Django version compatibility (>= 5.1.7, < 5.2.0)
- Take screenshot: 01-requirements-validation

Step 2: Installed Dependencies Check
- Run: pip list | grep -E "(pytest|django)"
- Verify all pytest-related packages are installed:
  - pytest (>= 7.4.3)
  - pytest-django (>= 4.7.0)  
  - Django (>= 5.1.7)
- Check for version conflicts or missing dependencies
- Take screenshot: 02-installed-dependencies

Step 3: Dependency Conflict Resolution
- Run: pip check
- Verify no dependency conflicts exist
- Check that all package requirements are satisfied
- Verify no broken dependencies from previous issues
- Take screenshot: 03-dependency-conflicts

Step 4: Pytest Configuration File Validation
- Verify pytest.ini exists in backend directory
- Check DJANGO_SETTINGS_MODULE = aprendecomigo.settings.testing
- Verify test file discovery patterns are correct
- Check additional pytest options (--reuse-db)
- Take screenshot: 04-pytest-configuration

Step 5: Django Test Settings Validation
- Verify aprendecomigo/settings/testing.py exists
- Check test database configuration (SQLite for testing)
- Verify ALLOWED_HOSTS includes testserver, localhost, 127.0.0.1
- Check SECRET_KEY is set for testing
- Take screenshot: 05-django-test-settings

Step 6: Import Test for Core Dependencies
- Run: python -c "import pytest; print(f'pytest: {pytest.__version__}')"
- Run: python -c "import pytest_django; print(f'pytest-django: {pytest_django.__version__}')"
- Run: python -c "import django; print(f'Django: {django.__version__}')"
- Verify all imports succeed without errors
- Take screenshot: 06-import-validation

Step 7: Django Setup and Configuration Test
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.conf import settings; print('Django setup successful')"
- Verify Django can be configured with test settings
- Check that all required apps are in INSTALLED_APPS
- Take screenshot: 07-django-setup-test

Step 8: Database Configuration Validation
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.conf import settings; print(f'DB Engine: {settings.DATABASES[\"default\"][\"ENGINE\"]}'); print(f'DB Name: {settings.DATABASES[\"default\"][\"NAME\"]}')"
- Verify test database uses SQLite
- Check database name includes 'test' identifier
- Take screenshot: 08-database-configuration

Step 9: Test Running Dependencies
- Run: pytest --help | head -20
- Verify pytest help displays correctly
- Check available pytest options and plugins
- Verify Django plugin is loaded
- Take screenshot: 09-pytest-help

Step 10: Environment Variable Configuration
- Check DJANGO_SETTINGS_MODULE environment variable
- Verify DJANGO_ENV can be set to testing
- Test environment isolation from development settings
- Take screenshot: 10-environment-variables

VERIFICATION CRITERIA:
- All required dependencies are installed with correct versions
- No dependency conflicts exist (pip check passes)
- pytest.ini contains correct configuration
- Django test settings are properly configured
- All imports succeed without errors
- Test database configuration is correct
- pytest can access Django integration properly

PASS/FAIL CRITERIA:
PASS: All dependencies installed correctly, no conflicts, configuration files valid, Django integration working
FAIL: Missing dependencies, version conflicts, configuration errors, or import failures

EXPECTED OUTCOMES:
- pytest 7.4.3+ installed and working
- pytest-django 4.7.0+ installed and integrated
- Django 5.1.7+ compatible with pytest setup
- No dependency conflicts in pip check
- pytest.ini properly configured for Django
- Test settings properly isolated from development
- All imports and setup commands succeed

NOTES:
- This test specifically validates the dependency fixes from GitHub Issue #8
- Focuses on the requirements.txt corrections and version compatibility
- Should catch any regression in dependency management
- Critical for ensuring stable test environment