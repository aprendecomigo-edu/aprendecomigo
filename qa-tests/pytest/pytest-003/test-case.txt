TEST ID: pytest-003
TEST NAME: Django Test Database Configuration and Connectivity
PURPOSE: Verify that Django test database configuration is correct and functional, ensuring proper ALLOWED_HOSTS and database setup from GitHub Issue #8 fixes

SETUP:
1. Navigate to project root directory
2. Activate virtual environment: source .venv/bin/activate
3. Change to backend directory: cd backend/
4. Ensure Django test settings are accessible

EXECUTION STEPS:

Step 1: Test Database Settings Verification
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.conf import settings; db = settings.DATABASES['default']; print(f'Engine: {db[\"ENGINE\"]}'); print(f'Name: {db[\"NAME\"]}'); print(f'Test DB: {db.get(\"TEST\", {})}')"
- Verify test database uses SQLite engine
- Check database name includes test identifier
- Verify test database configuration is separate from development
- Take screenshot: 01-test-database-settings

Step 2: ALLOWED_HOSTS Configuration Check
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.conf import settings; print(f'ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}')"
- Verify ALLOWED_HOSTS includes: testserver, localhost, 127.0.0.1
- Check that the configuration allows Django test client access
- Take screenshot: 02-allowed-hosts-verification

Step 3: Database Connection Test
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.db import connections; db = connections['default']; print('Testing connection...'); db.ensure_connection(); print('Connection successful')"
- Verify database connection can be established
- Check connection parameters are valid
- Take screenshot: 03-database-connection-test

Step 4: Test Database Creation and Migration
- Run: python manage.py migrate --run-syncdb --verbosity=2 --settings=aprendecomigo.settings.testing
- Verify all migrations can be applied to test database
- Check that database tables are created successfully
- Verify no migration conflicts or errors
- Take screenshot: 04-database-migration

Step 5: Database Cleanup and Recreation
- Run: rm -f test_db.sqlite3 (if exists)
- Run: python manage.py migrate --settings=aprendecomigo.settings.testing
- Verify database can be recreated cleanly
- Check that fresh migration succeeds
- Take screenshot: 05-database-recreation

Step 6: Test Database Isolation
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.conf import settings; print(f'Test DB: {settings.DATABASES[\"default\"][\"NAME\"]}'); print(f'Base Dir: {settings.BASE_DIR}')"
- Verify test database path is in backend directory
- Check test database is separate from production database
- Take screenshot: 06-database-isolation

Step 7: Database Models and Schema Validation
- Run: python manage.py check --settings=aprendecomigo.settings.testing
- Verify all models pass validation checks
- Check for any schema or model configuration issues
- Take screenshot: 07-models-validation

Step 8: Test Data Operations
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from accounts.models import CustomUser; print(f'User model accessible: {CustomUser.__name__}'); from django.db import connection; print(f'Tables: {len(connection.introspection.table_names())}')"
- Verify models can be imported and accessed
- Check database tables are properly created
- Take screenshot: 08-test-data-operations

Step 9: Pytest Database Integration Test
- Run: pytest --create-db accounts/tests/test_models.py::SchoolTests::test_school_creation -v
- Verify pytest can create and use test database
- Check database is properly set up for test execution
- Verify database cleanup happens after test
- Take screenshot: 09-pytest-database-integration

Step 10: Database Performance and Configuration
- Run: python -c "import os; os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.testing'); import django; django.setup(); from django.conf import settings; print(f'SECRET_KEY set: {bool(settings.SECRET_KEY)}'); print(f'DEBUG: {settings.DEBUG}'); print(f'Cache backend: {settings.CACHES[\"default\"][\"BACKEND\"]}')"
- Verify test-specific configurations are active
- Check performance optimizations for testing
- Take screenshot: 10-database-performance

VERIFICATION CRITERIA:
- Test database uses SQLite engine for speed and isolation
- ALLOWED_HOSTS includes all necessary test hosts
- Database connection can be established successfully
- Migrations can be applied without errors
- Database is properly isolated from development database
- All models pass validation checks
- Pytest can successfully use the test database
- Database cleanup and recreation works correctly

PASS/FAIL CRITERIA:
PASS: Database configuration is correct, connections work, migrations succeed, and pytest integration functions
FAIL: Database connection errors, migration failures, missing ALLOWED_HOSTS, or pytest database issues

EXPECTED OUTCOMES:
- SQLite test database properly configured
- ALLOWED_HOSTS includes testserver, localhost, 127.0.0.1  
- Database connection and migration succeed
- Test database isolated from development environment
- All Django models validate successfully
- Pytest can create and use test database
- Database operations complete without errors

NOTES:
- This test validates the ALLOWED_HOSTS fixes from GitHub Issue #8
- Focuses on database configuration issues that were causing test failures
- Should catch any database connectivity or configuration problems
- Critical for ensuring tests can run with proper database access