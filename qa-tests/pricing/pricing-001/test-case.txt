QA Test Case: Django Admin Pricing Plan Management Interface

Test ID: PRICING-001
Test Name: Django Admin Interface for Pricing Plan Configuration
Purpose: Verify that business users can effectively manage pricing plans through the Django Admin interface including creation, editing, bulk actions, and visual indicators
Expected Result: Complete pricing plan management functionality works correctly with proper validation, visual indicators, and user feedback

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Component: PricingPlan Django Admin interface (/admin/finances/pricingplan/)
- Implementation: GitHub Issue #29 - Product Pricing Configuration Model
- Features: Plan creation, editing, bulk actions, visual indicators, field validation

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Admin User: Superuser with Django Admin access
- Test Plans: Create various package and subscription plans
- Validation Tests: Invalid configurations to test error handling

Database State:
- Fresh pricing plans or existing plans to test editing
- Default plans may exist from management command

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Service Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected: Both services start successfully
- Backend: http://localhost:8000 responds with Django admin
- Frontend: http://localhost:8081 (not needed for this test)

Step 2: Access Django Admin Interface
1. Open browser to http://localhost:8000/admin/
2. Login with superuser credentials
3. Navigate to "FINANCES" section
4. Click on "Pricing Plans" link

Expected: Admin login successful and pricing plans list view loads
Screenshot: 01_admin_pricing_plans_list.png

Step 3: Verify List View Display and Visual Indicators
Verify the following columns and features:
1. Name column with plan names
2. Plan Type with visual indicators:
   - ðŸ“¦ Package (blue, bold)
   - ðŸ”„ Subscription (green, bold)
3. Hours included column
4. Price column with â‚¬XX.XX formatting
5. Price/Hour calculated column
6. Validity column showing days or "Subscription"
7. Display order column
8. Featured status with boolean checkmarks
9. Active status with boolean checkmarks
10. Created at timestamp

Expected: All columns display correctly with proper formatting and visual indicators
Screenshot: 02_admin_list_view_columns.png

Step 4: Test Filtering and Search
1. Test plan type filter:
   - Click "package" filter
   - Verify only package plans shown
   - Click "subscription" filter
   - Verify only subscription plans shown
2. Test active status filter:
   - Click "is_active = Yes" filter
   - Verify only active plans shown
3. Test featured status filter:
   - Click "is_featured = Yes" filter
   - Verify only featured plans shown
4. Test search functionality:
   - Search for "Basic"
   - Verify results filtered correctly

Expected: All filters and search work correctly
Screenshot: 03_admin_filtering_working.png

Step 5: Create New Package Plan
1. Click "Add Pricing Plan" button
2. Fill in form fields:
   - Name: "QA Test Package"
   - Description: "Test package for QA validation"
   - Plan type: "Package"
   - Hours included: 8.5
   - Price (EUR): 120.75
   - Validity days: 45
   - Display order: 100
   - Is featured: Unchecked
   - Is active: Checked
3. Click "Save" button

Expected: Plan created successfully with success message
Screenshot: 04_package_plan_created.png

Step 6: Verify Package Plan Validation
1. Click "Add Pricing Plan" button again
2. Fill invalid package plan:
   - Name: "Invalid Package"
   - Description: "Test invalid package"
   - Plan type: "Package"
   - Hours included: 5.0
   - Price (EUR): 75.00
   - Validity days: (leave blank - INVALID)
   - Display order: 101
3. Click "Save" button

Expected: Validation error displayed: "Package plans must have validity_days specified"
Screenshot: 05_package_validation_error.png

Step 7: Create New Subscription Plan
1. Go back to add new plan
2. Fill in subscription plan:
   - Name: "QA Test Subscription"
   - Description: "Test subscription for QA validation"
   - Plan type: "Subscription"
   - Hours included: 25.0
   - Price (EUR): 199.99
   - Validity days: (leave blank - CORRECT for subscription)
   - Display order: 200
   - Is featured: Checked
   - Is active: Checked
3. Click "Save" button

Expected: Subscription plan created successfully
Screenshot: 06_subscription_plan_created.png

Step 8: Verify Subscription Plan Validation
1. Click "Add Pricing Plan" button
2. Fill invalid subscription:
   - Name: "Invalid Subscription"
   - Description: "Test invalid subscription"
   - Plan type: "Subscription"
   - Hours included: 20.0
   - Price (EUR): 150.00
   - Validity days: 30 (INVALID - subscriptions shouldn't have validity)
   - Display order: 201
3. Click "Save" button

Expected: Validation error: "Subscription plans should not have validity_days"
Screenshot: 07_subscription_validation_error.png

Step 9: Test Bulk Actions
1. Return to pricing plans list
2. Select multiple plans using checkboxes
3. From "Action" dropdown, select "Activate selected pricing plans"
4. Click "Go" button
5. Verify success message appears
6. Select different plans
7. From "Action" dropdown, select "Mark selected plans as featured"
8. Click "Go" button

Expected: Bulk actions work correctly with appropriate success messages
Screenshot: 08_bulk_actions_success.png

Step 10: Test Plan Editing and Price Calculation
1. Click on one of the created plans to edit
2. Verify Price/Hour field is read-only and displays calculated value
3. Change hours from 8.5 to 10.0
4. Verify Price/Hour recalculates automatically if shown in form
5. Save changes

Expected: Plan edits save successfully with proper calculated fields
Screenshot: 09_plan_editing_success.png

Step 11: Test Field Organization and Fieldsets
In the edit form, verify proper field organization:
1. "Basic Information" fieldset contains:
   - name, description, plan_type
2. "Pricing Configuration" fieldset contains:
   - hours_included, price_eur, price_per_hour_display, validity_days
3. "Display Settings" fieldset contains:
   - display_order, is_featured, is_active
4. "Audit Information" fieldset (collapsed) contains:
   - created_at, updated_at (read-only)

Expected: All fieldsets are properly organized and logical
Screenshot: 10_fieldset_organization.png

Step 12: Test Ordering and Display
1. Return to list view
2. Verify plans are ordered by display_order first, then name
3. Create a plan with display_order 1
4. Verify it appears first in the list
5. Check that featured plans show proper visual indicators

Expected: Ordering works correctly and featured status is visually clear
Screenshot: 11_ordering_and_display.png

Step 13: Test Admin Actions and Messages
1. Select a plan and try to delete it
2. Verify delete confirmation appears
3. Cancel the deletion
4. Test that admin messages appear for all operations
5. Verify that save operations show appropriate feedback

Expected: All admin actions provide clear user feedback
Screenshot: 12_admin_feedback_messages.png

Step 14: Verify Database Consistency
Check the plans in the database to ensure:
1. Package plans have validity_days set
2. Subscription plans have validity_days as NULL
3. Price per hour calculations are consistent
4. All required fields are properly saved

Expected: Database state matches admin interface display
Command: python manage.py shell -c "from finances.models import PricingPlan; [print(f'{p.name}: type={p.plan_type}, validity={p.validity_days}, price_per_hour={p.price_per_hour}') for p in PricingPlan.objects.all()]"

=== PASS/FAIL CRITERIA ===

PASS: All admin interface features work correctly with proper validation, visual indicators, and user feedback
FAIL: Any admin functionality fails, validation errors don't appear, or visual indicators are missing

Individual Step Criteria:
- Step 1: PASS if services start, FAIL if backend unavailable
- Step 2: PASS if admin interface loads, FAIL if login fails or pricing plans not accessible
- Step 3: PASS if all columns display with proper formatting, FAIL if any visual indicators missing
- Step 4: PASS if all filters and search work, FAIL if any filtering fails
- Step 5: PASS if valid package plan creates successfully, FAIL if creation fails
- Step 6: PASS if package validation error appears, FAIL if invalid plan saves
- Step 7: PASS if valid subscription creates successfully, FAIL if creation fails
- Step 8: PASS if subscription validation error appears, FAIL if invalid plan saves
- Step 9: PASS if bulk actions work with success messages, FAIL if actions fail
- Step 10: PASS if editing works with calculated fields, FAIL if saves fail
- Step 11: PASS if fieldsets are properly organized, FAIL if fields are disorganized
- Step 12: PASS if ordering and visual indicators work, FAIL if ordering is wrong
- Step 13: PASS if all admin feedback is clear, FAIL if operations lack feedback
- Step 14: PASS if database matches interface, FAIL if data inconsistent

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== CLEANUP ===
After test completion, remove test plans created during testing to avoid cluttering the admin interface.