QA Test Case: Management Command for Default Pricing Plans

Test ID: PRICING-004
Test Name: Management Command create_default_pricing_plans Testing
Purpose: Verify that the Django management command creates default pricing plans correctly with proper idempotency, options, and error handling
Expected Result: Command creates 7 default plans, handles existing plans appropriately, and provides clear user feedback

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Component: Django management command create_default_pricing_plans
- Implementation: GitHub Issue #29 - Product Pricing Configuration Model
- Command: python manage.py create_default_pricing_plans
- Features: Default plan creation, --force option, idempotency, cache clearing

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development

Test Focus Areas:
- Command execution and output
- Default plan creation (7 plans)
- Idempotency (no duplicates)
- --force option behavior
- Cache clearing functionality
- Error handling and validation

Expected Default Plans:
1. Basic Package (5h, €75, 30 days)
2. Standard Package (10h, €140, 45 days) - Featured
3. Premium Package (20h, €260, 60 days)
4. Intensive Package (40h, €480, 90 days)
5. Monthly Unlimited (30h, €199) - Subscription, Featured
6. Student Subscription (15h, €119) - Subscription
7. Family Subscription (50h, €299) - Subscription

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Database Preparation
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend

Expected: Environment ready for command execution

Clear any existing pricing plans for clean test:
```bash
python manage.py shell -c "
from finances.models import PricingPlan
count = PricingPlan.objects.count()
if count > 0:
    PricingPlan.objects.all().delete()
    print(f'Cleared {count} existing pricing plans')
else:
    print('No existing pricing plans to clear')
"
```

Expected: Clean database state for testing

Step 2: Test Command Help and Documentation
Test command help output:
```bash
python manage.py help create_default_pricing_plans
```

Expected output should include:
- Command description
- Available options (--force, --clear-cache)
- Usage examples

Screenshot: 01_command_help_output.png

Step 3: First Run - Create Default Plans
Execute command for the first time:
```bash
python manage.py create_default_pricing_plans --verbosity=2
```

Expected output:
- "Creating default pricing plans..."
- Individual plan creation messages
- "Successfully created 7 default pricing plans."
- "Cleared pricing plans cache."

Screenshot: 02_first_run_success.png

Step 4: Verify Default Plans Were Created
Check that all 7 plans were created correctly:
```bash
python manage.py shell -c "
from finances.models import PricingPlan, PlanType
from decimal import Decimal

plans = PricingPlan.objects.all().order_by('display_order')
print(f'Total plans created: {plans.count()}')
print()

expected_plans = [
    ('Basic Package', PlanType.PACKAGE, Decimal('5.00'), Decimal('75.00'), 30, False),
    ('Standard Package', PlanType.PACKAGE, Decimal('10.00'), Decimal('140.00'), 45, True),
    ('Premium Package', PlanType.PACKAGE, Decimal('20.00'), Decimal('260.00'), 60, False),
    ('Intensive Package', PlanType.PACKAGE, Decimal('40.00'), Decimal('480.00'), 90, False),
    ('Monthly Unlimited', PlanType.SUBSCRIPTION, Decimal('30.00'), Decimal('199.00'), None, True),
    ('Student Subscription', PlanType.SUBSCRIPTION, Decimal('15.00'), Decimal('119.00'), None, False),
    ('Family Subscription', PlanType.SUBSCRIPTION, Decimal('50.00'), Decimal('299.00'), None, False),
]

for i, (name, plan_type, hours, price, validity, featured) in enumerate(expected_plans):
    try:
        plan = PricingPlan.objects.get(name=name)
        print(f'✓ {plan.name}:')
        print(f'  Type: {plan.plan_type} (expected: {plan_type})')
        print(f'  Hours: {plan.hours_included} (expected: {hours})')
        print(f'  Price: €{plan.price_eur} (expected: €{price})')
        print(f'  Validity: {plan.validity_days} (expected: {validity})')
        print(f'  Featured: {plan.is_featured} (expected: {featured})')
        print(f'  Active: {plan.is_active}')
        print(f'  Order: {plan.display_order}')
        
        # Verify values match expectations
        assert plan.plan_type == plan_type
        assert plan.hours_included == hours
        assert plan.price_eur == price
        assert plan.validity_days == validity
        assert plan.is_featured == featured
        assert plan.is_active == True
        print()
    except PricingPlan.DoesNotExist:
        print(f'✗ ERROR: Plan not found: {name}')
    except AssertionError as e:
        print(f'✗ ERROR: Plan {name} has incorrect values')

print('Plan verification complete')
"
```

Expected: All 7 plans created with correct values

Step 5: Test Idempotency - Second Run Without Force
Run command again without --force option:
```bash
python manage.py create_default_pricing_plans --verbosity=2
```

Expected output:
- "Creating default pricing plans..."
- "Pricing plans already exist. Use --force to create anyway."
- "No new pricing plans were created. Use --force to override existing plans."

Step 6: Verify No Duplicates Created
Check that no duplicate plans were created:
```bash
python manage.py shell -c "
from finances.models import PricingPlan
plans = PricingPlan.objects.all()
plan_names = [plan.name for plan in plans]
print(f'Total plans after second run: {plans.count()}')

# Check for duplicates
unique_names = set(plan_names)
if len(plan_names) == len(unique_names):
    print('✓ No duplicate plans created (idempotency working)')
else:
    print('✗ ERROR: Duplicate plans found!')
    duplicates = [name for name in unique_names if plan_names.count(name) > 1]
    for dup in duplicates:
        print(f'  Duplicate: {dup}')
"
```

Expected: Exactly 7 plans, no duplicates

Step 7: Test Force Option - Modify Existing Plan
Modify one existing plan to test --force behavior:
```bash
python manage.py shell -c "
from finances.models import PricingPlan
plan = PricingPlan.objects.get(name='Basic Package')
plan.price_eur = 99.99  # Change from default 75.00
plan.save()
print(f'Modified Basic Package price to €{plan.price_eur}')
"
```

Run command with --force:
```bash
python manage.py create_default_pricing_plans --force --verbosity=2
```

Expected: Command runs and mentions existing plans are skipped

Step 8: Verify Force Option Behavior
Check that existing plan was not overwritten:
```bash
python manage.py shell -c "
from finances.models import PricingPlan
plan = PricingPlan.objects.get(name='Basic Package')
print(f'Basic Package price after --force: €{plan.price_eur}')
if plan.price_eur == 99.99:
    print('✓ Existing plan not overwritten (correct behavior)')
else:
    print('✗ ERROR: Existing plan was overwritten')
"
```

Expected: Existing modified plan preserved (not overwritten)

Step 9: Test Cache Clearing Functionality
Test cache clearing option:
```bash
# First populate cache
curl -s http://localhost:8000/finances/api/pricing-plans/ > /dev/null

# Check if cache key exists (if using Redis or accessible cache)
python manage.py shell -c "
from django.core.cache import cache
cache_key = 'active_pricing_plans'
cached_data = cache.get(cache_key)
if cached_data:
    print('Cache populated before command')
else:
    print('Cache empty before command')
"

# Run command with cache clearing
python manage.py create_default_pricing_plans --force --clear-cache --verbosity=2

# Check cache after command
python manage.py shell -c "
from django.core.cache import cache
cache_key = 'active_pricing_plans'
cached_data = cache.get(cache_key)
if cached_data:
    print('Cache still populated after command')
else:
    print('✓ Cache cleared by command')
"
```

Expected: Cache cleared message in output and cache actually cleared

Step 10: Test Complete Clean Installation
Delete all plans and test full installation:
```bash
python manage.py shell -c "
from finances.models import PricingPlan
PricingPlan.objects.all().delete()
print('All pricing plans deleted')
"

python manage.py create_default_pricing_plans --verbosity=1
```

Expected: 
- "Successfully created 7 default pricing plans."
- All plans created fresh

Step 11: Test Command with Minimal Verbosity
Test command with default verbosity (0):
```bash
python manage.py create_default_pricing_plans --force
```

Expected: Minimal output, just final result message

Step 12: Test Command Error Handling
Test command behavior with database issues (simulate if possible):
```bash
# Test with invalid database state or permissions
# Note: This may not be easily testable in development environment
echo "Testing command resilience..."
python manage.py create_default_pricing_plans --verbosity=2
```

Expected: Graceful handling of any issues

Step 13: Verify Plan Relationships and Constraints
Check that created plans follow all model constraints:
```bash
python manage.py shell -c "
from finances.models import PricingPlan, PlanType

print('Constraint validation:')
package_plans = PricingPlan.objects.filter(plan_type=PlanType.PACKAGE)
subscription_plans = PricingPlan.objects.filter(plan_type=PlanType.SUBSCRIPTION)

print(f'Package plans: {package_plans.count()}')
for plan in package_plans:
    if plan.validity_days is None:
        print(f'✗ ERROR: Package plan {plan.name} has no validity_days')
    else:
        print(f'✓ Package plan {plan.name}: {plan.validity_days} days')

print(f'Subscription plans: {subscription_plans.count()}')
for plan in subscription_plans:
    if plan.validity_days is not None:
        print(f'✗ ERROR: Subscription plan {plan.name} has validity_days')
    else:
        print(f'✓ Subscription plan {plan.name}: no validity_days (correct)')

# Check featured plans
featured_plans = PricingPlan.objects.filter(is_featured=True)
print(f'Featured plans: {featured_plans.count()}')
for plan in featured_plans:
    print(f'  Featured: {plan.name}')
"
```

Expected: All plans follow model constraints correctly

Step 14: Test Performance and Execution Time
Measure command execution time:
```bash
# Clear plans first
python manage.py shell -c "from finances.models import PricingPlan; PricingPlan.objects.all().delete()"

# Time the command execution
time python manage.py create_default_pricing_plans --verbosity=0
```

Expected: Command completes quickly (under 5 seconds)

Step 15: Verify Command Integration with Admin
Check that created plans appear correctly in Django Admin:
1. Navigate to http://localhost:8000/admin/finances/pricingplan/
2. Verify all 7 plans appear
3. Check visual indicators work correctly
4. Verify plan type displays and ordering

Expected: Admin interface shows all plans with proper formatting

Screenshot: 03_admin_shows_default_plans.png

Step 16: Test Command Documentation and Help
Verify command is properly documented:
```bash
python manage.py help | grep -A 2 -B 2 "create_default_pricing_plans"
```

Expected: Command appears in help listing with description

=== PASS/FAIL CRITERIA ===

PASS: Management command works correctly with proper plan creation, idempotency, and options
FAIL: Any command functionality fails, wrong plans created, or idempotency broken

Individual Step Criteria:
- Step 1: PASS if environment ready, FAIL if setup issues
- Step 2: PASS if help output correct, FAIL if documentation missing
- Step 3: PASS if 7 plans created successfully, FAIL if creation fails or wrong count
- Step 4: PASS if all expected plans created with correct values, FAIL if any plan wrong
- Step 5: PASS if second run shows idempotency message, FAIL if tries to create duplicates
- Step 6: PASS if no duplicates created, FAIL if duplicate plans found
- Step 7-8: PASS if --force option works correctly, FAIL if overwrites existing plans
- Step 9: PASS if cache clearing works, FAIL if cache not cleared
- Step 10: PASS if clean installation works, FAIL if fresh creation fails
- Step 11: PASS if verbosity levels work, FAIL if output issues
- Step 12: PASS if command handles errors gracefully, FAIL if crashes
- Step 13: PASS if all constraints followed, FAIL if constraint violations
- Step 14: PASS if performance acceptable, FAIL if command too slow
- Step 15: PASS if admin integration works, FAIL if plans don't appear correctly
- Step 16: PASS if documentation complete, FAIL if help missing

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== EXPECTED PERFORMANCE ===

- Command execution time: < 5 seconds
- Database operations: Atomic transactions
- No memory leaks or excessive resource usage
- Clear and informative output messages