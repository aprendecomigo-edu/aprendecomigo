QA Test Case: School Context Switching

Test ID: PERM-004
Test Name: School Context Switching and Role-Based Views
Purpose: Verify that users with multiple school memberships can properly switch between school contexts and see appropriate role-based content for each school
Expected Result: Multi-role users can switch contexts and interface adapts to show appropriate data and permissions for each school/role combination

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Testing Focus: Context switching for users with multiple school memberships

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data Requirements:
- Test data from setup_permissions_test_data command
- Main focus user: test.manager@example.com with roles:
  - school_owner at "Test School"
  - teacher at "Test School 2"
  - student at "Test School 3"
- Supporting users in each school for context verification

Database State:
- Test data must be set up using setup_permissions_test_data management command
- All three schools must have active memberships and supporting users
- Multi-role user must have verified email for authentication

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment and Data Setup
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend
  python manage.py setup_permissions_test_data --clean

Expected: Test data created with multi-role user having different roles across three schools
Screenshot: 01_test_data_setup.png

Step 2: Start Backend and Frontend Servers
Commands:
  python manage.py runserver 8000 > /tmp/django_server.log 2>&1 &
  cd ../frontend-ui
  npm run web:dev > /tmp/expo_output.log 2>&1 &
  sleep 10

Expected: Both servers start successfully and are accessible
Verify: Backend at http://localhost:8000/api/, Frontend at http://localhost:8081

Step 3: Login as Multi-Role User
1. Navigate to http://localhost:8081
2. Log in as: test.manager@example.com
3. Complete email verification process
4. Access main dashboard

Expected: User successfully logs in and reaches dashboard showing multiple school access
Screenshot: 02_multi_role_user_login.png

Step 4: Verify Initial Context - School Owner Role (Test School)
1. Check current school context (should default to primary role)
2. Verify dashboard shows school owner features:
   - Full access to school management
   - All users/members visible
   - Administrative functions available
   - School statistics and data

Expected: Dashboard displays school owner capabilities for Test School
Screenshot: 03_school_owner_context.png

Step 5: Switch to Teacher Context (Test School 2)
1. Look for school selector/context switcher in interface
2. Switch to "Test School 2" context
3. Verify interface changes to reflect teacher role:
   - Limited administrative access
   - Student management focus
   - Teaching-related features
   - Cannot access school settings

Expected: Interface adapts to show teacher-appropriate features for Test School 2
Screenshot: 04_teacher_context_switch.png

Step 6: Switch to Student Context (Test School 3)
1. Switch to "Test School 3" context
2. Verify interface changes to reflect student role:
   - Minimal access to personal information
   - Learning-focused interface
   - No administrative functions
   - Access to assigned materials only

Expected: Interface shows student-appropriate minimal access for Test School 3
Screenshot: 05_student_context_switch.png

Step 7: Verify Context-Specific Data Access
1. In Test School (owner context):
   - Access members list - should see all school users
   - Check administrative functions availability
2. In Test School 2 (teacher context):
   - Access members list - should only see students they teach (via ClassSession relationships) and other teachers
   - Administrative functions limited to students they teach
3. In Test School 3 (student context):
   - No access to member lists (no student tab should be visible)
   - No administrative access
   - Only personal learning materials accessible

Expected: Each context shows appropriate data based on role in that school, with proper teacher-student relationship restrictions
Screenshot: 06_context_specific_data.png

Step 8: Test API Context Switching (Backend Verification)
Commands:
  # Login and get auth token for test.manager@example.com
  # Test API calls in different school contexts

  # Test owner access (Test School = ID 1)
  curl -H "Authorization: Token [TOKEN]" http://localhost:8000/api/schools/1/members/ | wc -l

  # Test teacher access (Test School 2 = ID 2)
  curl -H "Authorization: Token [TOKEN]" http://localhost:8000/api/schools/2/members/ | wc -l

  # Test student access (Test School 3 = ID 3)
  curl -H "Authorization: Token [TOKEN]" http://localhost:8000/api/schools/3/members/ | wc -l

Expected: API returns appropriate data based on user's role in each school
Note: Replace [TOKEN] with actual auth token from login

Step 9: Test Permission Boundaries Across Contexts
1. In owner context (Test School):
   - Try to create teacher invitation (should work)
   - Try to modify school settings (should work)
2. In teacher context (Test School 2):
   - Try to create teacher invitation (should fail)
   - Try to access school settings (should fail)
3. In student context (Test School 3):
   - Try any administrative action (should fail)
   - Verify minimal access only

Expected: Permissions are correctly enforced in each context
Screenshot: 07_permission_boundaries_testing.png

Step 10: Test Navigation and Persistence
1. Navigate between different sections in each context
2. Switch contexts and verify context is maintained
3. Refresh page and verify context persists (if implemented)
4. Test deep linking to specific school contexts (if available)

Expected: Context switching works smoothly and state is maintained appropriately
Screenshot: 08_navigation_persistence_test.png

Step 11: Test Edge Cases and Error Handling
1. Try to access a school where user has no membership
2. Test switching to non-existent school context
3. Verify graceful handling of context switching errors
4. Test behavior when school membership becomes inactive

Expected: System handles edge cases gracefully with appropriate error messages
Screenshot: 09_edge_case_testing.png

Step 12: Verify Role Display and User Awareness
1. In each context, verify user can see:
   - Current school name clearly displayed
   - Current role in that school
   - Available actions appropriate to role
   - Way to switch to other schools/roles
2. Test that user understands their current context

Expected: Interface clearly communicates current context and available actions
Screenshot: 10_role_awareness_display.png

=== PASS/FAIL CRITERIA ===

PASS: User can switch between all school contexts AND interface adapts appropriately AND permissions are correctly enforced in each context
FAIL: Context switching doesn't work OR interface doesn't adapt OR permissions not enforced correctly OR any context confusion

Individual Step Criteria:
- Step 1: PASS if test data setup completes, FAIL if multi-role data incomplete
- Step 2: PASS if servers start successfully, FAIL if startup issues
- Step 3: PASS if multi-role user logs in successfully, FAIL if authentication issues
- Step 4: PASS if owner context displays correctly, FAIL if wrong permissions shown
- Step 5: PASS if teacher context switch works and shows appropriate interface, FAIL if context doesn't change
- Step 6: PASS if student context works with minimal access, FAIL if excessive access shown
- Step 7: PASS if each context shows role-appropriate data, FAIL if data access incorrect
- Step 8: PASS if API respects context/role boundaries, FAIL if API access control issues
- Step 9: PASS if permissions enforced correctly in each context, FAIL if boundary violations
- Step 10: PASS if navigation and persistence work smoothly, FAIL if context loss or navigation issues
- Step 11: PASS if edge cases handled gracefully, FAIL if crashes or poor error handling
- Step 12: PASS if user awareness features work well, FAIL if context confusion possible

Overall Result: PASS only if ALL context switching works correctly AND permissions are properly enforced
Critical Failure Conditions:
- Context switching not working = FAIL
- Permissions not changing with context = FAIL
- User confusion about current context = FAIL
- Data access inappropriate for context = FAIL
- API not respecting context boundaries = FAIL

=== CONTEXT SWITCHING MATRIX (Expected Behavior) ===

Test School (school_owner context):
- ✓ Full dashboard with admin features
- ✓ All school members visible
- ✓ School settings accessible
- ✓ Can create any type of invitation
- ✓ Financial/billing access (if implemented)

Test School 2 (teacher context):
- ✓ Teacher-focused dashboard
- ✓ Only students they teach (via ClassSession relationships) and other teachers visible
- ✓ Limited admin functions (only for students they teach)
- ✗ Cannot access school settings
- ✗ Cannot create teacher invitations
- ✗ Cannot see all students in the school

Test School 3 (student context):
- ✓ Student-focused interface
- ✓ Own profile and assigned materials
- ✓ Teachers who teach them visible (limited info)
- ✗ No admin functions
- ✗ No access to student tab or user lists
- ✗ Cannot see other students at all
- ✗ Cannot create any invitations

Context Switching Requirements:
- Clear indication of current school/role
- Easy way to switch between contexts
- Interface adapts immediately upon switching
- Permissions change appropriately
- Data access adjusted per context

=== POST-TEST CLEANUP ===

Commands to stop servers:
  pkill -f "python manage.py runserver"
  pkill -f "npm run web:dev"

Verify cleanup:
  ps aux | grep -E "(runserver|npm.*web:dev)" | grep -v grep
