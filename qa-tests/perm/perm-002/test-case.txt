QA Test Case: Cross-School Access Control

Test ID: PERM-002
Test Name: Cross-School Access Control Verification
Purpose: Verify that users cannot access data, users, or functionality from schools where they have no membership role
Expected Result: Users are properly restricted to only access data from schools where they have active memberships

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Testing Focus: Access control boundaries between different schools

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data Requirements:
- Test data from setup_permissions_test_data command
- Multiple users with memberships in different schools:
  - test.manager@example.com: roles in all 3 schools
  - school2.admin@example.com: only in Test School 2
  - school3.owner@example.com: only in Test School 3
  - additional.student@example.com: only in Test School
- Active memberships required for all test users

Database State:
- Test data must be set up using setup_permissions_test_data management command
- All schools and memberships must be active
- Users must be email verified

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment and Data Setup
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev
  cd backend
  python manage.py setup_permissions_test_data --clean

Expected: Test data created with users having memberships in specific schools only
Screenshot: 01_test_data_setup.png

Step 2: Start Backend and Frontend Servers
Commands:

Expected: Both servers start successfully
Verify: Backend at http://localhost:8000/api/, Frontend at http://localhost:8081

Step 3: Test School 2 Admin Access (Limited Scope User)
1. Navigate to http://localhost:8081
2. Log in as: school2.admin@example.com
3. Follow email verification process
4. Access dashboard

Expected: User logs in successfully and sees only Test School 2 data
Screenshot: 02_school2_admin_login.png

Step 4: Verify School 2 Admin Cannot See Other Schools
1. In dashboard, look for school selector or navigation
2. Verify only "Test School 2" is accessible
3. Try to access users list - should only show Test School 2 users:
   - As admin: should see all users in Test School 2
   - Note: If user were a teacher, they should only see students they teach
4. Check if Test School or Test School 3 appear anywhere

Expected: Only Test School 2 data visible, no access to other schools, proper role-based user visibility
Screenshot: 03_school2_admin_restricted_view.png

Step 5: Attempt Direct API Access to Unauthorized School (Backend Test)
Commands:
  # Get auth token for school2.admin user (from browser dev tools or login response)
  # Try to access Test School (ID=1) data when user only has access to Test School 2
  curl -H "Authorization: Token [TOKEN]" http://localhost:8000/api/schools/1/members/ || echo "Access should be denied"

Expected: API returns 403 Forbidden or 404 Not Found for unauthorized school access
Note: Replace [TOKEN] with actual auth token from login

Step 6: Test Student User Cross-School Access
1. Log out from school2.admin account
2. Log in as: additional.student@example.com (only member of Test School)
3. Navigate to interface (note: students should not see student tabs)
4. Verify only Test School data visible and minimal access:
   - Can see own profile and learning materials
   - Cannot see lists of other users/students
   - No administrative functions visible

Expected: Student can only see Test School data with minimal access, no access to other schools, no student tab visible
Screenshot: 04_student_restricted_access.png

Step 7: Verify Multi-Role User Sees All Their Schools
1. Log out from student account
2. Log in as: test.manager@example.com (has roles in all 3 schools)
3. Navigate to dashboard and users sections
4. Verify can see data from all three schools (Test School, Test School 2, Test School 3)

Expected: Multi-role user sees all schools they have access to
Screenshot: 05_multi_role_full_access.png

Step 8: Test API Endpoint Access Control (Direct Backend Testing)
Commands:
  # Test with school2.admin token - should only access Test School 2
  curl -H "Authorization: Token [SCHOOL2_TOKEN]" http://localhost:8000/api/schools/ | grep -c "Test School" || echo "Should show limited schools"

  # Test unauthorized membership access
  curl -H "Authorization: Token [SCHOOL2_TOKEN]" http://localhost:8000/api/schools/1/members/ -w "%{http_code}" | tail -1

Expected: Returns only authorized schools, unauthorized access returns 4xx error codes
Screenshot: 06_api_access_control_test.png

Step 9: Test School Management Functions Access Control
1. Login as school3.owner@example.com
2. Try to navigate to school management/admin features
3. Verify can only manage Test School 3
4. Verify cannot invite users to other schools or modify other schools

Expected: School owner can only manage their own school (Test School 3)
Screenshot: 07_school_management_access_control.png

Step 10: Verify Role-Based Access Within Authorized Schools
1. Login as additional.student@example.com (student role in Test School)
2. Verify can see Test School data but with student-level permissions:
   - Own profile and assigned learning materials only
   - No student tab should be visible
   - Cannot see lists of other users
3. Verify cannot access admin functions or manage other users
4. Check that teacher/admin features are not accessible
5. Note: If user were a teacher, they should only see students they actually teach (via ClassSession relationships)

Expected: Student role has appropriate minimal access within their authorized school, no visibility of other students
Screenshot: 08_role_based_restrictions.png

=== PASS/FAIL CRITERIA ===

PASS: All users can only access data from schools where they have memberships AND role-based restrictions work correctly
FAIL: Any unauthorized cross-school access OR improper role permissions OR API access control failures

Individual Step Criteria:
- Step 1: PASS if test data setup completes without errors, FAIL if data incomplete
- Step 2: PASS if both servers start successfully, FAIL if either server fails
- Step 3: PASS if school2.admin logs in and sees only Test School 2, FAIL if login fails or sees other schools
- Step 4: PASS if only Test School 2 visible/accessible, FAIL if other schools accessible
- Step 5: PASS if API returns 403/404 for unauthorized access, FAIL if unauthorized access allowed
- Step 6: PASS if student only sees Test School data, FAIL if cross-school access occurs
- Step 7: PASS if multi-role user sees all 3 schools, FAIL if any authorized school missing
- Step 8: PASS if API access control working properly, FAIL if unauthorized API access allowed
- Step 9: PASS if school owner can only manage own school, FAIL if cross-school management possible
- Step 10: PASS if role restrictions work within authorized school, FAIL if inappropriate access allowed

Overall Result: PASS only if ALL access control boundaries are properly enforced
Critical Failure Conditions:
- Any unauthorized cross-school data access = FAIL
- API access control bypassed = FAIL
- Role restrictions not enforced = FAIL
- Ability to manage unauthorized schools = FAIL

=== POST-TEST CLEANUP ===

Commands to stop servers:

Verify cleanup:
  ps aux | grep -E "(runserver|npm.*web:dev)" | grep -v grep
