QA Test Case: Invalid Token Error Handling

Test ID: TACPT-005
Test Name: Invalid Token Error Handling
Purpose: Verify that malformed or non-existent invitation tokens are handled gracefully with clear error messages
Expected Result: User sees appropriate error for invalid tokens with helpful guidance

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Platform
- Architecture: Django backend (localhost:8000) + React Native frontend (localhost:8081)
- GitHub Issue: #52 - Error handling for invalid invitation tokens (Issue #75)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Development servers: `make dev`
4. Database: PostgreSQL with test data

Test Data:
- Invalid tokens to test:
  - Completely fake token: "invalid-fake-token-123"
  - Malformed token: "short"
  - Empty token: ""
  - SQL injection attempt: "'; DROP TABLE --"
  - XSS attempt: "<script>alert('xss')</script>"

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  make dev

Expected: Both servers start without errors
Screenshot: 01_servers_started.png

Step 2: Test Completely Invalid Token
1. Navigate to /accept-invitation/invalid-fake-token-123
2. Verify error handling for non-existent token
URL: http://localhost:8081/accept-invitation/invalid-fake-token-123

Expected: Clear error message about invalid invitation
Screenshot: 02_invalid_token_error.png

Step 3: Test Malformed Short Token
1. Navigate to /accept-invitation/short
2. Verify handling of improperly formatted token
3. Check for appropriate error messaging

Expected: Graceful handling of malformed token
Screenshot: 03_malformed_token_error.png

Step 4: Test Empty Token
1. Navigate to /accept-invitation/
2. Verify routing behavior with missing token
3. Check for appropriate 404 or error page

Expected: Proper handling of missing token parameter
Screenshot: 04_empty_token_handling.png

Step 5: Test Security - SQL Injection Attempt
1. Navigate to /accept-invitation/'; DROP TABLE --
2. Verify system is protected against SQL injection
3. Confirm no database errors or security issues

Expected: Security protection with clean error handling
Screenshot: 05_sql_injection_protection.png

Step 6: Test Security - XSS Attempt
1. Navigate to /accept-invitation/<script>alert('xss')</script>
2. Verify XSS protection is working
3. Confirm no script execution or security vulnerabilities

Expected: XSS protection with safe error display
Screenshot: 06_xss_protection.png

Step 7: Verify Error Message Quality
1. Check that error messages are user-friendly
2. Verify messages are in Portuguese
3. Confirm no technical details are exposed to users
4. Check for helpful suggestions

Expected: Professional, helpful error messages
Screenshot: 07_error_message_quality.png

Step 8: Test Recovery Options
1. Verify "Go Home" button works for all invalid token types
2. Check "Contact Support" functionality
3. Confirm no retry options for invalid tokens

Expected: Appropriate recovery options available
Screenshot: 08_recovery_options.png

=== PASS/FAIL CRITERIA ===

PASS: All invalid token types handled gracefully with security protection
FAIL: Any security vulnerabilities or poor error handling

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails