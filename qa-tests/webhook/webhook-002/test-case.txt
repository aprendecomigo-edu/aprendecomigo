================================================================================
STRIPE WEBHOOK EVENT PROCESSING VALIDATION
================================================================================

Test ID: WEBHOOK-002
Test Name: Stripe Webhook Event Processing (Payment Success/Failure/Cancellation)
Test Type: Functional/Integration
Priority: Critical
Estimated Time: 35 minutes

================================================================================
TEST PURPOSE
================================================================================

Validate that the Stripe webhook handler correctly processes all supported event types:
✅ payment_intent.succeeded: Credit hours and update transaction to COMPLETED
✅ payment_intent.payment_failed: Update transaction to FAILED with error details
✅ payment_intent.canceled: Update transaction to FAILED with cancellation reason
✅ Proper integration with PaymentService for transaction updates
✅ Accurate hour crediting for successful payments
✅ Database consistency across all event processing scenarios

This test ensures the webhook correctly handles the complete payment lifecycle
and maintains data integrity for all transaction states.

================================================================================
PREREQUISITES
================================================================================

✅ Virtual environment configured (.venv directory exists)
✅ Dependencies installed (backend/requirements.txt)
✅ Stripe CLI installed and configured for webhook testing
✅ Test database with clean state
✅ STRIPE_WEBHOOK_SECRET configured for signature verification

================================================================================
TEST PROCEDURE
================================================================================

Step 1: Environment Setup and Service Start
===========================================
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected:
✅ Django development server starts on port 8000
✅ Backend accessible at http://localhost:8000/api/
✅ Webhook endpoint available at /api/finances/webhooks/stripe/

Screenshot: 01-servers-started.png
Duration: ~15 seconds

Step 2: Create Test Transaction Data
====================================
Commands:
  cd backend
  python manage.py test_stripe_webhook --create-test-data --payment-intent-id pi_test_success_001

Expected:
✅ Test student created: webhook.test@aprendecomigo.com
✅ Test transaction created with payment intent: pi_test_success_001
✅ Transaction status: PROCESSING
✅ Transaction amount: €50.00 with 10.00 hours metadata
✅ Student account balance initialized with 0.00 hours

Screenshot: 02-test-transaction-created.png

Step 3: Verify Initial Database State
=====================================
Commands:
  # Check transaction status before webhook processing
  python manage.py shell -c "
from finances.models import PurchaseTransaction, StudentAccountBalance
from accounts.models import CustomUser

student = CustomUser.objects.get(email='webhook.test@aprendecomigo.com')
transaction = PurchaseTransaction.objects.get(stripe_payment_intent_id='pi_test_success_001')
balance = StudentAccountBalance.objects.get(student=student)

print(f'Transaction Status: {transaction.payment_status}')
print(f'Transaction Amount: €{transaction.amount}')
print(f'Hours in Metadata: {transaction.metadata.get(\"hours\", \"N/A\")}')
print(f'Student Hours Balance: {balance.hours_purchased}')
print(f'Student Amount Balance: €{balance.balance_amount}')
"

Expected:
✅ Transaction status: PROCESSING
✅ Transaction amount: 50.00
✅ Hours in metadata: 10.00
✅ Student hours balance: 0.00
✅ Student amount balance: 0.00

Screenshot: 03-initial-database-state.png

Step 4: Test Payment Success Event Processing
==============================================
Commands:
  # Simulate payment_intent.succeeded webhook event
  stripe trigger payment_intent.succeeded --override payment_intent:id=pi_test_success_001

Expected:
✅ Stripe CLI sends payment_intent.succeeded event to webhook
✅ Webhook receives event with valid signature
✅ Event type recognized as supported
✅ PaymentService.confirm_payment_completion called
✅ HTTP 200 response returned to Stripe

Screenshot: 04-payment-success-event-sent.png

Step 5: Verify Payment Success Processing Results
=================================================
Commands:
  # Check database state after successful payment processing
  python manage.py shell -c "
from finances.models import PurchaseTransaction, StudentAccountBalance
from accounts.models import CustomUser

student = CustomUser.objects.get(email='webhook.test@aprendecomigo.com')
transaction = PurchaseTransaction.objects.get(stripe_payment_intent_id='pi_test_success_001')
balance = StudentAccountBalance.objects.get(student=student)

print(f'Transaction Status: {transaction.payment_status}')
print(f'Transaction Completed At: {transaction.completed_at}')
print(f'Student Hours Balance: {balance.hours_purchased}')
print(f'Student Amount Balance: €{balance.balance_amount}')
print(f'Hours Consumed: {balance.hours_consumed}')
"

Expected:
✅ Transaction status changed to: COMPLETED
✅ Transaction completed_at timestamp set
✅ Student hours balance increased to: 10.00 (credited)
✅ Student amount balance increased to: 50.00 (credited)
✅ Hours consumed remains: 0.00

Screenshot: 05-payment-success-results.png

Step 6: Create Test Transaction for Payment Failure
====================================================
Commands:
  python manage.py test_stripe_webhook --create-test-data --payment-intent-id pi_test_failure_002

Expected:
✅ Second test transaction created with payment intent: pi_test_failure_002
✅ Transaction status: PROCESSING
✅ Separate transaction record in database
✅ Ready for failure scenario testing

Screenshot: 06-failure-test-transaction-created.png

Step 7: Test Payment Failure Event Processing
==============================================
Commands:
  # Simulate payment_intent.payment_failed webhook event
  stripe trigger payment_intent.payment_failed --override payment_intent:id=pi_test_failure_002

Expected:
✅ Stripe CLI sends payment_intent.payment_failed event to webhook
✅ Webhook receives event with valid signature  
✅ Event type recognized as supported
✅ PaymentService.handle_payment_failure called
✅ HTTP 200 response returned to Stripe

Screenshot: 07-payment-failure-event-sent.png

Step 8: Verify Payment Failure Processing Results
==================================================
Commands:
  # Check database state after failed payment processing
  python manage.py shell -c "
from finances.models import PurchaseTransaction
transaction = PurchaseTransaction.objects.get(stripe_payment_intent_id='pi_test_failure_002')

print(f'Transaction Status: {transaction.payment_status}')
print(f'Error Message in Metadata: {transaction.metadata.get(\"error_message\", \"N/A\")}')
print(f'Failed At: {transaction.metadata.get(\"failed_at\", \"N/A\")}')
"

Expected:
✅ Transaction status changed to: FAILED
✅ Error message stored in metadata (e.g., "Your card was declined")
✅ Failed timestamp recorded in metadata
✅ No hours or amount credited to student account

Screenshot: 08-payment-failure-results.png

Step 9: Create Test Transaction for Payment Cancellation
=========================================================
Commands:
  python manage.py test_stripe_webhook --create-test-data --payment-intent-id pi_test_canceled_003

Expected:
✅ Third test transaction created with payment intent: pi_test_canceled_003
✅ Transaction status: PROCESSING
✅ Ready for cancellation scenario testing

Screenshot: 09-cancellation-test-transaction-created.png

Step 10: Test Payment Cancellation Event Processing
====================================================
Commands:
  # Simulate payment_intent.canceled webhook event
  stripe trigger payment_intent.canceled --override payment_intent:id=pi_test_canceled_003

Expected:
✅ Stripe CLI sends payment_intent.canceled event to webhook
✅ Webhook receives event with valid signature
✅ Event type recognized as supported
✅ PaymentService.handle_payment_failure called with cancellation reason
✅ HTTP 200 response returned to Stripe

Screenshot: 10-payment-cancellation-event-sent.png

Step 11: Verify Payment Cancellation Processing Results
========================================================
Commands:
  # Check database state after canceled payment processing
  python manage.py shell -c "
from finances.models import PurchaseTransaction
transaction = PurchaseTransaction.objects.get(stripe_payment_intent_id='pi_test_canceled_003')

print(f'Transaction Status: {transaction.payment_status}')
print(f'Error Message in Metadata: {transaction.metadata.get(\"error_message\", \"N/A\")}')
print(f'Cancellation Reason: {transaction.metadata.get(\"cancellation_reason\", \"N/A\")}')
"

Expected:
✅ Transaction status changed to: FAILED
✅ Error message: "Payment was canceled"
✅ Cancellation reason stored in metadata
✅ No hours or amount credited to student account

Screenshot: 11-payment-cancellation-results.png

Step 12: Test Unsupported Event Type Handling
==============================================
Commands:
  # Test webhook response to unsupported event type
  stripe trigger customer.created

Expected:
✅ Stripe CLI sends customer.created event to webhook
✅ Webhook receives event with valid signature
✅ Event type identified as unsupported
✅ HTTP 200 response with "Event type not supported" message
✅ No database changes or processing attempted

Screenshot: 12-unsupported-event-handling.png

Step 13: Verify Comprehensive Event Logging
============================================
Commands:
  make logs | grep -i webhook | tail -20

Expected:
✅ All webhook events logged with event type and ID
✅ Successful processing logged with INFO level
✅ Payment completion events logged with transaction details
✅ Payment failure events logged with error information
✅ Unsupported events logged with appropriate messages

Screenshot: 13-comprehensive-event-logging.png

Step 14: Verify Database Consistency Across All Scenarios
==========================================================
Commands:
  # Final database state verification
  python manage.py shell -c "
from finances.models import PurchaseTransaction, StudentAccountBalance
from accounts.models import CustomUser

student = CustomUser.objects.get(email='webhook.test@aprendecomigo.com')
transactions = PurchaseTransaction.objects.filter(student=student).order_by('created_at')
balance = StudentAccountBalance.objects.get(student=student)

print('=== FINAL DATABASE STATE ===')
print(f'Total Transactions: {transactions.count()}')
for t in transactions:
    print(f'  {t.stripe_payment_intent_id}: {t.payment_status} - €{t.amount}')

print(f'Student Final Hours Balance: {balance.hours_purchased}')
print(f'Student Final Amount Balance: €{balance.balance_amount}')
print(f'Hours Consumed: {balance.hours_consumed}')
"

Expected:
✅ 3 total transactions processed
✅ pi_test_success_001: COMPLETED status
✅ pi_test_failure_002: FAILED status  
✅ pi_test_canceled_003: FAILED status
✅ Student final hours balance: 10.00 (only from successful payment)
✅ Student final amount balance: 50.00 (only from successful payment)

Screenshot: 14-final-database-consistency.png

================================================================================
CLEANUP
================================================================================

Commands:
  make stop

Expected:
✅ All server processes terminated cleanly
✅ Test data remains in database for further analysis if needed
✅ Stripe CLI webhook forwarding stopped

================================================================================
PASS/FAIL CRITERIA
================================================================================

✅ PASS: All event types correctly processed with appropriate database updates
✅ PASS: Payment success properly credits hours and updates transaction status
✅ PASS: Payment failures properly update status with error information
✅ PASS: Payment cancellations handled correctly with proper error messaging
✅ PASS: Unsupported events handled gracefully without errors
✅ PASS: Database consistency maintained across all scenarios
✅ PASS: Comprehensive logging provides audit trail for all events

❌ FAIL: Any event type not processed correctly
❌ FAIL: Hours not credited properly for successful payments
❌ FAIL: Transaction statuses not updated appropriately
❌ FAIL: Database inconsistencies or data corruption
❌ FAIL: Missing or incomplete error information for failures
❌ FAIL: Server errors or crashes during event processing

================================================================================
BUSINESS IMPACT
================================================================================

💰 This test validates the core payment processing workflow for the platform
💰 Accurate hour crediting directly impacts service delivery to students
💰 Proper failure handling prevents revenue loss and customer confusion
💰 Database consistency ensures reliable billing and account management
💰 Event processing reliability affects customer trust and platform reputation

Any failures in this test case indicate critical issues that could result in
financial discrepancies, service disruption, or customer dissatisfaction.