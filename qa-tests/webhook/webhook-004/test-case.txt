================================================================================
STRIPE WEBHOOK ERROR HANDLING VALIDATION
================================================================================

Test ID: WEBHOOK-004
Test Name: Stripe Webhook Error Handling and Graceful Degradation
Test Type: Reliability/Error Handling
Priority: Critical
Estimated Time: 40 minutes

================================================================================
TEST PURPOSE
================================================================================

Validate that the Stripe webhook handler gracefully handles all error scenarios:
✅ Malformed JSON payloads and invalid request data
✅ Database connection failures and transaction rollbacks
✅ PaymentService API failures and recovery
✅ Non-existent payment intent references
✅ Corrupted webhook event data
✅ Server resource exhaustion scenarios
✅ Graceful degradation without data corruption
✅ Proper HTTP status codes for Stripe retry logic

This test ensures the webhook remains stable and secure under all error conditions
while providing proper feedback to Stripe's retry mechanism.

================================================================================
PREREQUISITES
================================================================================

✅ Virtual environment configured (.venv directory exists)
✅ Dependencies installed (backend/requirements.txt)
✅ Test database with clean state
✅ Stripe CLI installed for error simulation
✅ STRIPE_WEBHOOK_SECRET configured

================================================================================
TEST PROCEDURE
================================================================================

Step 1: Environment Setup and Service Start
===========================================
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected:
✅ Django development server starts on port 8000
✅ Backend accessible at http://localhost:8000/api/
✅ Webhook endpoint available at /api/finances/webhooks/stripe/

Screenshot: 01-servers-started.png
Duration: ~15 seconds

Step 2: Test Malformed JSON Payload Handling
=============================================
Commands:
  # Test invalid JSON structure
  curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -H "Stripe-Signature: t=1234567890,v1=dummy_signature" \
    -d '{invalid_json_structure'

Expected:
✅ HTTP 400 Bad Request response
✅ Server handles malformed JSON without crashing
✅ Appropriate error message in response
✅ No database changes or side effects
✅ Error logged with request details

Screenshot: 02-malformed-json-handled.png

Step 3: Test Empty Payload Handling
====================================
Commands:
  # Test completely empty payload
  curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -H "Stripe-Signature: t=1234567890,v1=dummy_signature" \
    -d ''

Expected:
✅ HTTP 400 Bad Request response
✅ Empty payload handled gracefully
✅ No server errors or exceptions
✅ Proper error logging

Screenshot: 03-empty-payload-handled.png

Step 4: Test Oversized Payload Handling
========================================
Commands:
  # Create very large payload to test limits
  python -c "
import requests
import json

# Create 1MB payload
large_data = {'x' * 1000: 'y' * 1000 for _ in range(1000)}
payload = {'type': 'test.large', 'data': large_data}

try:
    response = requests.post(
        'http://localhost:8000/api/finances/webhooks/stripe/',
        json=payload,
        headers={
            'Content-Type': 'application/json',
            'Stripe-Signature': 't=1234567890,v1=dummy_signature'
        },
        timeout=30
    )
    print(f'Status: {response.status_code}')
    print(f'Response length: {len(response.text)}')
except Exception as e:
    print(f'Error: {e}')
"

Expected:
✅ Large payload handled without server crash
✅ Appropriate response (likely 400 for missing signature)
✅ No memory exhaustion or performance degradation
✅ Server remains responsive

Screenshot: 04-oversized-payload-handled.png

Step 5: Test Non-Existent Payment Intent Handling
==================================================
Commands:
  # Create webhook payload referencing non-existent payment intent
  stripe trigger payment_intent.succeeded --override payment_intent:id=pi_nonexistent_999

Expected:
✅ Webhook receives event with valid signature
✅ PaymentService handles non-existent payment intent gracefully
✅ HTTP 500 response (indicating processing failure for Stripe retry)
✅ Error logged with payment intent ID
✅ No database corruption or undefined state

Screenshot: 05-nonexistent-payment-intent.png

Step 6: Test Database Connection Failure Simulation
====================================================
Commands:
  # Temporarily break database connection to test error handling
  python manage.py shell -c "
from django.db import connection
from django.test.utils import override_settings

# Test webhook behavior when database is unavailable
print('Testing database connection failure scenarios...')
print('This would typically require database service interruption')
print('For safety, we will simulate this with connection limits')
"

  # Send webhook event during potential database stress
  stripe trigger payment_intent.succeeded --override payment_intent:id=pi_test_db_error

Expected:
✅ Database connection issues handled gracefully
✅ HTTP 500 response to trigger Stripe retry
✅ Atomic transaction rollback prevents partial data
✅ Error logging captures database failure details
✅ No data corruption from failed operations

Screenshot: 06-database-failure-handling.png

Step 7: Test PaymentService API Failure Handling
=================================================
Commands:
  # Create test transaction for API failure testing
  cd backend
  python manage.py test_stripe_webhook --create-test-data --payment-intent-id pi_test_api_failure

  # Simulate PaymentService failure by temporarily modifying code behavior
  # For testing purposes, we'll check the logs for error handling
  stripe trigger payment_intent.succeeded --override payment_intent:id=pi_test_api_failure

Expected:
✅ PaymentService errors handled gracefully
✅ HTTP 500 response for processing failures
✅ Exception logging with full stack trace
✅ Transaction remains in safe state (no partial updates)
✅ Error details logged for debugging

Screenshot: 07-payment-service-failure.png

Step 8: Test Corrupted Event Data Handling
===========================================
Commands:
  # Test webhook with corrupted event structure
  python -c "
import requests
import json
import time
import hmac
import hashlib

# Create corrupted event data
corrupted_event = {
    'type': 'payment_intent.succeeded',
    'data': {
        'object': {
            'id': None,  # Null ID should cause issues
            'status': 'corrupted_data',
            'amount': 'not_a_number',  # Invalid amount type
            'metadata': 'should_be_dict'  # Wrong metadata type
        }
    }
}

payload = json.dumps(corrupted_event)
print('Sending corrupted event data...')
print(f'Payload: {payload[:200]}...')

try:
    response = requests.post(
        'http://localhost:8000/api/finances/webhooks/stripe/',
        data=payload,
        headers={
            'Content-Type': 'application/json',
            'Stripe-Signature': 't=1234567890,v1=dummy_signature'
        }
    )
    print(f'Status: {response.status_code}')
    print(f'Response: {response.text[:200]}')
except Exception as e:
    print(f'Request error: {e}')
"

Expected:
✅ Corrupted event data handled without server crash
✅ Data validation errors caught and logged
✅ HTTP 400 or 500 response depending on error type
✅ No database writes with invalid data
✅ Structured error logging for debugging

Screenshot: 08-corrupted-event-data.png

Step 9: Test Concurrent Error Scenarios
========================================
Commands:
  # Send multiple problematic requests concurrently
  for i in {1..5}; do
    curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
      -H "Content-Type: application/json" \
      -H "Stripe-Signature: invalid_sig_$i" \
      -d "{\"type\": \"error_test_$i\", \"id\": \"evt_$i\"}" &
  done
  wait

Expected:
✅ Multiple concurrent error requests handled safely
✅ No server instability or resource exhaustion
✅ Each request receives appropriate error response
✅ Error handling remains consistent under load
✅ Server continues accepting valid requests

Screenshot: 09-concurrent-error-handling.png

Step 10: Test Memory and Resource Exhaustion Protection
========================================================
Commands:
  # Test webhook behavior under resource pressure
  python -c "
import requests
import threading
import time

def send_error_request(thread_id):
    try:
        # Send request with large headers
        large_signature = 'v1=' + 'x' * 10000
        response = requests.post(
            'http://localhost:8000/api/finances/webhooks/stripe/',
            json={'type': 'resource_test', 'id': f'evt_{thread_id}'},
            headers={
                'Content-Type': 'application/json',
                'Stripe-Signature': f't=1234567890,{large_signature}'
            },
            timeout=10
        )
        print(f'Thread {thread_id}: {response.status_code}')
    except Exception as e:
        print(f'Thread {thread_id} error: {e}')

# Start multiple threads to test resource limits
threads = []
for i in range(10):
    thread = threading.Thread(target=send_error_request, args=(i,))
    threads.append(thread)
    thread.start()

for thread in threads:
    thread.join()
"

Expected:
✅ Resource limits protected against exhaustion
✅ Large headers handled without memory issues
✅ Thread limits prevent server overload
✅ All requests receive responses (even if error)
✅ Server remains stable under resource pressure

Screenshot: 10-resource-exhaustion-protection.png

Step 11: Test Error Recovery and Logging
=========================================
Commands:
  # Check comprehensive error logging
  make logs | grep -i "error\|exception\|webhook" | tail -20

Expected:
✅ All error scenarios properly logged
✅ Error messages include sufficient debugging information
✅ No sensitive information leaked in error logs
✅ Stack traces available for server errors
✅ Structured logging format for monitoring

Screenshot: 11-error-logging-comprehensive.png

Step 12: Test Webhook Availability During Errors
=================================================
Commands:
  # Verify webhook remains available after error scenarios
  python manage.py test_stripe_webhook --test-endpoint

Expected:
✅ Webhook endpoint still responding correctly
✅ Basic security tests still pass
✅ Error handling didn't break normal functionality
✅ Server recovered from all error scenarios
✅ No persistent error states

Screenshot: 12-webhook-availability-verified.png

Step 13: Test Error Response Format Consistency
================================================
Commands:
  # Test various error scenarios for consistent response format
  echo "Testing signature error..."
  curl -s -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -H "Stripe-Signature: invalid" \
    -d '{}' | head -c 100

  echo -e "\nTesting JSON error..."
  curl -s -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -H "Stripe-Signature: t=123,v1=abc" \
    -d 'invalid json' | head -c 100

  echo -e "\nTesting method error..."
  curl -s -X GET http://localhost:8000/api/finances/webhooks/stripe/ | head -c 100

Expected:
✅ Consistent error response format across error types
✅ Appropriate HTTP status codes for each error category
✅ Error messages clear but not revealing internal details
✅ Response format suitable for Stripe retry logic
✅ No HTML error pages (JSON responses only)

Screenshot: 13-error-response-consistency.png

Step 14: Verify No Data Corruption After Errors
=================================================
Commands:
  # Check database integrity after all error scenarios
  python manage.py shell -c "
from finances.models import PurchaseTransaction, StudentAccountBalance
from accounts.models import CustomUser

# Check for any corrupted or partial data
print('=== DATA INTEGRITY CHECK ===')
try:
    transactions = PurchaseTransaction.objects.all()
    print(f'Total transactions: {transactions.count()}')
    
    for t in transactions:
        print(f'Transaction {t.id}: {t.payment_status} - Valid: {t.stripe_payment_intent_id is not None}')
    
    balances = StudentAccountBalance.objects.all()
    print(f'Total balances: {balances.count()}')
    
    for b in balances:
        print(f'Balance {b.id}: Hours={b.hours_purchased}, Amount={b.balance_amount}')
        
    print('Database integrity: VERIFIED')
except Exception as e:
    print(f'Database integrity issue: {e}')
"

Expected:
✅ No corrupted transaction records
✅ No invalid or partial database entries
✅ All existing data remains consistent
✅ Error scenarios didn't cause data pollution
✅ Database constraints maintained

Screenshot: 14-data-integrity-verified.png

Step 15: Test Graceful Shutdown Under Error Load
=================================================
Commands:
  # Test server shutdown behavior during error processing
  # Start error load in background
  python -c "
import requests
import threading
import time

def continuous_error_requests():
    for i in range(20):
        try:
            requests.post(
                'http://localhost:8000/api/finances/webhooks/stripe/',
                json={'error_test': i},
                timeout=5
            )
        except:
            pass
        time.sleep(0.1)

thread = threading.Thread(target=continuous_error_requests)
thread.start()
print('Started continuous error requests...')
time.sleep(2)
" &

  # Test graceful shutdown
  sleep 5
  make stop

Expected:
✅ Server shuts down gracefully despite ongoing error requests
✅ No hanging processes or resource leaks
✅ Error requests handled until shutdown
✅ Clean termination without forced kills
✅ All resources properly cleaned up

Screenshot: 15-graceful-shutdown-verified.png

================================================================================
CLEANUP
================================================================================

Commands:
  # Ensure clean shutdown
  make stop
  # Clean up any test data
  cd backend && python manage.py flush --noinput

Expected:
✅ All processes terminated
✅ Test database cleaned
✅ System ready for next test

================================================================================
PASS/FAIL CRITERIA
================================================================================

✅ PASS: All error scenarios handled gracefully without server crashes
✅ PASS: Appropriate HTTP status codes returned for Stripe retry logic
✅ PASS: Database integrity maintained during all error conditions
✅ PASS: No memory leaks or resource exhaustion under error load
✅ PASS: Comprehensive error logging for debugging and monitoring
✅ PASS: Consistent error response format across all scenarios
✅ PASS: Server remains available and functional after error scenarios

❌ FAIL: Any server crashes or unhandled exceptions
❌ FAIL: Database corruption or inconsistent state after errors
❌ FAIL: Memory leaks or resource exhaustion issues
❌ FAIL: Inadequate error logging or debugging information
❌ FAIL: Inconsistent error responses or inappropriate status codes
❌ FAIL: Server instability or performance degradation after errors

================================================================================
CRITICAL IMPORTANCE
================================================================================

🛡️ Error handling prevents webhook failures from affecting payment processing
🛡️ Graceful degradation maintains service availability during issues
🛡️ Proper status codes ensure Stripe's retry mechanism works correctly
🛡️ Data integrity protection prevents financial discrepancies
🛡️ Comprehensive logging enables rapid issue diagnosis and resolution

This test validates the webhook's resilience under adverse conditions.
Production webhook endpoints must handle errors gracefully to maintain
customer trust and financial accuracy. Any failures could lead to
service outages, data corruption, or payment processing issues.