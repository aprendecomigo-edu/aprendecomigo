================================================================================
STRIPE WEBHOOK SECURITY VALIDATION
================================================================================

Test ID: WEBHOOK-001
Test Name: Stripe Webhook Security and Signature Verification
Test Type: Security/Integration 
Priority: Critical
Estimated Time: 25 minutes

================================================================================
TEST PURPOSE
================================================================================

Validate that the Stripe webhook handler properly implements security measures:
‚úÖ Signature verification using STRIPE_WEBHOOK_SECRET
‚úÖ Authentication and authorization controls
‚úÖ Protection against unauthorized requests
‚úÖ Proper handling of malformed security data
‚úÖ CSRF exemption and HTTP method restrictions

This test ensures the webhook endpoint cannot be exploited by unauthorized parties
and correctly validates all incoming webhook events from Stripe.

================================================================================
PREREQUISITES
================================================================================

‚úÖ Virtual environment configured (.venv directory exists)
‚úÖ Dependencies installed (backend/requirements.txt)
‚úÖ Stripe test environment configured with webhook secrets
‚úÖ Test transaction data available in database
‚úÖ Django test settings with proper Stripe configuration

================================================================================
TEST PROCEDURE
================================================================================

Step 1: Environment Setup and Service Start
===========================================
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected:
‚úÖ Django development server starts on port 8000
‚úÖ Backend logs show successful startup
‚úÖ Stripe webhook endpoint available at /api/finances/webhooks/stripe/

Screenshot: 01-servers-started.png
Duration: ~15 seconds

Step 2: Create Test Data Using Management Command
=================================================
Commands:
  cd backend
  python manage.py test_stripe_webhook --create-test-data

Expected:
‚úÖ Test student user created: webhook.test@aprendecomigo.com
‚úÖ Test transaction created with PROCESSING status
‚úÖ Payment intent ID generated (format: pi_test_webhook_*)
‚úÖ Student account balance initialized
‚úÖ Test data summary displayed with all IDs

Screenshot: 02-test-data-created.png

Step 3: Validate Stripe Configuration
======================================
Commands:
  python manage.py test_stripe_webhook --validate-config

Expected:
‚úÖ STRIPE_SECRET_KEY present and masked in output
‚úÖ STRIPE_PUBLIC_KEY present and masked in output  
‚úÖ STRIPE_WEBHOOK_SECRET present and masked in output
‚úÖ Stripe API connection test successful
‚úÖ Account ID retrieved from Stripe API

Screenshot: 03-stripe-config-validated.png

Step 4: Test Webhook Endpoint Security - Missing Signature
===========================================================
Commands:
  curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -d '{"type": "payment_intent.succeeded", "id": "evt_test_123"}'

Expected:
‚úÖ HTTP 400 Bad Request response
‚úÖ Response body contains "Missing signature" error message
‚úÖ Request properly rejected due to missing Stripe-Signature header
‚úÖ Backend logs show security rejection with appropriate warning

Screenshot: 04-missing-signature-rejected.png

Step 5: Test Webhook Endpoint Security - Invalid Signature
===========================================================
Commands:
  curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -H "Stripe-Signature: invalid_signature_format" \
    -d '{"type": "payment_intent.succeeded", "id": "evt_test_123"}'

Expected:
‚úÖ HTTP 400 Bad Request response
‚úÖ Response body contains "Invalid signature" error message
‚úÖ Request rejected due to signature verification failure
‚úÖ Backend logs show signature verification error

Screenshot: 05-invalid-signature-rejected.png

Step 6: Test HTTP Method Restrictions
======================================
Commands:
  # Test GET request (should be rejected)
  curl -X GET http://localhost:8000/api/finances/webhooks/stripe/
  
  # Test PUT request (should be rejected)
  curl -X PUT http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -d '{"test": "data"}'

Expected:
‚úÖ GET request returns HTTP 405 Method Not Allowed
‚úÖ PUT request returns HTTP 405 Method Not Allowed
‚úÖ Only POST method accepted by webhook endpoint
‚úÖ Proper error responses for unsupported HTTP methods

Screenshot: 06-http-method-restrictions.png

Step 7: Test CSRF Exemption
============================
Commands:
  # Verify CSRF exemption by testing without CSRF token
  curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -d '{}'

Expected:
‚úÖ Request not rejected due to missing CSRF token
‚úÖ Request fails for other reasons (missing signature) not CSRF
‚úÖ HTTP status code is NOT 403 Forbidden (CSRF error)
‚úÖ CSRF exemption working correctly for webhook endpoint

Screenshot: 07-csrf-exemption-verified.png

Step 8: Test Webhook Endpoint Basic Security
=============================================
Commands:
  python manage.py test_stripe_webhook --test-endpoint

Expected:
‚úÖ Test 1: Missing signature header correctly rejected (400 status)
‚úÖ Test 2: Invalid signature correctly rejected (400 status)
‚úÖ Test 3: Wrong HTTP method correctly rejected (405 status)
‚úÖ All security tests pass with appropriate status codes
‚úÖ Webhook endpoint URL displayed correctly

Screenshot: 08-endpoint-security-tests.png

Step 9: Verify Security Logging
================================
Commands:
  make logs | tail -50

Expected:
‚úÖ Security violations properly logged with WARNING/ERROR levels
‚úÖ Signature verification failures logged with event details
‚úÖ Invalid request attempts logged with source information
‚úÖ No sensitive information (secrets, full signatures) exposed in logs
‚úÖ Structured logging format for security monitoring

Screenshot: 09-security-logging-verified.png

Step 10: Test Large Payload Handling
=====================================
Commands:
  # Create large invalid payload to test security limits
  python -c "
import requests
import json
large_payload = {'data': 'x' * 10000, 'type': 'test.event'}
response = requests.post('http://localhost:8000/api/finances/webhooks/stripe/', 
                        json=large_payload,
                        headers={'Content-Type': 'application/json'})
print(f'Status: {response.status_code}')
print(f'Response: {response.text[:200]}')
"

Expected:
‚úÖ Large payload handled gracefully without server crash
‚úÖ Appropriate error response (400 for missing signature)
‚úÖ No memory exhaustion or performance degradation
‚úÖ Security controls still enforced regardless of payload size

Screenshot: 10-large-payload-handling.png

Step 11: Validate Error Response Format
========================================
Commands:
  # Test various malformed requests to ensure consistent error responses
  curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
    -H "Content-Type: application/json" \
    -d 'invalid json content'

Expected:
‚úÖ Malformed JSON handled gracefully
‚úÖ Consistent error response format
‚úÖ No server errors or stack traces exposed
‚úÖ Appropriate HTTP status codes returned

Screenshot: 11-error-response-format.png

Step 12: Test Security Under Load
==================================
Commands:
  # Send multiple concurrent requests to test security under pressure
  for i in {1..10}; do
    curl -X POST http://localhost:8000/api/finances/webhooks/stripe/ \
      -H "Content-Type: application/json" \
      -d '{"test": "load_'$i'"}' &
  done
  wait

Expected:
‚úÖ All requests properly handled with consistent security enforcement
‚úÖ No security bypasses under concurrent load
‚úÖ Server remains stable and responsive
‚úÖ All requests receive appropriate 400 responses for missing signatures

Screenshot: 12-security-under-load.png

================================================================================
CLEANUP
================================================================================

Commands:
  make stop

Expected:
‚úÖ All server processes terminated cleanly
‚úÖ Ports 8000/8081 available for next test
‚úÖ Log files preserved for analysis

================================================================================
PASS/FAIL CRITERIA
================================================================================

‚úÖ PASS: All security measures correctly implemented and enforced
‚úÖ PASS: Signature verification working with proper error responses
‚úÖ PASS: HTTP method restrictions properly enforced
‚úÖ PASS: CSRF exemption working without compromising other security
‚úÖ PASS: Error responses consistent and secure (no information leakage)
‚úÖ PASS: Security controls effective under various attack scenarios

‚ùå FAIL: Any security check bypassed or improperly implemented
‚ùå FAIL: Signature verification not working or bypassable
‚ùå FAIL: Unauthorized requests accepted by webhook endpoint
‚ùå FAIL: Information leakage in error responses
‚ùå FAIL: Server crashes or instability under security testing

================================================================================
SECURITY CONSIDERATIONS
================================================================================

üîí This test validates critical security controls for financial webhook processing
üîí Webhook endpoint handles sensitive payment data requiring maximum security
üîí Signature verification prevents unauthorized transaction manipulation
üîí Proper error handling prevents information disclosure to attackers
üîí Load testing ensures security remains effective under pressure

Any failures in this test case indicate critical security vulnerabilities that
must be addressed before production deployment.