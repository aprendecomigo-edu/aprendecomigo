QA Test Case: Teacher Invitation Acceptance Page Load

Test ID: TINVITE-001
Test Name: Teacher Invitation Acceptance Page Load and Display
Purpose: Verify that teacher invitation acceptance page loads correctly and displays all required information including school details, role, and invitation context
Expected Result: Invitation acceptance page loads successfully with all school information, invitation details, and proper UI elements displayed

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- GitHub Issue: #49 - Teacher Invitation Acceptance Routes - Frontend Infrastructure
- Related Fixes: Issue #85 (API endpoint 404 fixes), Issue #86 (decline endpoint)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (essential for debugging API calls)

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Teacher Email for Invitation: tinvite001.test@example.com
- School Name: Default School or Test School
- Invitation Role: teacher

Pre-requisites:
1. Valid teacher invitation must exist in the system
2. Invitation token must be valid and not expired
3. Both frontend and backend servers running
4. Database contains test school and admin user

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
1. Navigate to project root directory
2. Activate Python virtual environment
3. Start development servers using make command
4. Verify both frontend (port 8081) and backend servers are running
5. Open backend logs for API call monitoring

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open
  # In separate terminal:
  make logs

Expected: Development environment running with both servers accessible
Screenshot: 01_servers_running.png

Step 2: Create Test Teacher Invitation (Admin Setup)
1. Open browser and navigate to http://localhost:8081
2. Authenticate as school admin (anapmc.carvalho@gmail.com)
3. Navigate to teacher invitation section
4. Create invitation for tinvite001.test@example.com with teacher role
5. Note the invitation token/link generated
6. Verify invitation appears in admin dashboard

Expected: Teacher invitation created successfully with valid token
Screenshot: 02_invitation_created.png

Step 3: Access Invitation Acceptance Page
1. Open new browser tab/window (or use private/incognito mode)
2. Navigate to invitation URL: http://localhost:8081/accept-invitation/[TOKEN]
3. Wait for page to load completely
4. Verify page loads without errors or 404s
5. Check browser console for any JavaScript errors
6. Monitor backend logs for API calls during page load

Expected: Invitation acceptance page loads successfully without errors
Screenshot: 03_invitation_page_loaded.png

Step 4: Verify Page Header and Navigation
1. Check page has proper header with school/platform branding
2. Verify navigation elements are present (if any)
3. Check page title reflects invitation context
4. Verify back/home navigation options
5. Ensure page styling and layout are correct

Expected: Page header and navigation elements display properly
Screenshot: 04_page_header_navigation.png

Step 5: Verify School Information Display
1. Check school name is displayed prominently
2. Verify school details/description if available
3. Check for school logo or branding elements
4. Verify invitation context text is clear
5. Ensure school information matches the inviting school

Expected: School information displayed accurately and clearly
Screenshot: 05_school_information.png

Step 6: Verify Invitation Details Display
1. Check invited teacher email is displayed (if shown)
2. Verify role being offered is clearly stated (TEACHER)
3. Check invitation message if custom message was included
4. Verify inviter name/information is shown
5. Check invitation date/time information

Expected: All invitation details displayed correctly and completely
Screenshot: 06_invitation_details.png

Step 7: Verify Accept/Decline Action Buttons
1. Check "Accept Invitation" button is present and enabled
2. Verify "Decline Invitation" button is present (Issue #86 fix)
3. Check button styling and accessibility
4. Verify buttons are properly positioned and sized
5. Test button hover states and visual feedback

Expected: Both accept and decline buttons present and functional
Screenshot: 07_action_buttons.png

Step 8: Test Accept Button Interaction (No Submission)
1. Click on "Accept Invitation" button
2. Verify button shows loading/processing state if applicable
3. Check for any validation messages or requirements
4. Verify any modal or form elements appear correctly
5. Test cancellation if modal opens
6. Do NOT complete the acceptance process yet

Expected: Accept button interaction works correctly with proper feedback
Screenshot: 08_accept_button_interaction.png

Step 9: Test Decline Button Interaction (No Submission)
1. Click on "Decline Invitation" button
2. Verify decline confirmation dialog/modal appears
3. Check decline modal content and messaging
4. Test cancel option in decline modal
5. Verify proper UI feedback and states
6. Do NOT complete the decline process yet

Expected: Decline button shows confirmation dialog with proper options
Screenshot: 09_decline_button_interaction.png

Step 10: Verify Invitation Status Display
1. Check page shows invitation status (PENDING, VALID, etc.)
2. Verify expiration information if displayed
3. Check for any warning messages about invitation validity
4. Verify timezone handling for invitation timestamps
5. Check status indicators are clear and accurate

Expected: Invitation status information displayed clearly and accurately
Screenshot: 10_invitation_status.png

Step 11: Test Mobile Responsiveness
1. Resize browser window to mobile width (375px)
2. Verify page layout adapts properly to mobile
3. Check all elements remain accessible and functional
4. Test touch interactions on buttons
5. Verify text remains readable and properly sized

Expected: Page is fully responsive and functional on mobile
Screenshot: 11_mobile_responsiveness.png

Step 12: Verify API Endpoint Communication (Issue #85 Fix)
1. Monitor backend logs for API calls made during page load
2. Verify invitation validation API call succeeds (no 404 errors)
3. Check school information API call works correctly
4. Verify all API responses return proper data
5. Confirm no 404 or API errors in browser console

Expected: All API endpoints working correctly without 404 errors
Screenshot: 12_api_calls_successful.png

Step 13: Test Error Handling for Invalid Token
1. Modify URL to use invalid/non-existent token
2. Navigate to modified URL
3. Verify proper error handling and messaging
4. Check page shows appropriate "invitation not found" message
5. Verify error page has proper navigation options

Expected: Invalid token handled gracefully with clear error messaging
Screenshot: 13_invalid_token_handling.png

Step 14: Test Already Accepted Invitation Handling
1. Use a token for an invitation that was already accepted (if available)
2. Navigate to the invitation URL
3. Verify proper handling of already-accepted status
4. Check for appropriate messaging about invitation status
5. Test navigation options from already-accepted state

Expected: Already-accepted invitations handled with appropriate messaging
Screenshot: 14_already_accepted_handling.png

Step 15: Verify Loading States and Performance
1. Refresh invitation acceptance page multiple times
2. Monitor page load times and loading states
3. Check loading indicators during API calls
4. Verify smooth transitions between loading and loaded states
5. Test page performance with slow network simulation

Expected: Page loads efficiently with proper loading states
Screenshot: 15_loading_performance.png

=== PASS/FAIL CRITERIA ===

PASS: Invitation acceptance page loads completely with all school details, invitation information, and functional accept/decline buttons
FAIL: Page fails to load, missing information, 404 errors, or non-functional UI elements

Individual Step Criteria:
- Step 1: PASS if servers start successfully, FAIL if environment issues
- Step 2: PASS if invitation created successfully, FAIL if creation fails
- Step 3: PASS if page loads without errors, FAIL if 404 or loading failures
- Step 4: PASS if header/navigation correct, FAIL if missing or broken
- Step 5: PASS if school information displays properly, FAIL if missing/incorrect
- Step 6: PASS if invitation details complete, FAIL if missing key information
- Step 7: PASS if both buttons present and styled, FAIL if missing or broken
- Step 8: PASS if accept interaction works, FAIL if button non-functional
- Step 9: PASS if decline interaction works, FAIL if missing confirmation
- Step 10: PASS if status information clear, FAIL if status unclear/missing
- Step 11: PASS if mobile responsive, FAIL if mobile layout broken
- Step 12: PASS if API calls successful, FAIL if 404 errors or API failures
- Step 13: PASS if invalid token handled gracefully, FAIL if poor error handling
- Step 14: PASS if accepted status handled properly, FAIL if confusing messaging
- Step 15: PASS if loading smooth and fast, FAIL if poor performance

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Page must load within 2 seconds under normal conditions
- All text must be clear, readable, and properly localized
- Buttons must provide clear visual feedback on interaction
- Error states must be helpful and actionable
- Mobile experience must be fully functional
- Loading states must be smooth and informative
- School branding should be prominent and professional
- Invitation details must be complete and unambiguous