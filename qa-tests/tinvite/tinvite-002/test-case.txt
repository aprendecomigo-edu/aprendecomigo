QA Test Case: Accept Invitation Flow with Profile Wizard Integration

Test ID: TINVITE-002
Test Name: Accept Teacher Invitation and Profile Wizard Integration
Purpose: Verify that teachers can successfully accept invitations and are properly guided through profile completion using the integrated wizard orchestration system
Expected Result: Complete invitation acceptance flow works with seamless integration to profile wizard, resulting in fully set up teacher account

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- GitHub Issue: #49 - Teacher Invitation Acceptance Routes - Frontend Infrastructure
- Related Fixes: Issue #95 (Wizard orchestration API), Issue #97 (Invitation-wizard integration)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (critical for monitoring wizard API calls)

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Teacher Email for Invitation: tinvite002.accept@example.com
- School Name: Default School or Test School
- Invitation Role: teacher
- Profile Data: Teaching subjects, grade levels, availability preferences

Pre-requisites:
1. Valid teacher invitation exists in system
2. Wizard orchestration API is functional (Issue #95)
3. Profile wizard components are accessible
4. Both frontend and backend servers running

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Invitation Creation
1. Navigate to project root and activate environment
2. Start development servers with make dev-open
3. Open backend logs monitoring: make logs
4. Create fresh teacher invitation for tinvite002.accept@example.com
5. Note invitation token and verify invitation status is PENDING

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open
  # Separate terminal:
  make logs

Expected: Environment ready with fresh teacher invitation created
Screenshot: 01_invitation_ready.png

Step 2: Access Invitation and Verify Initial State
1. Open browser to invitation URL: http://localhost:8081/accept-invitation/[TOKEN]
2. Verify invitation acceptance page loads correctly
3. Confirm school details and invitation information display
4. Check Accept/Decline buttons are present and functional
5. Verify invitation status shows as PENDING or VALID

Expected: Invitation page accessible with all information displayed correctly
Screenshot: 02_invitation_page_ready.png

Step 3: Initiate Invitation Acceptance
1. Click "Accept Invitation" button
2. Monitor loading states and UI feedback
3. Check for any authentication requirements (login/signup form)
4. If new user, verify account creation form appears
5. If existing user, verify login prompt appears
6. Monitor backend logs for API call initiation

Expected: Acceptance process initiates with appropriate authentication flow
Screenshot: 03_acceptance_initiated.png

Step 4: Complete User Authentication (New User Path)
1. If new user signup required, complete registration:
   - Email field should be pre-populated with invitation email
   - Enter required password and confirm
   - Accept terms and conditions if required
   - Submit registration form
2. Verify account creation API call succeeds
3. Check for registration confirmation

Expected: New user account created successfully with pre-populated email
Screenshot: 04_user_registration.png

Step 5: Complete User Authentication (Existing User Path)
1. If existing user login required:
   - Enter credentials for existing account
   - Complete authentication process
   - Verify successful login
2. Check that system recognizes existing user properly
3. Verify invitation acceptance continues after authentication

Expected: Existing user authentication works and continues invitation flow
Screenshot: 05_existing_user_login.png

Step 6: Process Invitation Acceptance Backend
1. Monitor backend logs for invitation acceptance API calls
2. Verify invitation status update from PENDING to ACCEPTED
3. Check teacher role assignment API calls
4. Verify school membership creation in logs
5. Confirm no API errors or 404s during processing

Expected: Backend successfully processes invitation acceptance with proper role assignment
Screenshot: 06_backend_processing.png

Step 7: Verify Wizard Orchestration Initialization (Issue #95)
1. After acceptance, check for wizard orchestration API call
2. Verify wizard initialization with teacher-specific steps
3. Check wizard configuration includes:
   - Profile information setup
   - Teaching subjects selection
   - Grade levels configuration
   - Availability preferences
4. Monitor logs for wizard API responses

Expected: Wizard orchestration API initializes correctly with teacher profile steps
Screenshot: 07_wizard_initialization.png

Step 8: Navigate Profile Wizard - Basic Information
1. Verify profile wizard loads after acceptance
2. Complete basic profile information:
   - Full name (may be pre-populated)
   - Phone number
   - Bio/description
   - Profile photo upload (optional)
3. Check form validation and error handling
4. Verify "Next" button becomes enabled when required fields complete

Expected: Basic profile information step works with proper validation
Screenshot: 08_basic_profile_step.png

Step 9: Navigate Profile Wizard - Teaching Subjects
1. Proceed to teaching subjects selection step
2. Verify available subjects are loaded from backend
3. Select multiple teaching subjects relevant to teacher
4. Test subject search/filtering functionality if available
5. Verify selected subjects are properly tracked
6. Check required minimum subjects validation

Expected: Teaching subjects selection works with proper validation
Screenshot: 09_teaching_subjects.png

Step 10: Navigate Profile Wizard - Grade Levels
1. Proceed to grade levels configuration step
2. Verify grade level options are appropriate for Portuguese education system
3. Select relevant grade levels for teaching
4. Test grade level grouping/categorization
5. Verify selections are validated and saved
6. Check for proper educational system integration

Expected: Grade levels selection works with Portuguese education system
Screenshot: 10_grade_levels.png

Step 11: Navigate Profile Wizard - Availability Setup
1. Proceed to availability preferences step
2. Configure teaching availability:
   - Weekly schedule preferences
   - Time slot preferences
   - Maximum students/hours per week
   - Preferred session duration
3. Test availability picker functionality
4. Verify time zone handling is correct

Expected: Availability setup works with proper time handling
Screenshot: 11_availability_setup.png

Step 12: Navigate Profile Wizard - Compensation Preferences
1. Proceed to compensation preferences step
2. Configure payment preferences:
   - Hourly rate expectations
   - Payment method preferences
   - Bank account information (if required)
   - Tax information setup
3. Verify currency handling (Euros)
4. Test validation for financial information

Expected: Compensation setup works with proper financial validation
Screenshot: 12_compensation_setup.png

Step 13: Complete Profile Wizard and Submit
1. Review all wizard steps and entered information
2. Make any necessary corrections
3. Submit completed profile
4. Monitor backend logs for profile creation API calls
5. Verify wizard completion API call succeeds
6. Check for success confirmation

Expected: Profile wizard completes successfully with all data saved
Screenshot: 13_wizard_completion.png

Step 14: Verify Teacher Dashboard Access
1. After wizard completion, verify automatic redirect to teacher dashboard
2. Check teacher has proper access to school-specific content
3. Verify teacher role permissions are active
4. Test navigation through teacher interface
5. Confirm school membership is active and visible

Expected: Teacher dashboard accessible with proper role-based content
Screenshot: 14_teacher_dashboard.png

Step 15: Verify Profile Data Persistence
1. Navigate to teacher profile/settings page
2. Verify all wizard-entered information is correctly saved:
   - Basic profile information
   - Teaching subjects
   - Grade levels
   - Availability preferences
   - Compensation settings
3. Test profile editing functionality
4. Verify data consistency across different views

Expected: All profile data persisted correctly and editable
Screenshot: 15_profile_data_verification.png

Step 16: Verify Admin Dashboard Updates
1. Switch to admin account/browser tab
2. Refresh invitation dashboard
3. Verify invitation status updated to ACCEPTED
4. Check teacher appears in school member list
5. Verify teacher profile information is visible to admin
6. Check acceptance timestamp is recorded

Expected: Admin dashboard reflects successful invitation acceptance and teacher addition
Screenshot: 16_admin_dashboard_updated.png

Step 17: Test Email Confirmation Flow
1. Check if email confirmation is sent after acceptance
2. Verify email contains:
   - Welcome message
   - School information
   - Next steps instructions
   - Contact information
3. Test email formatting and content accuracy
4. Verify email delivery (check logs or email service)

Expected: Email confirmation sent with appropriate content
Screenshot: 17_email_confirmation.png

Step 18: Verify Integration Data Consistency
1. Check backend database for data consistency:
   - Teacher invitation status: ACCEPTED
   - User account: created/updated properly
   - School membership: active with TEACHER role
   - Profile data: all wizard information saved
2. Verify referential integrity across tables
3. Check for any orphaned or inconsistent records

Expected: Backend data completely consistent across all related tables
Screenshot: 18_data_consistency.png

=== PASS/FAIL CRITERIA ===

PASS: Complete invitation acceptance with seamless wizard integration resulting in fully configured teacher account
FAIL: Any failure in acceptance process, wizard integration, profile setup, or data inconsistency

Individual Step Criteria:
- Step 1: PASS if environment ready with invitation, FAIL if setup issues
- Step 2: PASS if invitation page accessible, FAIL if page loading issues
- Step 3: PASS if acceptance initiates properly, FAIL if button non-functional
- Step 4: PASS if new user registration works, FAIL if signup problems
- Step 5: PASS if existing user login works, FAIL if authentication issues
- Step 6: PASS if backend processes acceptance, FAIL if API errors
- Step 7: PASS if wizard initializes correctly, FAIL if wizard API issues
- Step 8: PASS if basic profile step works, FAIL if form problems
- Step 9: PASS if subjects selection works, FAIL if subjects loading issues
- Step 10: PASS if grade levels work, FAIL if education system issues
- Step 11: PASS if availability setup works, FAIL if scheduling problems
- Step 12: PASS if compensation setup works, FAIL if financial form issues
- Step 13: PASS if wizard completes successfully, FAIL if submission errors
- Step 14: PASS if dashboard accessible, FAIL if access/permission issues
- Step 15: PASS if profile data persisted, FAIL if data loss or corruption
- Step 16: PASS if admin dashboard updated, FAIL if status not reflected
- Step 17: PASS if email sent correctly, FAIL if email issues
- Step 18: PASS if data consistent, FAIL if database inconsistencies

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Acceptance process should be smooth and intuitive
- Wizard should provide clear progress indicators
- Form validation should be immediate and helpful
- Loading states should be informative
- Success confirmations should be prominent
- Email pre-population should work correctly
- Profile setup should be comprehensive but not overwhelming
- Teacher dashboard should be immediately functional
- All transitions should be smooth without jarring redirects
- Error messages should be actionable and clear