QA Test Case: API Endpoint Integration - 404 Error Resolution

Test ID: TINVITE-004
Test Name: Teacher Invitation API Endpoint Integration Testing
Purpose: Verify that all teacher invitation API endpoints are properly integrated and accessible, specifically testing the fixes for 404 errors identified in Issue #85
Expected Result: All invitation-related API endpoints function correctly without 404 errors, with proper request/response handling

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- GitHub Issue: #49 - Teacher Invitation Acceptance Routes - Frontend Infrastructure
- Critical Fix: Issue #85 - Fixed API endpoint integration (critical 404 fix)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (CRITICAL for monitoring API calls and responses)
5. Browser developer tools for network monitoring

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Teacher Email for API Test: tinvite004.apitest@example.com
- School Name: Default School or Test School
- Invitation Role: teacher

Pre-requisites:
1. Backend API endpoints properly configured and accessible
2. Frontend API client properly configured with correct URLs
3. Authentication tokens working correctly
4. Network monitoring tools available (browser dev tools)

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and API Monitoring Preparation
1. Navigate to project root and activate environment
2. Start development servers with make dev-open
3. Open backend logs in separate terminal: make logs
4. Open browser developer tools and navigate to Network tab
5. Clear network logs and prepare for API monitoring
6. Verify both frontend and backend servers are accessible

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open
  # Separate terminal:
  make logs

Expected: Environment ready with API monitoring tools active
Screenshot: 01_api_monitoring_setup.png

Step 2: Test Invitation Creation API Endpoint
1. Authenticate as school admin (anapmc.carvalho@gmail.com)
2. Navigate to teacher invitation creation form
3. Enter teacher email: tinvite004.apitest@example.com
4. Monitor network tab for API calls during invitation creation
5. Submit invitation and verify API response
6. Check backend logs for API endpoint access

Expected API Calls:
- POST /api/accounts/teacher-invitations/ (or similar)
- Response: 201 Created with invitation data
- No 404 errors in network tab or backend logs

Expected: Invitation creation API works correctly without 404 errors
Screenshot: 02_invitation_creation_api.png

Step 3: Test Invitation Validation API Endpoint
1. Navigate to invitation acceptance page with valid token
2. Monitor network calls during page load
3. Verify invitation validation API call is made
4. Check API response contains invitation details
5. Verify no 404 errors for validation endpoint
6. Test with multiple valid invitation tokens

Expected API Calls:
- GET /api/accounts/teacher-invitations/validate/[token]/ (or similar)
- Response: 200 OK with invitation validation data
- No 404 or authentication errors

Expected: Invitation validation API accessible and functional
Screenshot: 03_invitation_validation_api.png

Step 4: Test School Information API Endpoint
1. On invitation acceptance page, monitor school data loading
2. Verify school information API call is made
3. Check API response contains school details
4. Verify school name, description, and other details load correctly
5. Test API response format and data completeness
6. Check for any 404 errors on school data endpoints

Expected API Calls:
- GET /api/accounts/schools/[school_id]/ (or similar)
- Response: 200 OK with school information
- Complete school data in response

Expected: School information API provides complete data without errors
Screenshot: 04_school_information_api.png

Step 5: Test Invitation Acceptance API Endpoint
1. Begin invitation acceptance process
2. Monitor network calls during acceptance submission
3. Verify acceptance API endpoint is called correctly
4. Check API request payload includes required data
5. Verify API response indicates successful acceptance
6. Monitor backend logs for acceptance processing

Expected API Calls:
- POST /api/accounts/teacher-invitations/[token]/accept/
- Request: Proper authentication and acceptance data
- Response: 200 OK or 201 Created with success confirmation

Expected: Invitation acceptance API processes correctly without 404 errors
Screenshot: 05_invitation_acceptance_api.png

Step 6: Test Invitation Decline API Endpoint (Issue #86)
1. Create new invitation for decline testing
2. Navigate to invitation page and initiate decline
3. Monitor network calls during decline process
4. Verify decline API endpoint is accessible
5. Check API request/response for decline operation
6. Verify proper decline status update

Expected API Calls:
- POST /api/accounts/teacher-invitations/[token]/decline/
- Request: Proper authentication and decline reason (if applicable)
- Response: 200 OK with decline confirmation

Expected: Invitation decline API works correctly without 404 errors
Screenshot: 06_invitation_decline_api.png

Step 7: Test User Authentication API Integration
1. During invitation acceptance, test authentication APIs
2. For new users, monitor account creation API calls
3. For existing users, monitor login API calls
4. Verify authentication token handling
5. Check API integration between invitation and auth systems
6. Test token refresh and session management

Expected API Calls:
- POST /api/auth/register/ (new users)
- POST /api/auth/login/ (existing users)
- GET /api/auth/user/ (user profile)
- Proper token handling in headers

Expected: Authentication APIs integrate correctly with invitation flow
Screenshot: 07_authentication_api_integration.png

Step 8: Test Teacher Profile Creation API (Wizard Integration)
1. After invitation acceptance, monitor profile creation APIs
2. Verify wizard orchestration API calls
3. Check teacher profile creation endpoint accessibility
4. Monitor API calls for profile data submission
5. Verify proper data validation and storage
6. Test profile update APIs

Expected API Calls:
- POST /api/accounts/teacher-profiles/
- GET/POST /api/accounts/wizard-orchestration/
- PUT/PATCH /api/accounts/teacher-profiles/[id]/
- Proper validation and error handling

Expected: Profile creation APIs accessible and functional without 404s
Screenshot: 08_profile_creation_api.png

Step 9: Test Invitation Status Update APIs
1. Monitor invitation status changes throughout the process
2. Verify status update API calls work correctly
3. Check real-time status updates if implemented
4. Test admin dashboard API calls for invitation status
5. Verify proper data synchronization between frontend and backend
6. Test WebSocket connections if used for real-time updates

Expected API Calls:
- GET /api/accounts/teacher-invitations/status/
- PUT /api/accounts/teacher-invitations/[id]/status/
- WebSocket connections (if applicable)

Expected: Status update APIs maintain data consistency without errors
Screenshot: 09_status_update_apis.png

Step 10: Test Error Handling API Responses
1. Test API endpoints with invalid tokens
2. Verify proper 400/401/403/404 error responses
3. Test API behavior with malformed requests
4. Check error message formatting and helpfulness
5. Verify error handling doesn't expose sensitive information
6. Test API rate limiting if implemented

Expected Responses:
- 400 Bad Request for malformed data
- 401 Unauthorized for invalid auth
- 403 Forbidden for insufficient permissions
- 404 Not Found for invalid resources (but proper 404s, not erroneous ones)

Expected: APIs handle errors properly with appropriate HTTP status codes
Screenshot: 10_error_handling_apis.png

Step 11: Test API Authentication and Authorization
1. Test invitation APIs with different user roles
2. Verify school admin can manage invitations
3. Test teacher access to invitation acceptance
4. Check unauthorized access prevention
5. Verify token-based authentication works correctly
6. Test API security measures

Expected: APIs properly enforce authentication and authorization rules
Screenshot: 11_api_auth_authorization.png

Step 12: Test API Response Performance
1. Monitor API response times during invitation flow
2. Verify APIs respond within acceptable timeframes (<2 seconds)
3. Test API behavior under normal load
4. Check for any performance bottlenecks
5. Monitor database query efficiency in logs
6. Test API caching if implemented

Expected: APIs respond quickly and efficiently without performance issues
Screenshot: 12_api_performance.png

Step 13: Test API Data Validation
1. Test API endpoints with invalid data formats
2. Verify proper validation error responses
3. Check field-level validation messages
4. Test data type validation (email format, etc.)
5. Verify required field validation
6. Test data length and format constraints

Expected: APIs provide clear validation errors with helpful messages
Screenshot: 13_api_data_validation.png

Step 14: Test Cross-Origin Resource Sharing (CORS)
1. Verify API endpoints accessible from frontend domain
2. Check CORS headers in API responses
3. Test API calls from different origins if applicable
4. Verify proper CORS configuration for development/production
5. Test preflight OPTIONS requests work correctly
6. Check for any CORS-related errors in browser console

Expected: CORS properly configured allowing frontend API access
Screenshot: 14_cors_configuration.png

Step 15: Test API Documentation and Consistency
1. Verify API endpoints match documented specifications
2. Check API response formats are consistent
3. Test API versioning if implemented
4. Verify API naming conventions are followed
5. Check for proper HTTP method usage (GET/POST/PUT/DELETE)
6. Test API pagination if applicable

Expected: APIs follow consistent patterns and documented specifications
Screenshot: 15_api_documentation_consistency.png

Step 16: Comprehensive API Integration Test
1. Run complete invitation flow while monitoring all APIs
2. Verify end-to-end API call sequence is correct
3. Check data flow between different API endpoints
4. Test API integration points between different services
5. Verify no broken API chains or missing endpoints
6. Confirm all Issue #85 fixes are working correctly

Expected: Complete API integration works seamlessly from start to finish
Screenshot: 16_comprehensive_api_integration.png

=== PASS/FAIL CRITERIA ===

PASS: All teacher invitation API endpoints are accessible and functional without 404 errors, with proper request/response handling
FAIL: Any API endpoint returns 404 errors, fails to respond, or provides incorrect data

Individual Step Criteria:
- Step 1: PASS if monitoring setup successful, FAIL if tools unavailable
- Step 2: PASS if creation API works, FAIL if 404 or API failure
- Step 3: PASS if validation API accessible, FAIL if validation endpoint broken
- Step 4: PASS if school info API works, FAIL if school data unavailable
- Step 5: PASS if acceptance API functions, FAIL if acceptance endpoint broken
- Step 6: PASS if decline API works, FAIL if decline endpoint issues
- Step 7: PASS if auth integration works, FAIL if authentication broken
- Step 8: PASS if profile APIs accessible, FAIL if profile creation broken
- Step 9: PASS if status APIs work, FAIL if status update issues
- Step 10: PASS if error handling proper, FAIL if poor error responses
- Step 11: PASS if auth/authz correct, FAIL if security issues
- Step 12: PASS if performance acceptable, FAIL if slow/timeout issues
- Step 13: PASS if validation works, FAIL if validation broken
- Step 14: PASS if CORS configured, FAIL if CORS errors
- Step 15: PASS if APIs consistent, FAIL if inconsistent patterns
- Step 16: PASS if integration seamless, FAIL if broken API chains

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- All API calls should complete within 2 seconds under normal conditions
- API errors should provide clear, actionable error messages
- Loading states should be shown during API operations
- API failures should be handled gracefully with user-friendly messages
- Network errors should trigger appropriate retry mechanisms
- API responses should be properly cached where appropriate
- Real-time updates should work smoothly without lag
- Authentication should be seamless and persistent
- Data validation errors should be immediate and helpful