QA Test Case: School Admin Invitation Flow - Complete Dashboard Management

Test ID: TINVITE-011
Test Name: School Admin Teacher Invitation Complete Flow
Purpose: Test complete school admin dashboard teacher invitation workflow including modal, bulk invitations, status tracking, and dashboard management
Expected Result: School admin can successfully invite teachers (single and bulk), track invitation status, and manage invitations through dashboard

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Components: InviteTeacherModal, InvitationStatusDashboard, useInvitations hooks
- GitHub Issues: #49, #52 (Complete Teacher Invitation Frontend)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (essential for API monitoring)

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Single Test Teacher Email: single.teacher@example.com
- Bulk Test Emails: bulk1@example.com, bulk2@example.com, bulk3@example.com
- Invalid Email: invalid-email-format
- Duplicate Email: existing.teacher@example.com (if exists in system)
- School Name: Default School or Test School

Pre-requisites:
1. School admin authenticated and has access to school dashboard
2. School exists with invitation permissions
3. Both frontend and backend servers running
4. Clean invitation state for testing

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Admin Authentication
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open
  # In separate terminal for logs:
  make logs

1. Navigate to project root and start development environment
2. Open browser to http://localhost:8081
3. Authenticate as school admin (anapmc.carvalho@gmail.com)
4. Navigate to school admin dashboard
5. Verify user has proper school_owner/admin permissions
6. Check backend logs are accessible for API monitoring

Expected: School admin successfully authenticated with dashboard access
Screenshot: 01_admin_dashboard_access.png

Step 2: Access Teacher Invitation Section
1. In school admin dashboard, locate teacher management section
2. Find "Invite Teacher" or "Manage Teachers" button/option
3. Click to access teacher invitation interface
4. Verify invitation dashboard loads correctly
5. Check for InvitationStatusDashboard component loading
6. Monitor API calls for invitation list fetching

Expected: Teacher invitation section accessible with dashboard displaying
Screenshot: 02_invitation_dashboard_loaded.png

Step 3: Open Invite Teacher Modal (Single Invitation)
1. Click "Invite Teacher" or "+" button to open invitation modal
2. Verify InviteTeacherModal component opens correctly
3. Check modal contains all required fields and options
4. Verify "Single" invitation mode is default
5. Check dropdown for role selection (Teacher, Admin options)
6. Verify all UI elements are properly styled and accessible

Expected: Invite Teacher Modal opens with single invitation mode active
Screenshot: 03_invite_modal_opened_single.png

Step 4: Test Single Teacher Invitation - Valid Email
1. Select "Teacher" role from dropdown
2. Enter valid email: single.teacher@example.com
3. Add optional custom message: "Welcome to our school team!"
4. Verify form validation shows email as valid
5. Check submit button becomes enabled
6. Click "Send Invitation" button
7. Monitor backend logs for API call to /accounts/teachers/invite_existing/
8. Verify success message appears
9. Check modal closes or shows success state

Expected: Single teacher invitation sent successfully with confirmation
Screenshot: 04_single_invitation_success.png

Step 5: Test Single Teacher Invitation - Invalid Email
1. Clear previous email input
2. Enter invalid email: invalid-email-format
3. Verify form validation shows error for invalid email
4. Check submit button remains disabled
5. Try to submit and verify prevention
6. Test other invalid formats: missing @, missing domain, etc.
7. Verify proper validation messaging

Expected: Invalid email properly validated with clear error messages
Screenshot: 05_single_invitation_validation.png

Step 6: Switch to Bulk Invitation Mode
1. In the invite modal, click "Bulk" or "Multiple" mode button
2. Verify UI switches to bulk invitation interface
3. Check textarea for multiple email input appears
4. Verify email counter shows 0 valid emails initially
5. Check role selection remains available for bulk
6. Verify custom message field available for all invitations

Expected: Modal successfully switches to bulk invitation mode
Screenshot: 06_bulk_invitation_mode.png

Step 7: Test Bulk Teacher Invitations - Valid Emails
1. In bulk textarea, enter multiple valid emails:
   bulk1@example.com
   bulk2@example.com, bulk3@example.com
2. Verify email counter updates correctly (shows 3 valid emails)
3. Select "Teacher" role for all invitations
4. Add custom message: "Welcome to our teaching team!"
5. Check submit button shows "Send 3 Invitations"
6. Click submit button
7. Monitor backend logs for bulk API call to /accounts/teachers/invite_bulk/
8. Verify progress indicator shows during processing
9. Check success summary displays results

Expected: Bulk invitations sent with progress tracking and success summary
Screenshot: 07_bulk_invitation_success.png

Step 8: Test Bulk Invitations - Mixed Valid/Invalid Emails
1. Clear bulk textarea
2. Enter mixed emails:
   valid1@example.com
   invalid-email
   valid2@example.com
   
3. Verify email counter shows only 2 valid emails
4. Check invalid emails are highlighted or noted
5. Submit bulk invitation
6. Verify only valid emails are processed
7. Check error handling for invalid emails

Expected: Only valid emails processed, invalid emails handled gracefully
Screenshot: 08_bulk_mixed_validation.png

Step 9: Test Bulk Invitations - Maximum Limit
1. Clear bulk textarea
2. Attempt to enter more than 50 emails (test limit)
3. Verify system prevents or warns about exceeding limit
4. Check error message about maximum 50 invitations
5. Test with exactly 50 emails if possible
6. Verify proper handling of bulk limits

Expected: Bulk invitation limits enforced with clear messaging
Screenshot: 09_bulk_limit_testing.png

Step 10: Verify Invitation Status Dashboard Updates
1. Close invite modal after successful invitations
2. Check InvitationStatusDashboard refreshes automatically
3. Verify new invitations appear in the list
4. Check invitation status shows as "PENDING" or "SENT"
5. Verify invitation details are correctly displayed
6. Check batch ID and creation timestamps
7. Verify email delivery status tracking

Expected: Dashboard updates with new invitations showing proper status
Screenshot: 10_dashboard_updated_invitations.png

Step 11: Test Dashboard Statistics and Metrics
1. Check statistics cards/summary at top of dashboard
2. Verify total invitation count updated
3. Check pending invitations count
4. Verify sent invitations count
5. Check other status metrics (accepted, expired, etc.)
6. Test statistics refresh with new invitations

Expected: Dashboard statistics accurately reflect current invitation state
Screenshot: 11_dashboard_statistics.png

Step 12: Test Dashboard Search and Filtering
1. Use search box to search for specific email
2. Verify search filters invitation list correctly
3. Test status filter dropdown (if available)
4. Filter by invitation status (pending, sent, accepted, etc.)
5. Test role filter for teacher vs admin invitations
6. Verify filters can be combined
7. Test clear/reset filters functionality

Expected: Search and filtering work correctly with proper results
Screenshot: 12_dashboard_search_filtering.png

Step 13: Test Individual Invitation Actions
1. Locate an individual invitation in the dashboard list
2. Check available actions for each invitation
3. Test "Resend" invitation action if available
4. Test "Cancel" invitation action if available
5. Verify action confirmation dialogs
6. Check actions update invitation status appropriately
7. Monitor API calls for individual actions

Expected: Individual invitation actions work correctly with status updates
Screenshot: 13_individual_invitation_actions.png

Step 14: Test Dashboard Auto-Refresh and Polling
1. Enable auto-refresh if available in dashboard
2. Verify dashboard polls for status updates automatically
3. Check polling interval indicator (should show 30s intervals)
4. Test manual refresh button functionality
5. Verify real-time status updates work
6. Test disable auto-refresh functionality

Expected: Dashboard auto-refresh works correctly with proper indicators
Screenshot: 14_dashboard_auto_refresh.png

Step 15: Test Dashboard Pagination and Performance
1. If many invitations exist, test pagination controls
2. Navigate through different pages of invitations
3. Test page size controls if available
4. Verify pagination preserves filters and search
5. Check dashboard performance with larger invitation lists
6. Test loading states during pagination

Expected: Pagination works smoothly with preserved state and good performance
Screenshot: 15_dashboard_pagination.png

Step 16: Test Role-Based Invitation Permissions
1. Try inviting with different roles: teacher vs school_admin
2. Verify role selection affects invitation permissions
3. Check role description displays correctly
4. Test role validation and restrictions
5. Verify only appropriate roles available for selection

Expected: Role-based invitations work correctly with proper permissions
Screenshot: 16_role_based_invitations.png

Step 17: Test Custom Message Functionality
1. Test invitation with long custom message (near character limit)
2. Verify custom message character counter works
3. Test invitation without custom message
4. Check custom message appears in dashboard
5. Verify custom message limit enforcement (500 characters)

Expected: Custom messages work correctly with proper validation
Screenshot: 17_custom_message_functionality.png

Step 18: Test Error Handling and Recovery
1. Simulate network disconnection during invitation
2. Test server error handling (500 errors)
3. Verify proper error messages display
4. Test retry functionality for failed invitations
5. Check error recovery and user guidance

Expected: Errors handled gracefully with recovery options
Screenshot: 18_error_handling_recovery.png

Step 19: Test Email Delivery Status Tracking
1. Check email delivery status in invitation dashboard
2. Verify different delivery statuses are displayed
3. Test status updates from backend
4. Check delivery failure handling
5. Verify email bounce tracking if available

Expected: Email delivery status properly tracked and displayed
Screenshot: 19_email_delivery_tracking.png

Step 20: Test Complete Workflow Integration
1. Create invitation, track through status dashboard
2. Verify invitation appears correctly in recipient view
3. Test complete invitation lifecycle
4. Check integration between modal and dashboard
5. Verify all components work together seamlessly

Expected: Complete workflow functions as integrated system
Screenshot: 20_complete_workflow_integration.png

=== PASS/FAIL CRITERIA ===

PASS: School admin can successfully invite teachers (single and bulk), manage invitations through dashboard, and track invitation status with all features functional
FAIL: Any core invitation functionality fails, dashboard not working, or critical features missing

Individual Step Criteria:
- Step 1: PASS if admin authenticated with dashboard access, FAIL if authentication or access issues
- Step 2: PASS if invitation section accessible, FAIL if missing or broken
- Step 3: PASS if invite modal opens correctly, FAIL if modal broken or missing fields
- Step 4: PASS if single invitation works, FAIL if API call fails or no confirmation
- Step 5: PASS if validation works properly, FAIL if invalid emails accepted
- Step 6: PASS if bulk mode switch works, FAIL if UI doesn't switch or broken
- Step 7: PASS if bulk invitations successful, FAIL if bulk API fails
- Step 8: PASS if mixed validation works, FAIL if invalid emails processed
- Step 9: PASS if limits enforced, FAIL if limits not working
- Step 10: PASS if dashboard updates, FAIL if no update or incorrect display
- Step 11: PASS if statistics accurate, FAIL if counts wrong or missing
- Step 12: PASS if search/filtering works, FAIL if filters broken
- Step 13: PASS if individual actions work, FAIL if actions not functional
- Step 14: PASS if auto-refresh works, FAIL if polling broken
- Step 15: PASS if pagination smooth, FAIL if pagination broken
- Step 16: PASS if roles work correctly, FAIL if role issues
- Step 17: PASS if custom messages work, FAIL if message functionality broken
- Step 18: PASS if errors handled well, FAIL if poor error handling
- Step 19: PASS if delivery tracking works, FAIL if status not tracked
- Step 20: PASS if complete integration works, FAIL if workflow broken

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Modal opens smoothly within 1 second
- Form validation provides immediate feedback
- Progress indicators show during processing
- Success/error messages are clear and actionable
- Dashboard updates reflect changes immediately
- Search and filtering provide instant results
- Bulk processing shows clear progress
- Email validation is comprehensive and helpful
- Role selection is clear with descriptions
- All buttons provide proper visual feedback
- Loading states are smooth and informative
- Error states offer recovery options