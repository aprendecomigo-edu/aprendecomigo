QA Test Case: Student Directory Search and Filter Functionality

Test ID: STUDENT-002
Test Name: Student Directory Search and Filter Functionality
Purpose: Verify that the student directory shows all enrolled students with comprehensive search and filter capabilities including real-time search, status filtering, and educational system filtering
Expected Result: Student directory displays correctly with responsive search and filtering that updates results in real-time

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Test Focus: StudentListTable component with search and filtering functionality

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo  
2. Python Virtual Environment: .venv/ in project root
3. Development servers: `make dev` (starts both backend and frontend)

Test Data:
- Test Email: anapmc.carvalho@gmail.com (school manager/owner account)
- Pre-existing students needed (create via STUDENT-001 test if needed):
  1. "Maria Silva Santos" - 8º ano - Sistema Português - Active
  2. "João Pedro Costa" - 10º ano - Sistema Português - Active  
  3. "Ana Beatriz Lima" - 6º ano - Sistema Internacional - Inactive
  4. "Carlos Eduardo Ferreira" - 12º ano - Sistema Português - Graduated
  5. "Sofia Isabella Rodrigues" - 9º ano - Sistema Internacional - Active

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

1. Start development servers
2. Navigate to http://localhost:8081
3. Sign in with test email: anapmc.carvalho@gmail.com
4. Complete authentication flow
5. Navigate to Users → Alunos tab

Expected: Authentication successful and Students tab loads
Screenshot: 01_students_directory_loaded.png

Step 2: Verify Initial Student Directory Display
1. Examine the student directory interface
2. Verify all components are present:
   - Title "Lista de Alunos" with count
   - Search bar with search icon
   - "Filtros" button (with count if active)
   - "Adicionar Aluno" and "Importar CSV" buttons
   - Student table with headers: Nome, Ano, Sistema, Status, Ações
3. Verify students are displayed in table format
4. Check that total count matches displayed students

Expected: Complete student directory interface with all students displayed
Required interface elements:
- Search input with magnifying glass icon
- Filters button with expand/collapse functionality
- Table headers: Nome, Ano, Sistema, Status, Ações
- Student rows with proper data display
- Load more button if pagination is active
Screenshot: 02_directory_interface_complete.png

Step 3: Test Real-Time Search Functionality - Name Search
1. Click in the search input field
2. Type "Maria" (partial name search)
3. Wait 500ms for debounced search
4. Verify results update automatically
5. Confirm only "Maria Silva Santos" appears in results
6. Clear search and verify all students return

Expected: Search updates results in real-time, showing only matching students
Screenshot: 03_search_by_name_working.png

Step 4: Test Search by Email
1. In search field, type "joao" 
2. Wait for debounced search (500ms)
3. Verify "João Pedro Costa" appears if email contains "joao"
4. Clear and try searching by full email domain "@exemplo.com"
5. Verify multiple students with that domain appear

Expected: Search works for both name and email, case-insensitive
Screenshot: 04_search_by_email_working.png

Step 5: Test Advanced Filters Panel
1. Click "Filtros" button to expand filter panel
2. Verify filter panel opens with:
   - Status dropdown (Todos os status, Ativo, Inativo, Formado)
   - Sistema Educacional dropdown (all available systems)
   - Ano Escolar dropdown (1º ano through 12º ano)
   - "Limpar Filtros" button
3. Verify filter count appears next to "Filtros" when filters applied

Expected: Filter panel opens with all filtering options available
Screenshot: 05_filters_panel_opened.png

Step 6: Test Status Filtering
1. With filters panel open, click Status dropdown
2. Select "Ativo" status
3. Verify only active students appear in results
4. Check that "Filtros (1)" shows one active filter
5. Change to "Inativo" and verify only inactive students appear
6. Change to "Formado" and verify only graduated students appear

Expected: Status filtering works correctly, updating results immediately
Students should be filtered by:
- Ativo: Shows students with "Ativo" status badge (green)
- Inativo: Shows students with "Inativo" status badge (yellow)  
- Formado: Shows students with "Formado" status badge (blue)
Screenshot: 06_status_filtering_working.png

Step 7: Test Educational System Filtering
1. Select "Sistema Português" from educational system dropdown
2. Verify only students with Portuguese system appear
3. Note filter count updates to include this filter
4. Change to "Sistema Internacional" 
5. Verify only international system students appear

Expected: Educational system filtering works correctly
Screenshot: 07_educational_system_filtering.png

Step 8: Test School Year Filtering
1. Select "8º ano" from school year dropdown
2. Verify only 8th grade students appear
3. Change to "10º ano"
4. Verify only 10th grade students appear
5. Check that filter combinations work together

Expected: School year filtering works correctly, can combine with other filters
Screenshot: 08_school_year_filtering.png

Step 9: Test Multiple Filter Combinations
1. Apply combination of filters:
   - Status: "Ativo"
   - Sistema Educacional: "Sistema Português" 
   - Ano Escolar: "8º ano"
2. Verify only students matching ALL criteria appear
3. Check filter count shows "Filtros (3)"
4. Test different combinations of 2 filters

Expected: Multiple filters work together with AND logic
Screenshot: 09_multiple_filters_combined.png

Step 10: Test Clear Filters Functionality
1. With multiple filters applied, click "Limpar Filtros"
2. Verify all filters reset to default values
3. Confirm all students return to the list
4. Check that "Filtros" button no longer shows count

Expected: Clear filters resets all filters and shows all students
Screenshot: 10_filters_cleared.png

Step 11: Test Search and Filter Combination
1. Apply search term "Silva"
2. Apply status filter "Ativo"
3. Verify results show only active students with "Silva" in name/email
4. Clear search but keep filter - verify filter remains active
5. Clear filter but keep search - verify search remains active

Expected: Search and filters work independently and in combination
Screenshot: 11_search_filter_combination.png

Step 12: Test Sorting Functionality
1. Click on "Nome" column header to sort by name
2. Verify sort icon appears (up/down arrow)
3. Click again to reverse sort order
4. Test sorting on "Ano" column header
5. Verify sorting works with active filters/search

Expected: Column sorting works with visual indicators
Sortable columns should be:
- Nome (user__name field)
- Ano (school_year field)
Screenshot: 12_sorting_functionality.png

Step 13: Test Empty State Handling
1. Apply filters that return no results (e.g., search for "NonExistentStudent")
2. Verify empty state displays properly with:
   - Users icon
   - "Nenhum aluno encontrado" message
   - "Tente ajustar os filtros para encontrar alunos." text
   - "Limpar Filtros" button when filters are active
3. Test empty state when no students exist (if applicable)

Expected: Professional empty state handling with clear guidance
Screenshot: 13_empty_state_handling.png

Step 14: Test Pagination and Load More
1. If more than 20 students exist, verify "Carregar Mais" button appears
2. Click "Carregar Mais" button
3. Verify additional students load
4. Test that search/filter work with pagination
5. Verify loading states during load more operations

Expected: Pagination works smoothly with search and filters
Screenshot: 14_pagination_load_more.png

Step 15: Test Performance and Responsiveness
1. Apply and remove filters rapidly
2. Type quickly in search field
3. Verify debounced search (no excessive API calls)
4. Check browser Network tab for API call patterns
5. Verify UI remains responsive during operations

Expected: Interface remains responsive, search is properly debounced
Screenshot: 15_performance_testing.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND all of the following conditions are met:
- Student directory displays all enrolled students correctly
- Real-time search works for both name and email (case-insensitive)
- Search is properly debounced (500ms delay)
- Filter panel opens/closes properly with all filter options
- Status filtering works for Active, Inactive, and Graduated states
- Educational system filtering works correctly
- School year filtering works correctly  
- Multiple filters can be combined with AND logic
- Clear filters functionality resets all filters
- Search and filters work independently and in combination
- Column sorting works with visual indicators
- Empty state is handled professionally with clear messaging
- Pagination/load more works correctly if applicable
- Interface remains responsive during all operations
- API calls are optimized (no excessive requests)

FAIL: Any step fails OR any of the following issues occur:
- Student directory fails to load or shows incorrect data
- Search functionality is broken or doesn't work in real-time
- Search is not debounced (excessive API calls)
- Filter panel doesn't open or missing filter options
- Any individual filter doesn't work correctly
- Multiple filters don't combine properly
- Clear filters doesn't reset all filters
- Search and filters interfere with each other
- Column sorting is broken or missing visual indicators
- Empty state is missing or unprofessional
- Pagination issues or load more failures
- Interface becomes unresponsive during operations
- Excessive or unnecessary API calls
- Console errors during any filtering/search operations
- UI glitches or layout issues

Individual Step Criteria:
- Step 1-2: PASS if directory loads with complete interface
- Step 3-4: PASS if real-time search works for name and email
- Step 5: PASS if filter panel opens with all options
- Step 6-8: PASS if individual filters work correctly
- Step 9: PASS if multiple filters combine properly
- Step 10: PASS if clear filters resets everything
- Step 11: PASS if search and filters work together
- Step 12: PASS if column sorting works with indicators
- Step 13: PASS if empty states are handled professionally
- Step 14: PASS if pagination works correctly
- Step 15: PASS if performance is acceptable

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Search has 500ms debounce to prevent excessive API calls
- Filter changes update results immediately
- Visual indicators show active filters and sort direction
- Loading states appear during API operations
- Empty states provide clear guidance to users
- Interface remains responsive during all operations
- No visual glitches or layout shifts during filtering
- Professional handling of all edge cases