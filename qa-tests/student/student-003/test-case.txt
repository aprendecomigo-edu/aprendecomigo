QA Test Case: Individual Student Profile Pages with Edit Capabilities

Test ID: STUDENT-003
Test Name: Individual Student Profile Pages with Edit Capabilities
Purpose: Verify that individual student profile pages display correctly with all information and allow comprehensive editing of student details through intuitive interface
Expected Result: Student profile pages load correctly, display all information properly, and allow seamless editing with proper validation and saving

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Test Focus: Individual student profile pages at /students/[id] with edit functionality

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Development servers: `make dev` (starts both backend and frontend)

Test Data:
- Test Email: anapmc.carvalho@gmail.com (school manager/owner account)
- Pre-existing student needed (from STUDENT-001 test):
  - Name: "Maria Silva Santos"
  - Email: "maria.silva.test@exemplo.com"
  - Phone: "+351912345678"
  - Grade Level: "8º ano"
  - Educational System: "Sistema Português"
  - Birth Date: "2010-05-15"
  - Address: "Rua da Escola, 123, Lisboa"
  - Status: "Active"
- Parent Contact Data for Testing:
  - Name: "Carlos Silva Santos"
  - Email: "carlos.santos@exemplo.com"
  - Phone: "+351923456789"
  - Relationship: "father"

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Navigation to Student List
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

1. Start development servers
2. Navigate to http://localhost:8081
3. Sign in with test email: anapmc.carvalho@gmail.com
4. Navigate to Users → Alunos tab
5. Verify student list loads with test student "Maria Silva Santos"

Expected: Authentication successful and student list displays
Screenshot: 01_student_list_loaded.png

Step 2: Navigate to Individual Student Profile
1. Locate "Maria Silva Santos" in the student list
2. Click on the three-dot menu (MoreVertical icon) for the student
3. Verify actionsheet opens with options:
   - Ver Perfil (Eye icon)
   - Editar (Edit icon)
   - Status change options
   - Excluir (Trash2 icon)
4. Click "Ver Perfil" option

Expected: Actionsheet opens with all expected options
Screenshot: 02_student_actionsheet_opened.png

Step 3: Verify Student Profile Page Loads
1. Verify navigation to /students/[id] URL
2. Check that profile page loads completely
3. Verify breadcrumb navigation shows "Voltar para Lista"
4. Verify main profile header displays:
   - Student avatar (User icon in circle)
   - Student name: "Maria Silva Santos"
   - Student email: "maria.silva.test@exemplo.com"
   - Status badge: "Ativo" (green)
   - "Editar" button

Expected: Profile page loads with complete header information
Screenshot: 03_student_profile_loaded.png

Step 4: Verify Student Information Card Display
1. Examine "Informações do Aluno" card
2. Verify all student information displays correctly:
   - Nome: "Maria Silva Santos"
   - Email: "maria.silva.test@exemplo.com"
   - Telefone: "+351912345678"
   - Ano Escolar: "8º ano"
   - Sistema Educacional: "Sistema Português"
   - Data de Nascimento: "15/05/2010" (formatted)
   - Endereço: "Rua da Escola, 123, Lisboa"

Expected: All student information displays correctly in readable format
Screenshot: 04_student_info_card_display.png

Step 5: Verify Parent Contact Information Card
1. Examine "Contato dos Pais/Responsáveis" card
2. If parent contact exists, verify display of:
   - Nome: parent name
   - Email: parent email
   - Telefone: parent phone
   - Relação: relationship (Pai/Mãe/Responsável Legal/Outro)
3. If no parent contact, verify empty state displays:
   - Users icon
   - "Nenhum contato de responsável registrado" message

Expected: Parent contact card displays correctly (with data or empty state)
Screenshot: 05_parent_contact_card_display.png

Step 6: Enter Edit Mode via Header Button  
1. Click "Editar" button in profile header
2. Verify page enters edit mode with changes:
   - Header shows "Cancelar" and "Salvar" buttons
   - "Editar" button is replaced
   - Form fields become editable inputs
   - All current values are populated in edit fields

Expected: Page smoothly transitions to edit mode with all fields editable
Screenshot: 06_edit_mode_activated.png

Step 7: Verify Edit Form Fields in Student Information
1. Verify all student information fields are now editable:
   - Nome Completo: text input with User icon, current value populated
   - Email: email input with Mail icon, current value populated  
   - Telefone: phone input with Phone icon, current value populated
   - Ano Escolar: select dropdown with GraduationCap icon, current value selected
   - Sistema Educacional: select dropdown, current value selected
   - Data de Nascimento: date input with Calendar icon, current value populated
   - Endereço: text input with MapPin icon, current value populated
   - Status: select dropdown with current status selected

Expected: All information fields are editable with proper input types and icons
Screenshot: 07_edit_form_fields_verified.png

Step 8: Verify Edit Form Fields in Parent Contact
1. Verify parent contact section is editable:
   - Nome do Responsável: text input
   - Email do Responsável: email input  
   - Telefone do Responsável: phone input
   - Relação: select dropdown (Pai, Mãe, Responsável Legal, Outro)
2. If no parent contact exists, verify empty fields ready for input

Expected: Parent contact fields are editable with proper validation
Screenshot: 08_parent_contact_edit_fields.png

Step 9: Test Form Validation in Edit Mode
1. Clear the "Nome Completo" field
2. Try to save with empty required field
3. Verify validation prevents saving
4. Clear email field and enter invalid email format
5. Try to save and verify email validation
6. Restore valid values

Expected: Form validation works in edit mode, preventing invalid submissions
Screenshot: 09_edit_form_validation.png

Step 10: Test Successful Edit and Save
1. Modify several fields:
   - Nome Completo: "Maria Silva Santos Updated"
   - Telefone: "+351987654321"
   - Endereço: "Avenida da Liberdade, 456, Lisboa"
   - Add parent contact:
     - Nome do Responsável: "Carlos Silva Santos"
     - Email do Responsável: "carlos.santos@exemplo.com"
     - Telefone do Responsável: "+351923456789"
     - Relação: "Pai"
2. Click "Salvar" button
3. Verify loading state appears
4. Monitor for success notification
5. Verify page exits edit mode automatically

Expected: 
- Save button shows loading state during API call
- Success notification appears
- Page returns to view mode with updated information
- All changes are reflected in the display
Screenshot: 10_successful_edit_save.png

Step 11: Verify Updated Information Persists
1. Verify updated information displays in view mode:
   - Nome: "Maria Silva Santos Updated"
   - Telefone: "+351987654321"  
   - Endereço: "Avenida da Liberdade, 456, Lisboa"
2. Verify parent contact information now displays:
   - Nome: "Carlos Silva Santos"
   - Email: "carlos.santos@exemplo.com"
   - Telefone: "+351923456789"
   - Relação: "Pai"
3. Refresh page and verify changes persist

Expected: All updated information displays correctly and persists after refresh
Screenshot: 11_updated_info_verified.png

Step 12: Test Cancel Edit Functionality
1. Click "Editar" to enter edit mode again
2. Make some changes to fields (don't save)
3. Click "Cancelar" button
4. Verify changes are discarded and original values restored
5. Confirm page returns to view mode

Expected: Cancel properly discards changes and restores original values
Screenshot: 12_cancel_edit_functionality.png

Step 13: Test Direct Edit URL Access
1. Note the current student ID from URL
2. Navigate directly to /students/[id]?edit=true
3. Verify page loads directly in edit mode
4. Make a small change and save successfully

Expected: Direct edit URL access works and loads page in edit mode
Screenshot: 13_direct_edit_url_access.png

Step 14: Test Back Navigation
1. From student profile page, click "Voltar para Lista" breadcrumb
2. Verify navigation returns to student list
3. Navigate back to profile using different method (direct URL)
4. Verify browser back button works correctly

Expected: Navigation works correctly in all directions
Screenshot: 14_navigation_functionality.png

Step 15: Test Error Handling Scenarios
1. Simulate network error (disconnect internet briefly)
2. Try to save changes during network issues
3. Verify appropriate error handling
4. Restore network and retry save
5. Test with invalid student ID in URL (e.g., /students/99999)

Expected: 
- Network errors show appropriate error messages
- Invalid student ID shows "Aluno não encontrado" error page
- Error recovery works when network is restored
Screenshot: 15_error_handling_tested.png

Step 16: Verify Backend API Integration
1. Open browser developer tools Network tab
2. Make and save edit changes
3. Verify proper API calls:
   - GET request to load student data
   - PUT/PATCH request to update student data
   - Proper request/response formats
   - 200 OK response on successful update
4. Check for any console errors

Expected: 
- Proper REST API integration
- Clean request/response cycle
- No console errors
- Appropriate HTTP status codes
Screenshot: 16_api_integration_verified.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND all of the following conditions are met:
- Student profile page loads correctly with all information displayed
- Navigation to profile works from student list actionsheet
- Profile header displays student info and status badge correctly
- Student information card shows all fields in readable format
- Parent contact card displays correctly (with data or empty state)
- Edit mode can be entered and exited smoothly
- All form fields become editable in edit mode with proper input types
- Form validation works correctly in edit mode
- Changes can be saved successfully with proper API integration
- Updated information displays and persists correctly
- Cancel functionality properly discards changes
- Direct edit URL access works correctly
- Navigation (back/forward) works properly
- Error handling works for network issues and invalid data
- Backend API integration is successful with proper HTTP methods

FAIL: Any step fails OR any of the following issues occur:
- Student profile page fails to load or shows incorrect information
- Navigation to profile is broken or inconsistent
- Profile header is missing information or status badge incorrect
- Student information card has missing or incorrectly formatted data
- Parent contact card functionality is broken
- Edit mode doesn't activate properly or form fields aren't editable
- Form validation is missing or doesn't work correctly
- Save functionality fails or doesn't update information
- Updated information doesn't display or persist correctly
- Cancel functionality doesn't properly discard changes
- Direct edit URL access is broken
- Navigation issues (broken back button, etc.)
- Poor error handling for network issues or invalid data
- Backend API integration failures or incorrect HTTP methods
- Console errors during any profile operations
- UI glitches, broken layouts, or unresponsive elements

Individual Step Criteria:
- Step 1-3: PASS if navigation to profile works correctly
- Step 4-5: PASS if profile displays all information correctly
- Step 6-8: PASS if edit mode activates with proper form fields
- Step 9: PASS if form validation works in edit mode
- Step 10-11: PASS if changes save successfully and persist
- Step 12-13: PASS if cancel and direct URL access work
- Step 14: PASS if navigation works in all directions
- Step 15-16: PASS if error handling and API integration work

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Smooth transitions between view and edit modes
- Loading states during save operations prevent double-submission
- Clear visual distinction between view and edit states
- Form fields maintain proper focus and accessibility
- Success/error feedback is immediate and clear
- Breadcrumb navigation is intuitive and functional
- All information is displayed in user-friendly formats
- Parent contact section handles both empty and populated states gracefully