QA Test Case: Student Status Management Active Inactive Graduated

Test ID: STUDENT-006
Test Name: Student Status Management with Visual Indicators
Purpose: Verify student status management functionality with visual indicators for active, inactive, and graduated states, including status changes and proper display across all interfaces
Expected Result: Status management works correctly with clear visual indicators and seamless status transitions

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Test Focus: Student status management with badge indicators and actionsheet controls

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Development servers: `make dev` (starts both backend and frontend)

Test Data:
- Test Email: anapmc.carvalho@gmail.com (school manager/owner account)
- Test students with different statuses:
  - Active Student: "Maria Silva Santos" - Status: Active
  - Inactive Student: "João Pedro Costa" - Status: Inactive  
  - Graduated Student: "Ana Beatriz Lima" - Status: Graduated

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Navigate to Students List
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

1. Start development servers
2. Navigate to http://localhost:8081
3. Sign in with test email: anapmc.carvalho@gmail.com
4. Navigate to Users → Alunos tab
5. Verify student list loads with existing students

Expected: Students list loads with status badges visible
Screenshot: 01_students_list_with_status_badges.png

Step 2: Verify Status Badge Visual Indicators
1. Examine status badges for different students
2. Verify visual consistency:
   - Active status: Green badge with "Ativo" text
   - Inactive status: Yellow/orange badge with "Inativo" text
   - Graduated status: Blue badge with "Formado" text
3. Check badge colors match COLORS constants:
   - Active: #10B981 (success green)
   - Inactive: #F59E0B (warning yellow)
   - Graduated: #156082 (primary blue)

Expected: Status badges display with correct colors and text
Required visual elements:
- Green "Ativo" badge for active students
- Yellow "Inativo" badge for inactive students  
- Blue "Formado" badge for graduated students
Screenshot: 02_status_badge_visual_verification.png

Step 3: Test Status Change via Actionsheet - Active to Inactive
1. Find an active student in the list
2. Click the three-dot menu (MoreVertical icon)
3. Verify actionsheet opens with status options:
   - "Marcar como Inativo" (UserX icon, yellow)
   - "Marcar como Formado" (GraduationCap icon, blue)
   - Other options should be present (Ver Perfil, Editar, Excluir)
4. Click "Marcar como Inativo"
5. Verify status change occurs immediately

Expected: 
- Actionsheet shows appropriate status change options
- Status changes immediately without page refresh
- Success notification appears
- Badge updates to yellow "Inativo"
Screenshot: 03_active_to_inactive_status_change.png

Step 4: Test Status Change - Inactive to Active
1. Find the student just marked as inactive
2. Click three-dot menu to open actionsheet
3. Verify "Marcar como Ativo" option appears (UserCheck icon, green)
4. Click "Marcar como Ativo"
5. Verify status changes back to active immediately

Expected:
- "Marcar como Ativo" option available for inactive students
- Status changes to green "Ativo" badge
- Change is immediate with success notification
Screenshot: 04_inactive_to_active_status_change.png

Step 5: Test Status Change - Active to Graduated
1. Select an active student
2. Open actionsheet menu
3. Click "Marcar como Formado"
4. Verify status changes to graduated
5. Check that graduated badge appears correctly

Expected:
- Status changes to blue "Formado" badge
- Change is immediate and visually clear
Screenshot: 05_active_to_graduated_status_change.png

Step 6: Test Status Change - Graduated Student Options
1. Find a graduated student in the list
2. Open actionsheet for graduated student
3. Verify appropriate options are available:
   - "Marcar como Ativo" (to reactivate)
   - "Marcar como Inativo" (if needed)
   - Other standard options (Ver Perfil, Editar, Excluir)
4. Test changing graduated student back to active

Expected: Graduated students can be changed to other statuses appropriately
Screenshot: 06_graduated_student_status_options.png

Step 7: Test Status Filter Integration
1. Open filters panel in student list
2. Test status filter with each status:
   - Select "Ativo" and verify only active students appear
   - Select "Inativo" and verify only inactive students appear
   - Select "Formado" and verify only graduated students appear
3. Verify filter results match status badges

Expected: Status filtering works correctly and matches badge displays
Screenshot: 07_status_filter_integration.png

Step 8: Test Status in Student Profile View
1. Navigate to a student's profile page
2. Verify status badge displays in profile header
3. Check status badge consistency with list view
4. Enter edit mode and verify status can be edited
5. Test changing status via profile edit

Expected: Status displays consistently in profile view and can be edited
Screenshot: 08_status_in_profile_view.png

Step 9: Test Status Change Success Notifications
1. Change student status from active to inactive
2. Verify success notification appears with message:
   "Status do aluno atualizado com sucesso"
3. Test different status changes and verify notifications
4. Check notification timing and auto-dismiss behavior

Expected: Clear success notifications for all status changes
Screenshot: 09_status_change_notifications.png

Step 10: Test Status Change Error Handling
1. Simulate network disconnection
2. Attempt to change student status
3. Verify appropriate error handling:
   - Error notification appears
   - Status reverts to original if change fails
   - User can retry after network restoration
4. Test error recovery mechanisms

Expected: Graceful error handling with appropriate user feedback
Screenshot: 10_status_change_error_handling.png

Step 11: Test Bulk Status Changes (if supported)
1. Check if multiple students can have status changed together
2. Select multiple students (if selection feature exists)
3. Test bulk status change operations
4. Verify all selected students update correctly
5. Check for bulk operation feedback

Expected: Bulk status changes work correctly (if feature exists)
Screenshot: 11_bulk_status_changes.png

Step 12: Test Status Persistence and Page Refresh
1. Change several students' statuses
2. Refresh the page
3. Verify all status changes persist
4. Navigate away and back to verify persistence
5. Check that status changes are saved to backend

Expected: Status changes persist across page refreshes and navigation
Screenshot: 12_status_persistence_verification.png

Step 13: Test Status in Search Results
1. Use search function to find specific students
2. Verify status badges appear correctly in search results
3. Test status changes on searched students
4. Verify search results update with new status

Expected: Status badges work correctly in search results
Screenshot: 13_status_in_search_results.png

Step 14: Test Status Accessibility and Color Blindness
1. Verify status badges have text labels (not just colors)
2. Check contrast ratios for accessibility
3. Test with browser color blindness simulation (if available)
4. Verify status is identifiable without color alone

Expected: Status is accessible to users with color vision deficiencies
Screenshot: 14_status_accessibility_testing.png

Step 15: Test API Integration for Status Changes
1. Open browser developer tools Network tab
2. Change student status
3. Monitor API calls:
   - PATCH/PUT request to update student status
   - Correct request payload with new status
   - 200 OK response from server
4. Verify no console errors during status changes

Expected:
- Proper REST API calls for status updates
- Correct HTTP methods and response codes
- Clean request/response cycle
Screenshot: 15_status_api_integration.png

Step 16: Test Status Edge Cases
1. Test status changes for students with parent contacts
2. Verify status changes don't affect other student data
3. Test rapid status changes (click multiple times quickly)
4. Verify status change prevention during loading states
5. Test status display with very long names or emails

Expected: Status changes handle edge cases gracefully
Screenshot: 16_status_edge_cases.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND all of the following conditions are met:
- Status badges display with correct colors and text for all three states
- Visual indicators are consistent across all interfaces (list, profile, search)
- Status changes work correctly through actionsheet menus
- All status transitions are possible (active↔inactive↔graduated)
- Status filter integration works correctly with badge displays
- Status changes provide immediate visual feedback
- Success notifications appear for successful status changes
- Error handling works gracefully with appropriate user feedback
- Status changes persist across page refreshes and navigation
- API integration works correctly with proper HTTP methods
- Status accessibility works for color vision deficiencies
- Edge cases are handled appropriately

FAIL: Any step fails OR any of the following issues occur:
- Status badges display incorrect colors or missing text
- Visual inconsistencies between different interfaces
- Status changes don't work or provide incorrect feedback
- Missing status transition options in actionsheet
- Status filter doesn't match badge displays
- Status changes don't provide immediate visual feedback
- Missing or incorrect success/error notifications
- Poor error handling for network issues
- Status changes don't persist correctly
- API integration failures or incorrect HTTP methods
- Status badges fail accessibility requirements
- Edge cases cause errors or broken functionality
- Console errors during status change operations
- UI glitches or layout issues with status badges

Individual Step Criteria:
- Step 1-2: PASS if status badges display correctly with proper colors
- Step 3-6: PASS if all status transitions work through actionsheet
- Step 7-8: PASS if status integration works in filtering and profiles
- Step 9-10: PASS if notifications and error handling work properly
- Step 11-12: PASS if bulk operations (if any) and persistence work
- Step 13-14: PASS if status works in search and meets accessibility needs
- Step 15-16: PASS if API integration and edge cases work correctly

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Status badges are immediately visible and clearly distinguishable
- Status changes provide instant visual feedback without page refresh
- Loading states prevent multiple simultaneous status changes
- Success/error notifications are clear and appropriately timed
- Status options in actionsheet are contextually appropriate
- Visual design maintains consistency across all components
- Status information is accessible to users with disabilities