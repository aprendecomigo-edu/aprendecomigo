QA Test Case: Backend Activity Feed API Testing

Test ID: DASH-002
Test Name: Backend Activity Feed API Pagination and Filtering
Purpose: Verify that the school activity feed API endpoint works correctly with pagination, filtering, and returns proper activity data
Expected Result: API returns paginated activity feed with correct filtering options and proper data structure

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational Platform
- Architecture: Django REST API backend with PostgreSQL database
- Authentication: JWT token-based authentication

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: make dev
4. View server logs: make logs

Test Data:
- Test Email: anapmc.carvalho@gmail.com (school admin/owner)
- School ID: 1 (default test school)
- User Role: school_owner or school_admin

API Endpoint Under Test:
- GET /api/accounts/schools/{id}/activity/
- Query Parameters: page, page_size, activity_types, date_from, date_to
- Expected Response: Paginated list of SchoolActivity objects

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Get JWT token using authentication process from DASH-001:
  # Request verification code and verify to get JWT token

Expected: Servers running and JWT token obtained
Screenshot: 01_setup_and_authentication.png

Step 2: Test Basic Activity Feed Request
Commands:
  curl -X GET http://localhost:8000/api/accounts/schools/1/activity/ \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"

Expected: HTTP 200 with paginated activity list
Screenshot: 02_basic_activity_feed_request.png

Step 3: Validate Response Structure
Check the JSON response contains:
- count: total number of activities
- next: URL for next page (if applicable)
- previous: URL for previous page (if applicable)
- results: array of activity objects

Each activity object should have:
- id: UUID
- activity_type: one of the defined types
- timestamp: ISO datetime
- actor: user object with id, name, email, role
- target: object with type, id, name
- metadata: additional data
- description: human-readable description

Expected: All required fields present with correct structure
Screenshot: 03_response_structure_validation.png

Step 4: Test Pagination Parameters
Commands:
  # Test page size limit
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?page_size=5" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"
    
  # Test second page
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?page=2" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"
    
  # Test large page size (should be capped at 100)
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?page_size=200" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"

Expected: Proper pagination behavior and size limits enforced
Screenshot: 04_pagination_testing.png

Step 5: Test Activity Type Filtering
Commands:
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?activity_types=invitation_sent,student_joined" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"

Expected: Only activities matching specified types returned
Screenshot: 05_activity_type_filtering.png

Step 6: Test Date Range Filtering
Commands:
  # Get activities from last 7 days
  DATE_7_DAYS_AGO=$(date -d '7 days ago' '+%Y-%m-%dT%H:%M:%SZ')
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?date_from=${DATE_7_DAYS_AGO}" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"
    
  # Get activities from specific date range
  DATE_FROM=$(date -d '30 days ago' '+%Y-%m-%dT%H:%M:%SZ')
  DATE_TO=$(date -d '7 days ago' '+%Y-%m-%dT%H:%M:%SZ')
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?date_from=${DATE_FROM}&date_to=${DATE_TO}" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"

Expected: Activities filtered by date range correctly
Screenshot: 06_date_range_filtering.png

Step 7: Test Invalid Parameters
Commands:
  # Invalid activity type
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?activity_types=invalid_type" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"
    
  # Invalid date format
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?date_from=invalid-date" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"
    
  # Invalid page number
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?page=-1" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"

Expected: Proper error handling with appropriate HTTP status codes
Screenshot: 07_invalid_parameters_handling.png

Step 8: Test Performance with Large Dataset
Commands:
  # Request maximum page size
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?page_size=100" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN" \
    -w "Total time: %{time_total}s\n"

Expected: Response time reasonable even with max page size
Screenshot: 08_performance_large_dataset.png

Step 9: Test Authorization for Different Schools
Commands:
  # Try to access activities for different school ID
  curl -X GET http://localhost:8000/api/accounts/schools/999/activity/ \
    -H "Authorization: Bearer YOUR_JWT_TOKEN"

Expected: HTTP 403 Forbidden or HTTP 404 Not Found
Screenshot: 09_unauthorized_school_access.png

Step 10: Test Activity Ordering
Commands:
  curl -X GET "http://localhost:8000/api/accounts/schools/1/activity/?page_size=10" \
    -H "Authorization: Bearer YOUR_JWT_TOKEN" | \
    jq '.results[].timestamp'

Expected: Activities ordered by timestamp in descending order (newest first)
Screenshot: 10_activity_ordering_verification.png

Step 11: Check Database Query Efficiency
Commands:
  make logs

Monitor server logs during API requests to check for:
- Efficient database queries
- Proper use of select_related and prefetch_related
- No N+1 query problems

Expected: Optimized database queries in logs
Screenshot: 11_database_query_efficiency.png

=== PASS/FAIL CRITERIA ===

PASS: All conditions must be met
- Basic activity feed request returns 200 with proper structure ✓
- Pagination works correctly with page and page_size parameters ✓
- Page size properly limited to maximum of 100 ✓
- Activity type filtering works correctly ✓
- Date range filtering works correctly ✓
- Invalid parameters handled gracefully with proper error responses ✓
- Authorization prevents access to other schools' activities ✓
- Activities ordered by timestamp descending ✓
- Database queries are optimized (no N+1 problems) ✓
- Response times are reasonable (under 500ms for max page size) ✓

FAIL: Any condition fails
- API returns errors for valid requests ✗
- Pagination not working or missing ✗
- Page size limits not enforced ✗
- Filtering not working correctly ✗
- Invalid parameters not handled properly ✗
- Users can access other schools' activities ✗
- Activities not properly ordered ✗
- N+1 database query problems detected ✗

Individual Step Criteria:
- Step 1: PASS if servers start and authentication succeeds
- Step 2: PASS if basic request returns 200 with activity data
- Step 3: PASS if response structure matches expected schema
- Step 4: PASS if pagination parameters work correctly
- Step 5: PASS if activity type filtering works
- Step 6: PASS if date range filtering works
- Step 7: PASS if invalid parameters handled gracefully
- Step 8: PASS if performance is acceptable with large datasets
- Step 9: PASS if authorization prevents unauthorized access
- Step 10: PASS if activities ordered correctly by timestamp
- Step 11: PASS if database queries are optimized

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails