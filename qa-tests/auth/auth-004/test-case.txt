QA Test Case: Enhanced School Signup Flow with Manual School Name Entry

Test ID: AUTH-004
Test Name: Enhanced School Signup Flow with Manual School Name Entry
Purpose: Verify that schools/institutions can successfully complete the enhanced signup flow using URL parameters from the landing page, with manual school name entry, institutional visual indicators, and comprehensive account creation
Expected Result: School owner account is created with manually entered school name and complete institutional details, email verified, and user can access their school management dashboard

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend  
- Feature: Enhanced signup flows with user type selection (Issue #15 implementation)
- Authentication: Passwordless email verification with 6-digit codes
- Email Backend: Console backend (prints emails to server logs)
- Registration: Creates new school_owner account with manually entered school information

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Test Email: school.admin+$(date +%s)@example.com (unique email for each test)
- Alternative Test Email: escola.primaria@testdomain.com
- School Manager Name: "Dr. António Ferreira"
- School Name: "Escola Básica São João" (manually entered)
- School Address: "Rua das Flores, 123, 4000-001 Porto, Portugal"
- School Website: "https://escola-sao-joao.edu.pt"
- Phone Number: "+351 225 123 456"
- Expected User Role: school_owner (to be created)

Database Prerequisite:
- Ensure test email does NOT exist in database before starting
- Test should create entirely new user and school records
- School owner should be associated with manually entered school details

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend
  export DJANGO_ENV=development
  python manage.py runserver 127.0.0.1:8000 > /tmp/django_server.log 2>&1 &
  cd /Users/anapmc/Code/aprendecomigo/frontend-ui
  export EXPO_PUBLIC_ENV=development
  npm start > /tmp/frontend.log 2>&1 &

Expected: Both services start successfully
- Backend: http://127.0.0.1:8000/api/ responds with 401 for /api/ (normal auth error)
- Frontend: http://localhost:8081 shows loading screen then redirects to landing

Screenshot: 01-servers-started.png

Step 2: Navigate Through Landing Page to School Signup
1. Open browser to http://localhost:8081/
2. Verify automatic redirect to http://localhost:8081/landing
3. Verify landing page loads with user type options
4. Locate "School or Institution" card with school building icon
5. Verify school section shows institutional features:
   - "Multi-teacher management"
   - "Advanced role-based permissions"
   - "Institutional billing settings"
   - "Bulk student management"
   - "Enterprise-grade features"
6. Verify school card has standard styling (not primary blue like tutor)
7. Click "Register Your Institution" button

Expected Results:
- Landing page displays correctly with clear school option
- School card shows comprehensive institutional features
- Navigation to signup page occurs
- URL becomes http://localhost:8081/auth/signup?type=school

Screenshot: 02-landing-to-school-signup.png

Step 3: Verify School-Specific Signup Page Content
1. Verify URL parameter correctly passed: ?type=school
2. Check for school-specific visual indicators:
   - User type indicator showing "School/Institution" with school building icon
   - Green circular icon background for school type
   - Heading reads "Register Your School"
   - Subtitle: "Register your school or institution with Aprende Comigo"
3. Verify form sections are present:
   - "Personal Information" section
   - "School Information" section (not "Practice Information")
4. Verify school-specific messaging:
   - School name field shows "School Name" label
   - Helper text: "Only school name is required. You can add more details later."

Expected: Signup page displays school-specific content and visual indicators
Screenshot: 03-school-signup-page-loaded.png

Step 4: Fill Personal Information Section
1. Click in "Full Name" field
2. Type: Dr. António Ferreira
3. Click in "Email Address" field
4. Type: escola.primaria@testdomain.com
5. Click in "Phone Number" field
6. Type: +351 225 123 456
7. Verify phone number validation accepts Portuguese landline format
8. Test primary contact method selection:
   - Select "Phone" option
   - Verify helper text updates: "A verification code will be sent to your phone number"
   - Switch back to "Email" option
   - Verify helper text: "A verification code will be sent to your email address"

Expected: All personal information fields accept input correctly
- Phone validation accepts both mobile and landline Portuguese formats
- Primary contact selection dynamically updates helper text
Screenshot: 04-personal-information-filled.png

Step 5: Verify School Information Form Fields
1. Observe the "School Information" section
2. Verify required "School Name" field is present and editable
3. Verify optional fields are present:
   - "School Address (Optional)" - multiline input
   - "School Website (Optional)" - URL input
4. Verify field behaviors:
   - School name field is fully editable (not disabled like tutor practice name)
   - Address field allows multiple lines
   - Website field shows URL placeholder: "https://example.com"
5. Verify helper text: "Only school name is required. You can add more details later."

Expected: School-specific form fields are present and editable
- All school information fields are properly formatted
- Required vs optional fields clearly marked
Screenshot: 05-school-information-fields.png

Step 6: Fill School Information Section
1. Click in "School Name" field
2. Type: Escola Básica São João
3. Click in "School Address (Optional)" field
4. Type: Rua das Flores, 123
   (Press Enter for new line)
   4000-001 Porto, Portugal
5. Click in "School Website (Optional)" field
6. Type: https://escola-sao-joao.edu.pt
7. Verify URL validation accepts the website format
8. Verify multiline address display works correctly

Expected: All school information fields accept institutional data correctly
- Multiline address formatting works
- URL validation accepts valid website format
Screenshot: 06-school-information-filled.png

Step 7: Verify School-Specific Form Validation
1. Test school name validation:
   - Clear school name field
   - Attempt to submit form
   - Verify validation error: "School name is required"
   - Refill with "Escola Básica São João"
2. Test website URL validation:
   - Enter invalid URL: "not-a-url"
   - Verify validation error: "Please enter a valid URL"
   - Clear field (should be valid as optional)
   - Enter valid URL: "https://escola-sao-joao.edu.pt"
3. Verify optional fields can be left empty without validation errors

Expected: Form validation appropriate for school signup context
- Required school name validation works
- URL validation works for optional website field
- Optional fields don't trigger validation errors when empty
Screenshot: 07-school-form-validation.png

Step 8: Submit School Registration
1. Verify all required fields are filled:
   - Full Name: "Dr. António Ferreira"
   - Email: "escola.primaria@testdomain.com"
   - Phone: "+351 225 123 456"
   - Primary Contact: "Email" selected
   - School Name: "Escola Básica São João"
   - School Address: "Rua das Flores, 123\n4000-001 Porto, Portugal"
   - School Website: "https://escola-sao-joao.edu.pt"
2. Click "Create Account" button
3. Verify button shows loading state: "Creating Account..."
4. Wait for form submission to complete

Expected: Form submits successfully with all school information
- Loading state appears during submission
- No client-side validation errors
- Form handles multiline address and URL correctly
Screenshot: 08-school-registration-submitted.png

Step 9: Verify Navigation to Verification Page
Expected Results:
- Page navigates to verification code page
- URL becomes /auth/verify-code?contact=escola.primaria@testdomain.com&contactType=email
- Page shows "Verify Code" heading
- Shows text "Enter the verification code sent to escola.primaria@testdomain.com"
- Shows verification code input field
- Shows "Verify Code" and "Try Again" buttons
- Success toast appears: "Registration successful! Please verify your email."

Screenshot: 09-verification-page-loaded.png

Step 10: Extract Verification Code from Server Logs
Command: tail -30 /tmp/django_server.log

Look for email content containing:
"Your verification code is: XXXXXX"
"Welcome to Aprende Comigo" or similar institutional welcome message

Expected Log Content:
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Subject: Aprende Comigo - Verify Your Email
From: noreply@aprendecomigo.com
To: escola.primaria@testdomain.com
Date: [timestamp]

Welcome to Aprende Comigo!

Your verification code is: [6-digit code]

This code will expire in 5 minutes.

Step 11: Complete Email Verification for School
1. Click in verification code input field
2. Type the 6-digit code extracted from server logs
3. Click "Verify Code" button
4. Wait for verification processing

Expected:
- Code verification succeeds
- School owner account is created in database with all entered school details
- Success message appears: "Verification successful!"
- Navigation to school management dashboard

Step 12: Verify Successful School Account Creation
Expected Results:
- Page navigates to dashboard ("/")
- User sees school owner dashboard interface
- Welcome message for new school administrator
- Dashboard shows manually entered school name "Escola Básica São João"
- School management features are visible
- Success toast: "Verification successful!"

Screenshot: 10-school-dashboard-loaded.png

Step 13: Verify Backend Database State for School
Commands:
  tail -20 /tmp/django_server.log
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
from accounts.models import User, School
user = User.objects.get(email='escola.primaria@testdomain.com')
print(f'User: {user.email}, Name: {user.name}, Role: {user.role}')
school = School.objects.get(owner=user)
print(f'School: {school.name}')
print(f'School Address: {school.address}')
print(f'School Website: {school.website}')
print(f'School Owner: {school.owner.email}')
"

Expected Database State:
- User exists with email escola.primaria@testdomain.com
- User name is 'Dr. António Ferreira'
- User role is 'school_owner'
- User is_verified = True
- School exists with name "Escola Básica São João"
- School address contains the multiline address
- School website is "https://escola-sao-joao.edu.pt"
- School owner is the created school administrator user

Expected Log Entries:
INFO "POST /api/accounts/auth/register/ HTTP/1.1" 201 [response_size]
INFO "POST /api/accounts/auth/verify-email/ HTTP/1.1" 200 [response_size]
INFO "GET /api/accounts/users/dashboard_info/ HTTP/1.1" 200 [response_size]

Step 14: Test School Information Edge Cases (Optional Verification)
1. Navigate back to landing and start new school signup
2. Test with minimal required information:
   - Fill only required fields (personal info + school name)
   - Leave address and website empty
   - Verify registration works with minimal data
3. Test with special characters in school name:
   - "Colégio Dom João II - Ensino Básico e Secundário"
   - Verify special characters and accents are handled correctly
4. Test with very long school name (near character limit)
5. Test address field with various Portuguese address formats

Expected: School registration handles various data formats correctly
Screenshot: 11-school-edge-cases.png

Step 15: Verify School Management Features (Optional)
1. From school dashboard, verify institutional features are available:
   - Multi-teacher management options
   - Role-based permission settings
   - Institutional billing configurations
   - Bulk operations capabilities
2. Verify school information is displayed correctly throughout interface
3. Check that school context is maintained across different pages

Expected: School-specific features accessible to school owner
Screenshot: 12-school-management-features.png

Step 16: Verify Subsequent Login for School Owner (Optional)
1. Sign out from the application (if logout available)
2. Navigate to login page via landing page
3. Use the school email (escola.primaria@testdomain.com) to login
4. Complete verification process
5. Verify dashboard access shows school information correctly
6. Verify school management capabilities are preserved

Expected: School owner can successfully login with full school access
Screenshot: 13-school-subsequent-login.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND school owner account is created with manually entered school details AND all institutional information is preserved AND verification works AND school management dashboard is accessible

FAIL: Any of the following occurs:
- URL parameters not properly handled from landing page
- School-specific visual indicators missing or incorrect
- Manual school name entry doesn't work correctly
- Auto-generation functionality appears for schools (should not)
- Tutor-specific fields appear in school signup
- Optional school fields don't work properly
- Form validation inappropriate for school signup context
- Account creation fails or creates wrong user type
- School details not properly saved in database
- Multiline address or URL fields don't work correctly
- School management features not accessible

Individual Step Criteria:
- Step 1: PASS if both services start and respond, FAIL if either service fails
- Step 2: PASS if landing navigation works with correct URL params, FAIL if navigation broken or wrong URL
- Step 3: PASS if school-specific content displays correctly, FAIL if generic or tutor content
- Step 4: PASS if personal information form accepts all input correctly, FAIL if validation errors
- Step 5: PASS if school information fields are present and editable, FAIL if missing or disabled
- Step 6: PASS if all school information can be entered correctly, FAIL if input rejected
- Step 7: PASS if form validation appropriate for schools, FAIL if inappropriate validation
- Step 8: PASS if form submits successfully with all data, FAIL if validation prevents submission
- Step 9: PASS if verification page loads with correct parameters, FAIL if navigation fails
- Step 10: PASS if verification code found in logs, FAIL if no code generated
- Step 11: PASS if code verification succeeds, FAIL if code rejected
- Step 12: PASS if school dashboard loads with correct school name, FAIL if error or wrong interface
- Step 13: PASS if database contains correct school and all details, FAIL if data missing or incorrect
- Step 14-16: PASS if edge cases and management features work, FAIL if functionality broken (optional steps)

Edge Cases to Consider:
- Very long school names (character limit testing)
- School names with special characters, accents, and punctuation
- Empty optional fields should not cause validation errors
- Invalid URL formats should show appropriate validation messages
- Multiline addresses should preserve formatting
- Network interruption during registration
- Invalid verification code handling
- Expired verification code scenario
- School name conflicts with existing institutions

Overall Result: PASS only if ALL required steps (1-13) pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- URL parameters from landing page must be properly handled
- School type selection must be visually clear with institutional indicators
- Manual school name entry must be intuitive and fully editable
- Form validation should be appropriate for institutional signup context
- Optional fields must be clearly marked and not trigger false validation errors
- Multiline address field should provide adequate space and formatting
- Website URL field should validate format but remain optional
- Visual indicators must clearly distinguish school from tutor signup
- Loading states prevent double-submission during registration
- Success feedback is clear and encouraging for new school administrators
- Dashboard immediately shows school-relevant content and management features
- Error messages are helpful and contextual to institutional signup needs
- School information should be preserved and displayed consistently throughout the application