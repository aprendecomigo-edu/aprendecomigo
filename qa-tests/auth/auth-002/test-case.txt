QA Test Case: School Manager Registration and Signup

Test ID: AUTH-002
Test Name: School Manager Registration and Signup Flow
Purpose: Verify that a new user can successfully register as a school manager, create a new school account, and complete the onboarding process
Expected Result: New school manager account is created, email verified, and user can access their dashboard

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Authentication: Passwordless email verification with 6-digit codes
- Email Backend: Console backend (prints emails to server logs)
- Registration: Creates new school and school_owner user

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Test Email: test.schoolmanager+$(date +%s)@example.com (unique email)
- Alternative Test Email: newschool.manager@testdomain.com
- School Name: "Test Elementary School"
- Manager Name: "John"
- Manager Surname: "Doe"
- Expected User Role: school_owner (to be created)

Database Prerequisite:
- Ensure test email does NOT exist in database before starting
- Test should create entirely new user and school records

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev
Expected: Both services start successfully
- Backend: http://localhost:8000 responds with 401 for /api/
- Frontend: http://localhost:8081 shows loading screen

Step 2: Navigate to Signup Page
1. Open browser to http://localhost:8081
2. Wait ~10 seconds for app to load
3. Verify login page appears
4. Click on "Don't have an account? Sign up" link
5. Verify navigation to signup page

Expected: Signup page loads with:
- "Sign up" heading
- "Create your school account" or similar text
- Form fields for registration
- Email input field
- School name input field
- First name and last name fields
- "Create Account" or "Sign Up" button
- "Already have an account? Log in" link

Screenshot: 01_signup_page_loaded.png

Step 3: Fill Registration Form
1. Click in the email input field
2. Type: newschool.manager@testdomain.com
3. Click in the school name field
4. Type: Test Elementary School
5. Click in the first name field
6. Type: John
7. Click in the last name field
8. Type: Doe
9. Verify all fields are filled correctly
10. Click "Create Account" or "Sign Up" button

Expected: Form accepts all input and submits successfully
- No validation errors appear
- Page transitions to verification step
- Success message appears

Screenshot: 02_registration_form_completed.png

Step 4: Verify Email Verification Request
Expected Results:
- Page navigates to verification code page
- Shows "Verify Your Email" heading
- Shows text "Enter the verification code sent to newschool.manager@testdomain.com"
- Shows verification code input field
- Shows "Verify Code" and "Resend Code" buttons
- Alert appears: "Verification code sent to your email!"

Screenshot: 03_verification_code_requested.png

Step 5: Extract Verification Code from Server Logs
Command: tail -30 /tmp/django_server.log

Look for email content containing:
"Your verification code is: XXXXXX"
"Welcome to Aprende Comigo" or similar welcome message

Expected Log Content:
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Subject: Aprende Comigo - Verify Your Email
From: noreply@aprendecomigo.com
To: newschool.manager@testdomain.com
Date: [timestamp]

Welcome to Aprende Comigo!

Your verification code is: [6-digit code]

This code will expire in 5 minutes.

Step 6: Complete Email Verification
1. Click in verification code input field
2. Type the 6-digit code extracted from logs
3. Click "Verify Code" button
4. Wait for verification processing

Expected:
- Code verification succeeds
- User account is created in database
- Success message appears
- Navigation to onboarding or dashboard

Step 7: Verify Account Creation and First Login
Expected Results:
- Page navigates to dashboard or onboarding flow
- User sees welcome message for new school manager
- Success alert: "Account created successfully!" or "Welcome to Aprende Comigo!"
- Dashboard shows school manager interface with school name

Screenshot: 04_successful_registration.png

Step 8: Verify Backend Account Creation
Commands:
  tail -20 /tmp/django_server.log
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
from accounts.models import User, School
user = User.objects.get(email='newschool.manager@testdomain.com')
print(f'User: {user.email}, Role: {user.role}')
school = School.objects.get(owner=user)
print(f'School: {school.name}')
"

Expected Database State:
- User exists with email newschool.manager@testdomain.com
- User role is 'school_owner'
- User is_verified = True
- School exists with name "Test Elementary School"
- School owner is the created user

Expected Log Entries:
INFO "POST /api/accounts/auth/register/ HTTP/1.1" 201 [response_size]
INFO "POST /api/accounts/auth/verify-email/ HTTP/1.1" 200 [response_size]
INFO "GET /api/accounts/users/dashboard_info/ HTTP/1.1" 200 [response_size]

Step 9: Test Subsequent Login (Optional Verification)
1. Sign out from the application (if logout button available)
2. Navigate back to login page
3. Use the same email (newschool.manager@testdomain.com) to login
4. Complete verification process
5. Verify dashboard access

Expected: User can successfully login with the newly created account

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND new school manager account is fully functional
FAIL: Any step fails OR account creation incomplete OR user cannot access dashboard

Individual Step Criteria:
- Step 1: PASS if both services start, FAIL if either service fails
- Step 2: PASS if signup page loads with all form elements, FAIL if page doesn't load or elements missing
- Step 3: PASS if form accepts input and submits, FAIL if validation errors or submission fails
- Step 4: PASS if verification page loads with success alert, FAIL if navigation fails or no alert
- Step 5: PASS if verification code found in logs, FAIL if no code generated
- Step 6: PASS if code accepted and account created, FAIL if code rejected or creation fails
- Step 7: PASS if dashboard/onboarding loads with welcome content, FAIL if error page or missing route
- Step 8: PASS if user and school records exist in database with correct data, FAIL if database inconsistent
- Step 9: PASS if subsequent login works, FAIL if login fails (optional step)

Edge Cases to Consider:
- Email already exists (should show appropriate error)
- Invalid email format (should show validation error)
- Empty required fields (should show validation errors)
- Expired verification code (should allow resending)
- Network interruption during registration

Overall Result: PASS only if ALL required steps (1-8) pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Registration form shows clear validation messages
- Loading states prevent double-submission
- Success feedback is clear and encouraging
- Email verification flow is intuitive
- Dashboard immediately shows relevant school manager content
- Error messages are helpful and actionable
