QA Test Case: Invitation Resend and Management

Test ID: INVITE-006
Test Name: Invitation Resend and Management Features
Purpose: Verify that administrators can effectively manage invitations through resend, cancel, and other management operations
Expected Result: All invitation management features work correctly with proper validation and state updates

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Feature: Teacher Invitation System - Management and Resend Capabilities

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (essential for debugging)

Test Data Prerequisites:
- Existing invitations with various statuses:
  - pending.invite@example.com (status: pending)
  - sent.invite@example.com (status: sent)
  - expired.invite@example.com (status: expired)
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Fresh test emails for new invitations:
  - resend.test1@example.com
  - resend.test2@example.com
  - cancel.test@example.com

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
1. Navigate to project root and activate environment
2. Start development servers: make dev-open
3. Open backend logs: make logs (keep monitoring)
4. Complete school admin authentication
5. Verify access to invitation management dashboard

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open
  # Separate terminal:
  make logs

Expected: Environment ready with admin access to invitation management
Screenshot: 01_management_setup.png

Step 2: Access Invitation Management Dashboard
1. Navigate to invitation status dashboard
2. Verify existing invitations are displayed
3. Check for management action buttons on each invitation:
   - Resend option
   - Cancel option
   - Edit option (if available)
   - Copy link option
4. Verify actions are contextual based on invitation status

Expected: Management dashboard loaded with action buttons visible
Screenshot: 02_management_dashboard.png

Step 3: Create New Invitation for Resend Testing
1. Create new invitation: resend.test1@example.com
2. Select role: teacher
3. Add custom message: "Initial invitation message"
4. Submit and verify invitation created
5. Note invitation details and initial status

Expected: New invitation created for resend testing
Screenshot: 03_new_invitation_created.png

Step 4: Test Single Invitation Resend
1. Locate the newly created invitation in dashboard
2. Click "Resend" button/option
3. Verify resend confirmation dialog (if present)
4. Confirm resend operation
5. Monitor backend logs for resend processing
6. Check for success confirmation message

Expected: Resend operation completes with success confirmation
Screenshot: 04_single_resend_test.png

Step 5: Verify Resend Email Generation
1. Check backend logs for new email generation
2. Verify resend creates new email (not duplicate)
3. Check that resend updates invitation timestamps:
   - Last sent timestamp
   - Resend count (if tracked)
   - Status updates
4. Verify email delivery tracking for resend

Expected: Resend generates new email with proper tracking updates
Screenshot: 05_resend_email_verification.png

Step 6: Test Resend with Custom Message Update
1. Create another invitation: resend.test2@example.com
2. Use resend option that allows message editing
3. Update custom message: "Updated message for resend"
4. Submit resend with new message
5. Verify backend processes updated message
6. Check that new message appears in email template

Expected: Resend allows message updates with proper processing
Screenshot: 06_resend_custom_message.png

Step 7: Test Bulk Resend Functionality
1. Select multiple pending invitations using checkboxes
2. Look for bulk resend option
3. Click bulk resend action
4. Verify bulk confirmation dialog
5. Confirm bulk resend operation
6. Monitor processing of multiple resends
7. Check for bulk operation success feedback

Expected: Bulk resend processes multiple invitations efficiently
Screenshot: 07_bulk_resend_test.png

Step 8: Test Invitation Cancellation
1. Create new invitation: cancel.test@example.com
2. Wait for invitation to be sent
3. Use cancel/revoke option on the invitation
4. Verify cancellation confirmation dialog
5. Confirm cancellation
6. Check invitation status updates to "cancelled"

Expected: Invitation cancellation works with proper status updates
Screenshot: 08_invitation_cancellation.png

Step 9: Verify Cancelled Invitation Behavior
1. Try to access cancelled invitation link
2. Verify cancelled invitation shows appropriate error
3. Check that cancelled invitations can't be accepted
4. Verify cancelled invitations are visually distinct in dashboard
5. Test that cancelled invitations can be recreated (new invitation)

Expected: Cancelled invitations properly blocked with clear messaging
Screenshot: 09_cancelled_invitation_behavior.png

Step 10: Test Invitation Link Copy Functionality
1. Select any pending invitation
2. Use "Copy Link" or "Copy Invitation URL" option
3. Verify link is copied to clipboard
4. Paste link in separate browser tab
5. Verify copied link works correctly
6. Check link format and token validity

Expected: Link copying works correctly with valid, accessible links
Screenshot: 10_copy_link_test.png

Step 11: Test Invitation Expiry Management
1. Locate expired invitation (or create one)
2. Check available actions for expired invitations
3. Test "Resend" on expired invitation (should create new invitation)
4. Verify expiry date extension (if available)
5. Check that expired invitations can be renewed

Expected: Expired invitations can be managed and renewed appropriately
Screenshot: 11_expiry_management.png

Step 12: Test Invitation Edit Functionality
1. Find pending invitation with edit option
2. Click edit/modify option
3. Update invitation details:
   - Role change (if allowed)
   - Custom message update
   - Expiry date modification (if available)
4. Save changes and verify updates
5. Check that changes don't require resend (or trigger automatic resend)

Expected: Invitation editing works with proper validation and updates
Screenshot: 12_invitation_edit_test.png

Step 13: Test Invitation History and Audit Trail
1. Select invitation with multiple actions (resends, edits)
2. Check for invitation history/activity log
3. Verify history shows:
   - Creation time
   - Resend attempts
   - Status changes
   - Edit history
   - Admin actions
4. Check timestamp accuracy and detail completeness

Expected: Comprehensive audit trail available for invitation activities
Screenshot: 13_invitation_history.png

Step 14: Test Permission-Based Management Access
1. If possible, test with different admin role levels
2. Verify permission restrictions:
   - Who can resend invitations
   - Who can cancel invitations
   - Who can edit invitation details
3. Check that unauthorized actions are properly blocked
4. Verify appropriate error messages for permission issues

Expected: Permission-based access control working correctly
Screenshot: 14_permission_based_access.png

Step 15: Verify Management Action Rate Limiting
1. Attempt multiple rapid resends on same invitation
2. Test rate limiting or cooldown periods
3. Verify appropriate throttling messages
4. Test bulk operations with large numbers
5. Check for system protection against abuse

Expected: Rate limiting and abuse protection working correctly
Screenshot: 15_rate_limiting_test.png

Step 16: Test Error Handling in Management Operations
1. Attempt to resend to invalid email addresses
2. Try to cancel already accepted invitations
3. Test management operations with expired tokens
4. Verify network error handling during operations
5. Check that all error cases provide clear feedback

Expected: All error conditions handled gracefully with clear messaging
Screenshot: 16_error_handling_test.png

=== PASS/FAIL CRITERIA ===

PASS: All invitation management features work correctly with proper validation, error handling, and state updates
FAIL: Any management operation failures, incorrect state updates, permission issues, or poor error handling

Individual Step Criteria:
- Step 1: PASS if environment and auth successful, FAIL if setup issues
- Step 2: PASS if management dashboard accessible, FAIL if interface missing
- Step 3: PASS if new invitation created successfully, FAIL if creation fails
- Step 4: PASS if single resend works correctly, FAIL if resend fails
- Step 5: PASS if resend email generation verified, FAIL if email issues
- Step 6: PASS if custom message updates work, FAIL if message problems
- Step 7: PASS if bulk resend functions properly, FAIL if bulk issues
- Step 8: PASS if cancellation works correctly, FAIL if cancel fails
- Step 9: PASS if cancelled behavior correct, FAIL if cancellation problems
- Step 10: PASS if link copying works, FAIL if copy functionality broken
- Step 11: PASS if expiry management works, FAIL if expiry handling issues
- Step 12: PASS if editing functions properly, FAIL if edit problems
- Step 13: PASS if history/audit trail complete, FAIL if history missing
- Step 14: PASS if permissions enforced correctly, FAIL if permission issues
- Step 15: PASS if rate limiting works, FAIL if no protection/errors
- Step 16: PASS if error handling comprehensive, FAIL if poor error handling

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- All management actions should provide clear confirmation dialogs
- Success/failure feedback should be immediate and prominent
- Bulk operations should show progress and results clearly
- Cancelled invitations should be visually distinct but not hidden
- Resend operations should feel immediate and reliable
- Error messages should be specific and actionable
- History/audit information should be easily accessible
- Permission restrictions should be clear and well-communicated