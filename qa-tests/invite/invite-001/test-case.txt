QA Test Case: Single Teacher Invitation Form

Test ID: INVITE-001
Test Name: Single Teacher Invitation Form Functionality
Purpose: Verify that school administrators can successfully invite individual teachers using the invitation form with proper email input and role selection
Expected Result: Teacher invitation form works correctly with email validation, role selection, and successful invitation creation

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Feature: Teacher Invitation System (GitHub Issue #37)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (view server.log for debugging)

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Test Teacher Email: teacher.test@example.com (new invitation)
- Alternative Test Email: existing.teacher@example.com (existing user test)
- School Context: Default school associated with admin user

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
1. Navigate to project root: cd /Users/anapmc/Code/aprendecomigo
2. Activate virtual environment: source .venv/bin/activate
3. Start development servers: make dev-open
4. Verify servers are running (backend: 8000, frontend: 8081)
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open

Expected: Both servers start successfully and browser opens
Screenshot: 01_servers_started.png
Debug: Use 'make logs' to view server logs if issues occur

Step 2: School Admin Authentication
1. Navigate to application: http://localhost:8081
2. Click "Sign In" and enter admin email: anapmc.carvalho@gmail.com
3. Complete email verification process
4. Verify successful login and dashboard access

Expected: Successful authentication and admin dashboard loaded
Screenshot: 02_admin_authenticated.png

Step 3: Navigate to Teacher Invitation Interface
1. From school admin dashboard, locate "Invite Teacher" button/option
2. Click to open teacher invitation modal/interface
3. Verify invitation form loads with required fields

Expected: Invitation form opens with email field and role selector
Screenshot: 03_invitation_form_opened.png

Step 4: Test Email Input Field
1. Click on email input field
2. Enter invalid email format: "invalid-email"
3. Verify client-side validation triggers
4. Clear field and enter valid email: teacher.test@example.com
5. Verify email field accepts valid format

Expected: Validation works correctly for both invalid and valid emails
Screenshot: 04_email_validation_test.png

Step 5: Test Role Selection
1. Locate role selection dropdown/field
2. Click to open role options
3. Verify available roles: teacher, school_admin, school_owner
4. Select "teacher" role
5. Verify selection is properly highlighted/selected

Expected: Role selector shows all available options and selection works
Screenshot: 05_role_selection_test.png

Step 6: Test Custom Message Field (Optional)
1. Locate custom message/note field (if available)
2. Enter test message: "Welcome to our school! Looking forward to working with you."
3. Verify message field accepts input
4. Test character limits (if any)

Expected: Custom message field works correctly
Screenshot: 06_custom_message_test.png

Step 7: Submit Single Teacher Invitation
1. With valid email (teacher.test@example.com) and role (teacher) selected
2. Click "Send Invitation" or equivalent submit button
3. Verify loading state appears during submission
4. Wait for success/error response

Expected: Loading indicator shows, then success message appears
Screenshot: 07_invitation_submitted.png

Step 8: Verify Success Response
1. Check for success message or notification
2. Verify invitation details are displayed (email, role, status)
3. Check that form either clears or modal closes
4. Verify no error messages appear

Expected: Clear success feedback with invitation details
Screenshot: 08_success_response.png

Step 9: Test Duplicate Email Handling
1. Open invitation form again
2. Enter the same email: teacher.test@example.com
3. Select same or different role
4. Submit invitation
5. Verify appropriate duplicate handling (error message or merge logic)

Expected: System handles duplicate emails appropriately with clear messaging
Screenshot: 09_duplicate_email_test.png

Step 10: Verify Backend API Call
1. Open browser developer tools (F12)
2. Go to Network tab
3. Submit a new invitation with email: second.teacher@example.com
4. Verify API call to POST /api/accounts/teachers/invite_bulk/ or similar
5. Check response status (200/201) and response body

Expected: Correct API endpoint called with proper request/response
Screenshot: 10_api_call_verification.png

Step 11: Test Form Validation Edge Cases
1. Test empty email field submission
2. Test special characters in email
3. Test very long email addresses
4. Test form submission without role selection
5. Verify all validation messages are clear and helpful

Expected: All edge cases handled with appropriate validation messages
Screenshot: 11_validation_edge_cases.png

Step 12: Verify Email Generation (Backend Logs)
1. Open terminal and run: make logs
2. Submit new invitation with email: final.test@example.com
3. Check backend logs for email generation/sending activity
4. Look for email template processing and delivery attempts

Expected: Backend logs show email processing activity
Screenshot: 12_backend_email_logs.png

=== PASS/FAIL CRITERIA ===

PASS: All components function correctly AND invitation is successfully created with proper email generation
FAIL: Any UI component fails, validation doesn't work, API calls fail, or email generation fails

Individual Step Criteria:
- Step 1: PASS if servers start without critical errors, FAIL if servers fail to start
- Step 2: PASS if admin authentication successful, FAIL if login fails
- Step 3: PASS if invitation form opens correctly, FAIL if interface not found/broken
- Step 4: PASS if email validation works for both valid/invalid, FAIL if validation broken
- Step 5: PASS if role selection shows all options and works, FAIL if roles missing/broken
- Step 6: PASS if custom message field works (if present), FAIL if field broken
- Step 7: PASS if submission shows loading and processes, FAIL if submission fails
- Step 8: PASS if success message clear and accurate, FAIL if error or unclear feedback
- Step 9: PASS if duplicate handling works correctly, FAIL if duplicates cause errors
- Step 10: PASS if API calls correct endpoints with proper data, FAIL if API issues
- Step 11: PASS if all validation cases handled properly, FAIL if validation missing
- Step 12: PASS if backend logs show email processing, FAIL if no email activity

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Form fields should have clear labels and placeholders
- Loading states should be visible during API calls
- Success/error messages should be prominent and clear
- Modal should close automatically after successful submission OR remain open with cleared form
- Email validation should be real-time (not just on submit)
- Role selection should be intuitive and clearly labeled
- All interactions should feel responsive and smooth