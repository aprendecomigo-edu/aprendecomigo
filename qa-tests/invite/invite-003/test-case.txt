QA Test Case: Teacher Invitation Status Dashboard

Test ID: INVITE-003
Test Name: Teacher Invitation Status Dashboard with Filtering and Real-time Updates
Purpose: Verify that the invitation status dashboard displays all invitations correctly with filtering capabilities, status tracking, and real-time updates
Expected Result: Dashboard shows comprehensive invitation list with working filters, accurate status information, and real-time status updates

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Feature: Teacher Invitation System - Status Dashboard and Management

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (view server.log for debugging)

Test Data Prerequisites:
- Existing invitations with various statuses:
  - pending@example.com (status: pending)
  - sent@example.com (status: sent)
  - delivered@example.com (status: delivered)
  - viewed@example.com (status: viewed)
  - accepted@example.com (status: accepted)
  - expired@example.com (status: expired)
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Various roles: teacher, school_admin, school_owner

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
1. Navigate to project root and activate environment
2. Start development servers: make dev-open
3. Complete school admin authentication
4. Verify dashboard access with invitation management permissions

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open

Expected: Servers running, admin authenticated, dashboard accessible
Screenshot: 01_environment_ready.png

Step 2: Navigate to Invitation Status Dashboard
1. From admin dashboard, locate "Invitations" or "Manage Invitations" section
2. Click to access the invitation status dashboard
3. Verify dashboard loads with invitation list interface
4. Check for key dashboard elements: list, filters, search, actions

Expected: Invitation dashboard loads with all main components visible
Screenshot: 02_dashboard_loaded.png

Step 3: Verify Invitation List Display
1. Check that invitation list shows existing invitations
2. Verify each invitation displays key information:
   - Email address
   - Role assigned
   - Status badge/indicator
   - Created date
   - Expiry date
   - Invited by information
3. Check list pagination if many invitations exist

Expected: All invitation information clearly displayed in organized list
Screenshot: 03_invitation_list_display.png

Step 4: Test Status Badge System
1. Identify invitations with different statuses
2. Verify status badges are visually distinct:
   - Pending: Orange/yellow indicator
   - Sent: Blue indicator
   - Delivered: Green indicator
   - Viewed: Purple indicator
   - Accepted: Success green
   - Expired: Red/gray indicator
   - Declined: Red indicator
3. Check status badge clarity and consistency

Expected: Status badges clearly indicate invitation states with distinct colors
Screenshot: 04_status_badges.png

Step 5: Test Search Functionality
1. Locate search/filter input field
2. Test email search: Enter partial email "example.com"
3. Verify results filter to matching invitations
4. Test search by role: Search for "teacher"
5. Test search by status terms
6. Clear search and verify full list returns

Expected: Search functionality works for emails, roles, and other fields
Screenshot: 05_search_functionality.png

Step 6: Test Status Filter Options
1. Locate status filter dropdown/buttons
2. Filter by "Pending" status only
3. Verify only pending invitations displayed
4. Try "Accepted" filter
5. Test "Expired" filter
6. Test "All" to return to full list
7. Verify filter accuracy in each case

Expected: Status filters correctly show only invitations matching selected status
Screenshot: 06_status_filters.png

Step 7: Test Role Filter Options
1. Locate role filter control
2. Filter by "teacher" role only
3. Verify only teacher invitations shown
4. Filter by "school_admin" role
5. Filter by "school_owner" role
6. Test multiple role selection (if supported)
7. Reset to show all roles

Expected: Role filters accurately display invitations for selected roles
Screenshot: 07_role_filters.png

Step 8: Test Date Range Filtering
1. Look for date filter options (created date, expiry date)
2. Test filtering by creation date range
3. Test filtering by expiry date range
4. Try "Last 7 days" quick filter (if available)
5. Try "Expiring soon" filter (if available)
6. Verify date filters work correctly

Expected: Date filters properly restrict results to specified date ranges
Screenshot: 08_date_filters.png

Step 9: Test Real-time Status Updates
1. Open dashboard in current browser tab
2. Open a second browser tab with invitation acceptance page
3. Accept an invitation in the second tab
4. Return to dashboard tab
5. Verify status updates automatically (within 30 seconds)
6. Check for polling indicators or live update mechanisms

Expected: Dashboard updates invitation status automatically without manual refresh
Screenshot: 09_realtime_updates.png

Step 10: Test Individual Invitation Actions
1. For a pending invitation, check available actions:
   - Resend invitation
   - Cancel invitation
   - Copy invitation link
   - View details
2. Test "Resend" action functionality
3. Test "Copy Link" functionality
4. Verify action buttons are contextual (vary by status)

Expected: Action buttons work correctly and are appropriate for invitation status
Screenshot: 10_invitation_actions.png

Step 11: Test Bulk Actions
1. Select multiple invitations using checkboxes
2. Check for bulk action options:
   - Bulk resend
   - Bulk cancel
   - Bulk export
3. Test bulk resend functionality
4. Test bulk cancel functionality
5. Verify bulk operations work correctly

Expected: Bulk actions process multiple invitations efficiently
Screenshot: 11_bulk_actions.png

Step 12: Test Dashboard Performance
1. Create or verify presence of 20+ invitations
2. Test dashboard loading time
3. Test filter response times
4. Test search response times
5. Test pagination loading (if applicable)
6. Monitor for any lag or performance issues

Expected: Dashboard performs well with larger datasets
Screenshot: 12_performance_test.png

Step 13: Test Sort Functionality
1. Look for column headers with sort options
2. Sort by email address (A-Z, Z-A)
3. Sort by creation date (newest first, oldest first)
4. Sort by status
5. Sort by expiry date
6. Verify sort accuracy in each case

Expected: All sort options work correctly and results are properly ordered
Screenshot: 13_sort_functionality.png

Step 14: Test Dashboard Refresh and Data Consistency
1. Note current invitation count and statuses
2. Manually refresh the dashboard
3. Verify data consistency after refresh
4. Check for any data inconsistencies or display issues
5. Test refresh button (if available)

Expected: Dashboard data remains consistent across refreshes
Screenshot: 14_data_consistency.png

Step 15: Verify API Integration
1. Open browser dev tools, Network tab
2. Load dashboard and apply filters
3. Verify API calls to correct endpoints:
   - GET /api/accounts/teacher-invitations/list_for_school/
4. Check request parameters for filters
5. Verify response data structure
6. Check for proper error handling

Expected: API calls structured correctly with proper filtering parameters
Screenshot: 15_api_integration.png

=== PASS/FAIL CRITERIA ===

PASS: Dashboard displays invitations correctly with all filtering/search options working and real-time updates functioning
FAIL: Any display issues, broken filters, missing functionality, or data inconsistencies

Individual Step Criteria:
- Step 1: PASS if environment setup successful, FAIL if server/auth issues
- Step 2: PASS if dashboard accessible and loads, FAIL if interface missing/broken
- Step 3: PASS if invitation list shows all required information, FAIL if data missing/incorrect
- Step 4: PASS if status badges visually distinct and accurate, FAIL if badges unclear/wrong
- Step 5: PASS if search works for all tested fields, FAIL if search broken/incomplete
- Step 6: PASS if status filters work accurately, FAIL if filtering incorrect
- Step 7: PASS if role filters function properly, FAIL if role filtering broken
- Step 8: PASS if date filters work correctly, FAIL if date filtering issues
- Step 9: PASS if real-time updates work, FAIL if no automatic updates
- Step 10: PASS if individual actions function correctly, FAIL if actions broken
- Step 11: PASS if bulk actions work properly, FAIL if bulk operations fail
- Step 12: PASS if performance acceptable, FAIL if significant lag/issues
- Step 13: PASS if all sort options work correctly, FAIL if sorting broken
- Step 14: PASS if data consistent across refreshes, FAIL if data inconsistency
- Step 15: PASS if API calls correct and functional, FAIL if API issues

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Status badges should be immediately recognizable and consistent
- Filters should be intuitive and provide clear feedback
- Search should be responsive and provide instant results
- Real-time updates should be seamless without disrupting user interaction
- Action buttons should be clearly labeled and contextually appropriate
- Loading states should be visible during data operations
- Empty states should be handled gracefully with helpful messaging
- Dashboard should be scannable and easy to navigate
- Bulk operations should provide clear feedback about progress and results