QA Test Case: Bulk Teacher Invitation

Test ID: INVITE-002
Test Name: Bulk Teacher Invitation with Progress Tracking
Purpose: Verify that school administrators can successfully invite multiple teachers simultaneously with proper progress tracking and results handling
Expected Result: Bulk invitation system processes multiple emails correctly with clear progress indication and detailed results

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Feature: Teacher Invitation System - Bulk Invitation Capability

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (view server.log for debugging)

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Bulk Test Emails:
  - bulk1.teacher@example.com (new)
  - bulk2.teacher@example.com (new)
  - bulk3.teacher@example.com (new)
  - existing.user@example.com (existing user)
  - invalid-email-format (invalid)
- Default Role: teacher
- Batch Test Size: 5 invitations

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
1. Navigate to project root and activate environment
2. Start development servers: make dev-open
3. Complete school admin authentication
4. Verify dashboard access with invitation permissions

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open

Expected: Servers running, admin authenticated and dashboard loaded
Screenshot: 01_environment_setup.png

Step 2: Access Bulk Invitation Interface
1. From admin dashboard, locate bulk invitation option
2. Click "Bulk Invite" or "Invite Multiple Teachers" button
3. Verify bulk invitation interface opens
4. Check for multiple email input methods (textarea, individual fields, CSV upload)

Expected: Bulk invitation interface opens with multiple input options
Screenshot: 02_bulk_interface_opened.png

Step 3: Test Multiple Email Input Methods
1. Test textarea method: Enter emails separated by commas or newlines:
   bulk1.teacher@example.com, bulk2.teacher@example.com, bulk3.teacher@example.com
2. Test individual field method (if available): Add emails one by one
3. Test CSV format (if supported): Upload or paste CSV format
4. Verify email parsing and validation for each method

Expected: All input methods parse and validate emails correctly
Screenshot: 03_email_input_methods.png

Step 4: Set Bulk Invitation Options
1. Select default role for all invitations: "teacher"
2. Set custom message (if available): "Welcome to our teaching team!"
3. Configure any bulk-specific options (send immediately, schedule, etc.)
4. Verify options apply to all emails in the batch

Expected: Bulk options configured correctly for entire batch
Screenshot: 04_bulk_options_configured.png

Step 5: Test Email Validation in Bulk
1. Include mix of valid and invalid emails:
   - Valid: bulk1.teacher@example.com, bulk2.teacher@example.com
   - Invalid: invalid-email-format, @missingdomain.com
2. Submit for validation or trigger real-time validation
3. Verify system identifies valid vs invalid emails
4. Check validation feedback is clear and specific

Expected: System correctly identifies and reports email validation issues
Screenshot: 05_bulk_validation_test.png

Step 6: Submit Bulk Invitation Request
1. With validated email list, click "Send Bulk Invitations"
2. Verify loading/progress indicator appears immediately
3. Monitor progress tracking (if available): "Processing 5 invitations..."
4. Wait for completion or progress updates

Expected: Clear progress indication during bulk processing
Screenshot: 06_bulk_submission_progress.png

Step 7: Monitor Real-time Progress Updates
1. Watch for progress updates during processing
2. Check for individual invitation status updates
3. Verify progress percentage or count updates
4. Note any real-time feedback about successes/failures

Expected: Real-time progress updates show processing status
Screenshot: 07_realtime_progress_updates.png

Step 8: Verify Bulk Results Summary
1. Wait for bulk operation completion
2. Check for detailed results summary:
   - Total requested: X
   - Successfully created: Y
   - Duplicates found: Z
   - Failed invitations: W
3. Verify summary accuracy matches actual processing
4. Check for drill-down details on each category

Expected: Comprehensive results summary with accurate counts
Screenshot: 08_bulk_results_summary.png

Step 9: Examine Individual Invitation Results
1. Review successful invitations list:
   - Email addresses
   - Assigned roles
   - Invitation tokens/links
   - Creation timestamps
2. Check duplicate invitations handling:
   - Existing invitation references
   - Merge or skip logic
3. Review failed invitations with error reasons

Expected: Detailed breakdown of each invitation outcome
Screenshot: 09_individual_results.png

Step 10: Test Bulk Progress with Network Issues
1. Open browser dev tools and go to Network tab
2. Start new bulk invitation with 3-5 emails
3. Monitor API calls to bulk invitation endpoint
4. Check request payload and response structure
5. Verify proper batch ID and tracking mechanisms

Expected: API calls structured correctly with proper batch tracking
Screenshot: 10_api_monitoring.png

Step 11: Verify Email Generation for Bulk
1. Open backend logs: make logs
2. Submit bulk invitation with 3 new emails
3. Monitor logs for bulk email processing
4. Verify batch processing optimization (not individual API calls)
5. Check for email template generation and delivery queuing

Expected: Backend logs show efficient bulk email processing
Screenshot: 11_bulk_email_logs.png

Step 12: Test Large Batch Handling
1. Prepare larger test batch (10-15 emails)
2. Submit bulk invitation
3. Monitor system performance and response times
4. Verify no timeouts or system overload
5. Check for proper chunking or rate limiting

Expected: System handles larger batches without performance issues
Screenshot: 12_large_batch_test.png

Step 13: Verify Bulk Results Persistence
1. After bulk completion, navigate away from results
2. Return to invitation dashboard/management area
3. Verify all bulk-created invitations appear in main list
4. Check batch grouping or identification in invitation list
5. Verify all invitation details are correctly saved

Expected: All bulk invitations properly saved and accessible
Screenshot: 13_results_persistence.png

=== PASS/FAIL CRITERIA ===

PASS: Bulk invitation system processes multiple emails efficiently with accurate progress tracking and comprehensive results
FAIL: Any processing errors, incorrect progress tracking, missing results, or system performance issues

Individual Step Criteria:
- Step 1: PASS if environment setup successful, FAIL if server or auth issues
- Step 2: PASS if bulk interface accessible and loads, FAIL if feature missing/broken
- Step 3: PASS if all email input methods work, FAIL if parsing/input issues
- Step 4: PASS if bulk options apply correctly, FAIL if configuration problems
- Step 5: PASS if validation works in bulk context, FAIL if validation missing/incorrect
- Step 6: PASS if submission triggers proper processing, FAIL if submission fails
- Step 7: PASS if progress updates work correctly, FAIL if no progress indication
- Step 8: PASS if results summary accurate and complete, FAIL if incorrect/missing results
- Step 9: PASS if individual results detailed and correct, FAIL if results unclear/wrong
- Step 10: PASS if API calls structured properly, FAIL if API issues or incorrect calls
- Step 11: PASS if backend processing efficient, FAIL if processing issues or errors
- Step 12: PASS if large batches handled well, FAIL if performance/timeout issues
- Step 13: PASS if results properly persisted, FAIL if data loss or inconsistency

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Progress indication must be clear and real-time
- Results summary should be comprehensive and easy to understand
- Failed invitations should have clear error explanations
- Bulk operations should not block the UI unnecessarily
- Large batches should be handled gracefully without timeouts
- Email parsing should be forgiving of common formatting variations
- Success/failure states should be visually distinct and actionable