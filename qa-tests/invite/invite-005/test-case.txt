QA Test Case: Teacher Invitation Acceptance Flow (End-to-End)

Test ID: INVITE-005
Test Name: Complete Teacher Invitation Acceptance Flow
Purpose: Verify the complete end-to-end flow from invitation creation to teacher acceptance and account setup
Expected Result: Full invitation workflow functions correctly from admin invitation through teacher acceptance to active school membership

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native/Expo frontend
- Feature: Teacher Invitation System - Complete End-to-End Flow

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: `make dev-open`
4. Backend logs: `make logs` (essential for debugging)
5. Two browser sessions/tabs for admin and teacher perspectives

Test Data:
- School Admin Email: anapmc.carvalho@gmail.com (school_owner role)
- Teacher Email for Acceptance: endtoend.teacher@example.com (new account)
- Existing Teacher Email: existing.teacher@example.com (existing account test)
- School Name: Default School
- Invitation Role: teacher

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup
1. Navigate to project root and activate environment
2. Start development servers: make dev-open
3. Open backend logs in separate terminal: make logs
4. Prepare two browser tabs/windows for admin and teacher views
5. Verify both frontend and backend are accessible

Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev-open
  # Separate terminal:
  make logs

Expected: Development environment ready with dual browser setup
Screenshot: 01_environment_dual_setup.png

Step 2: Admin Authentication and Dashboard Access
1. In first browser tab, navigate to http://localhost:8081
2. Complete school admin authentication (anapmc.carvalho@gmail.com)
3. Verify successful login and dashboard access
4. Confirm invitation functionality is available

Expected: Admin successfully authenticated with invitation access
Screenshot: 02_admin_dashboard.png

Step 3: Create Teacher Invitation
1. Access teacher invitation form
2. Enter email: endtoend.teacher@example.com
3. Select role: teacher
4. Add custom message: "Welcome to our school team! We're excited to work with you."
5. Submit invitation
6. Note invitation creation time and details

Expected: Invitation created successfully with confirmation
Screenshot: 03_invitation_created.png

Step 4: Verify Invitation in Admin Dashboard
1. Navigate to invitation status dashboard
2. Locate the newly created invitation
3. Verify invitation details:
   - Email: endtoend.teacher@example.com
   - Status: pending or sent
   - Role: teacher
   - Custom message included
4. Copy the invitation link/token for next steps

Expected: Invitation appears in dashboard with correct details
Screenshot: 04_invitation_in_dashboard.png

Step 5: Extract Invitation Link
1. From backend logs or dashboard, get invitation link
2. Verify link format: http://localhost:8081/accept-invitation/[token]
3. Ensure token is present and properly formatted
4. Test that link is accessible (don't accept yet)

Expected: Valid invitation link obtained and accessible
Screenshot: 05_invitation_link_extracted.png

Step 6: Teacher Accesses Invitation Link
1. In second browser tab/window, navigate to invitation link
2. Verify invitation acceptance page loads correctly
3. Check page displays:
   - School name
   - Role being offered
   - Inviter information
   - Custom message (if provided)
   - Clear acceptance/decline options

Expected: Invitation page loads with all relevant information
Screenshot: 06_invitation_page_loaded.png

Step 7: Verify Invitation Status Check
1. Verify page shows invitation status (valid, expired, already accepted, etc.)
2. Confirm "Accept" button is enabled for valid invitation
3. Check for any validation messages or warnings
4. Verify invitation details match what admin created

Expected: Invitation status validated and acceptance option available
Screenshot: 07_invitation_status_valid.png

Step 8: Test New User Account Creation Path
1. Click "Accept Invitation" button
2. If user doesn't exist, verify account creation flow:
   - Email field pre-populated with invitation email
   - Password/authentication setup required
   - Profile information form
   - Terms acceptance
3. Complete new user registration process

Expected: New user account creation integrated with invitation acceptance
Screenshot: 08_new_user_creation.png

Step 9: Complete Invitation Acceptance
1. Submit acceptance with required information
2. Verify loading state during processing
3. Wait for acceptance confirmation
4. Check for success message with next steps
5. Verify automatic login or login prompting

Expected: Invitation acceptance completed successfully with clear confirmation
Screenshot: 09_acceptance_completed.png

Step 10: Verify Teacher Dashboard Access
1. After acceptance, verify teacher is logged in
2. Check teacher has access to appropriate dashboard
3. Verify school membership is active
4. Check teacher can see school-specific content
5. Verify role permissions are correctly applied

Expected: Teacher successfully logged in with appropriate access
Screenshot: 10_teacher_dashboard_access.png

Step 11: Verify Admin Dashboard Updates
1. Return to admin browser tab
2. Refresh invitation status dashboard
3. Verify invitation status updated to "accepted"
4. Check acceptance timestamp is recorded
5. Verify teacher appears in school member list

Expected: Admin dashboard reflects completed invitation acceptance
Screenshot: 11_admin_dashboard_updated.png

Step 12: Test Existing User Invitation Flow
1. Create new invitation for existing user: existing.teacher@example.com
2. Copy invitation link
3. In incognito/private browser window, access link
4. Verify existing user flow:
   - Login prompt instead of registration
   - Invitation acceptance after authentication
   - School membership added to existing account

Expected: Existing user flow works correctly with proper authentication
Screenshot: 12_existing_user_flow.png

Step 13: Verify School Membership Integration
1. As accepted teacher, check profile/settings
2. Verify school membership details:
   - School name correct
   - Role assigned correctly
   - Membership status active
   - Join date recorded
3. Test school-specific functionality access

Expected: School membership properly established with correct details
Screenshot: 13_school_membership_verified.png

Step 14: Test Invitation Expiry Handling
1. Create invitation with short expiry (if configurable)
2. Wait for expiry or manually expire invitation
3. Try to access expired invitation link
4. Verify proper expiry handling:
   - Clear expiry message
   - No acceptance option
   - Proper error state
   - Contact information for resolution

Expected: Expired invitations handled gracefully with clear messaging
Screenshot: 14_expiry_handling.png

Step 15: Verify Backend Data Consistency
1. Check backend logs for acceptance processing
2. Verify database updates:
   - Invitation status changed to accepted
   - User account created/updated
   - School membership record created
   - Acceptance timestamp recorded
3. Check for any processing errors or inconsistencies

Expected: Backend data correctly updated with no errors
Screenshot: 15_backend_data_consistency.png

Step 16: Test Post-Acceptance Teacher Experience
1. As accepted teacher, test key functionality:
   - Navigation through teacher interface
   - Access to school-specific resources
   - Profile updates and settings
   - Interaction with school systems
2. Verify teacher experience is complete and functional

Expected: Accepted teacher has full access to appropriate functionality
Screenshot: 16_teacher_experience.png

=== PASS/FAIL CRITERIA ===

PASS: Complete end-to-end flow works from invitation creation through acceptance to active school membership
FAIL: Any break in the flow, data inconsistencies, authentication issues, or missing functionality

Individual Step Criteria:
- Step 1: PASS if environment setup successful, FAIL if server issues
- Step 2: PASS if admin authentication works, FAIL if auth problems
- Step 3: PASS if invitation created successfully, FAIL if creation fails
- Step 4: PASS if invitation appears correctly in dashboard, FAIL if missing/incorrect
- Step 5: PASS if invitation link accessible, FAIL if link problems
- Step 6: PASS if invitation page loads properly, FAIL if page issues
- Step 7: PASS if status validation works, FAIL if validation problems
- Step 8: PASS if new user creation integrated, FAIL if registration issues
- Step 9: PASS if acceptance completes successfully, FAIL if acceptance fails
- Step 10: PASS if teacher dashboard accessible, FAIL if access problems
- Step 11: PASS if admin dashboard updates, FAIL if status not updated
- Step 12: PASS if existing user flow works, FAIL if existing user issues
- Step 13: PASS if school membership established, FAIL if membership problems
- Step 14: PASS if expiry handled properly, FAIL if expiry issues
- Step 15: PASS if backend data consistent, FAIL if data inconsistencies
- Step 16: PASS if teacher experience complete, FAIL if functionality missing

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Invitation acceptance process should be intuitive and straightforward
- All status updates should be real-time and accurate
- Error messages should be clear and actionable
- New user registration should be seamlessly integrated
- Existing user flow should require minimal friction
- Success confirmations should be prominent and reassuring
- School membership should be immediately active and functional
- Teacher experience should be complete from first login
- All data should remain consistent across the system