QA Test Case: Group Channel Creation

Test ID: CHAT-002
Test Name: Group Channel Creation by Teachers/Admins
Purpose: Verify that teachers and school admins can create new group channels with multiple participants
Expected Result: Teachers/admins can successfully create group channels that appear in the channel list

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Chat Feature: Slack-style messaging with role-based permissions
- Business Rule: Only teachers and admins can create channels

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Primary User: anapmc.carvalho@gmail.com (school_owner/admin role)
- Additional Users: At least 2-3 other users (teachers/students) for channel participants
- Test Channel Name: "matematica-turma-a" (or similar)

Prerequisites:
- Chat interface is functional (CHAT-001 passed)
- User authenticated as teacher or admin
- Backend/frontend services running
- Redis server running for WebSocket support
- At least 2-3 other users exist in the system for testing participant selection

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Navigate to Chat and Verify User Role
1. Navigate to chat interface (http://localhost:8081/chat)
2. Verify logged in as user with teacher or admin privileges
3. Confirm sidebar is visible with "Canais" section
4. Look for + button next to "Canais" section

Expected: Chat interface loads with + button visible for channel creation
Screenshot: 01_chat_interface_with_create_button.png

Step 2: Initiate Channel Creation
1. Click the + button next to "Canais" (Channels) section
2. Verify modal/dialog opens for channel creation
3. Check that modal has proper title and navigation

Expected: Channel creation modal opens with step-by-step wizard
Screenshot: 02_channel_creation_modal_opened.png

Step 3: Select Channel Type
1. In the modal, verify two options are presented:
   - "Canal do Grupo" (Group Channel)
   - "Mensagem Direta" (Direct Message)
2. Select "Canal do Grupo" (Group Channel) option
3. Click "Continuar" (Continue) button

Expected: Group channel option is selected and continues to next step
Screenshot: 03_channel_type_selected.png

Step 4: Enter Channel Details
1. Verify form shows channel name input field
2. Enter test channel name: "matematica-turma-a"
3. Verify placeholder text and validation instructions
4. Check that only lowercase letters, numbers, and hyphens are mentioned
5. Click "Continuar" (Continue) button

Expected: Channel name is accepted and form proceeds to participant selection
Screenshot: 04_channel_details_entered.png

Step 5: Search and Select Participants
1. Verify participant selection interface loads
2. Use search box to find users by typing partial names or emails
3. Search for at least 2 different users
4. Select participants by clicking on search results
5. Verify selected participants appear in "Selecionados" (Selected) section
6. Test removing a participant by clicking X on selected user

Expected: User search works and participants can be added/removed
Screenshot: 05_participants_selected.png

Step 6: Create Channel
1. With participants selected, click "Criar Conversa" (Create Conversation)
2. Verify loading state shows "Criando..." (Creating...)
3. Wait for modal to close automatically
4. Check that new channel appears in sidebar under "Canais" section

Expected: Channel creation succeeds and new channel appears in list
Screenshot: 06_channel_created_successfully.png

Step 7: Verify Channel Functionality
1. Click on newly created channel in sidebar
2. Verify channel opens in main content area
3. Check channel header shows:
   - Channel name with # icon
   - Participant count
4. Verify message input is available at bottom
5. Check that channel appears correctly formatted in sidebar

Expected: New channel is fully functional and properly displayed
Screenshot: 07_new_channel_functional.png

Step 8: Test Channel Persistence
1. Refresh the browser page
2. Navigate back to chat interface
3. Verify created channel still appears in sidebar
4. Click on channel to ensure it still works

Expected: Channel persists after page refresh and remains functional
Screenshot: 08_channel_persists_after_refresh.png

Step 9: Verify API Integration
1. Check browser network tab for API calls during creation
2. Verify successful POST request to /api/channels/
3. Check that channel data matches what was entered
4. Confirm no error responses in API calls

Expected: All API calls successful with correct data
Screenshot: 09_api_calls_successful.png

Step 10: Test Edge Cases
1. Try creating channel with existing name (should succeed or warn appropriately)
2. Test channel name with invalid characters (should show validation)
3. Try creating channel without participants (should require at least one)
4. Test search with non-existent user (should show "no results")

Expected: Appropriate validation and error handling for edge cases
Screenshot: 10_edge_case_validation.png

=== PASS/FAIL CRITERIA ===

PASS: All conditions met:
- + button is visible for users with appropriate permissions
- Channel creation modal opens and functions properly
- All wizard steps work (type selection, details, participants)
- User search functionality works correctly
- Participants can be added and removed
- Channel creation completes successfully
- New channel appears in sidebar and is functional
- Channel persists after page refresh
- API integration works without errors
- Appropriate validation for edge cases

FAIL: Any condition not met:
- + button missing or non-functional
- Modal fails to open or has broken functionality
- Wizard steps don't work or are missing
- User search is broken or doesn't return results
- Cannot add/remove participants
- Channel creation fails or errors
- New channel doesn't appear or is non-functional
- Channel doesn't persist after refresh
- API calls fail or return errors
- Missing validation or poor error handling

Individual Step Criteria:
- Step 1: PASS if + button visible, FAIL if missing or user lacks permissions
- Step 2: PASS if modal opens properly, FAIL if modal broken or doesn't open
- Step 3: PASS if channel type selection works, FAIL if options missing or broken
- Step 4: PASS if channel details form works, FAIL if form broken or validation missing
- Step 5: PASS if participant search/selection works, FAIL if search broken
- Step 6: PASS if channel creation succeeds, FAIL if creation fails or errors
- Step 7: PASS if new channel is functional, FAIL if channel broken or missing features
- Step 8: PASS if channel persists, FAIL if channel lost after refresh
- Step 9: PASS if API calls succeed, FAIL if API errors or failures
- Step 10: PASS if validation works, FAIL if edge cases not handled

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== NOTES FOR TESTER ===

- This test requires multiple user accounts - ensure test data is prepared
- Focus on the complete user journey from creation to usage
- Pay attention to user experience - modal should be intuitive
- Test as both teacher and admin roles if possible
- Document any permission-related behaviors
- Note any performance issues during user search
- Verify that students cannot see/use the + button (test in separate session)
