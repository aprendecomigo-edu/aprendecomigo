QA Test Case: Student Participation

Test ID: CHAT-006
Test Name: Student Participation and Permission Restrictions
Purpose: Verify that students can participate in channels but cannot create new channels, enforcing role-based permissions
Expected Result: Students can send/receive messages but cannot create channels, matching business requirements

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Chat Feature: Role-based permissions for channel management
- Business Rule: Students can participate in channels but cannot create them

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Student User: Account with student role only
- Teacher/Admin User: Account with teacher or admin role
- Existing Channel: Group channel that includes student as participant

Prerequisites:
- Chat functionality working (CHAT-001 through CHAT-004 passed)
- Student user account exists and is participant in at least one channel
- Teacher/admin account exists for comparison testing
- Backend/frontend services running

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Authenticate as Student User
1. Navigate to application (http://localhost:8081)
2. Authenticate with student user credentials
3. Verify student role in user profile/dashboard
4. Navigate to chat interface
5. Confirm chat interface loads for student user

Expected: Student successfully authenticated and can access chat interface
Screenshot: 01_student_authenticated_chat.png

Step 2: Verify Student Channel Access
1. Check sidebar for "Canais" (Channels) section
2. Verify student can see channels they are participants in
3. Click on a channel the student belongs to
4. Verify channel opens and displays existing messages
5. Confirm student can view conversation history

Expected: Student can view and access channels they participate in
Screenshot: 02_student_channel_access.png

Step 3: Test Student Message Sending
1. In open channel, verify message input is available
2. Type test message: "Ol√°! Sou um estudante testando o chat."
3. Send message using Send button
4. Verify message appears in chat
5. Test sending additional message using Enter key

Expected: Student can send messages successfully in channels they belong to
Screenshot: 03_student_sending_messages.png

Step 4: Verify No Channel Creation Controls
1. Examine "Canais" (Channels) section carefully
2. Verify NO + button appears next to "Canais"
3. Check "Mensagens Diretas" (Direct Messages) section
4. Verify NO + button appears next to "Mensagens Diretas"
5. Look for any "Create" or "New" buttons in chat interface

Expected: No channel creation controls visible for student user
Screenshot: 04_no_creation_controls_student.png

Step 5: Test Student Direct Message Limitations
1. Look for any way to initiate direct messages as student
2. Right-click on other users (if user list available)
3. Check for any context menus or DM options
4. Verify student cannot start new conversations independently

Expected: Student cannot initiate new direct messages or conversations
Screenshot: 05_student_dm_limitations.png

Step 6: Compare with Teacher/Admin Account
1. Log out student user
2. Authenticate with teacher or admin account
3. Navigate to chat interface
4. Verify + buttons are visible for teacher/admin
5. Document differences in interface between roles

Expected: Teacher/admin sees creation controls that students don't
Screenshot: 06_teacher_admin_controls_visible.png

Step 7: Test Student in Group Conversation
1. Log back in as student user
2. Navigate to group channel with multiple participants
3. Send message: "Posso participar de conversas em grupo!"
4. Verify message appears for all participants
5. Check that student messages appear with proper user identification

Expected: Student can fully participate in group conversations
Screenshot: 07_student_group_participation.png

Step 8: Verify Permission Enforcement
1. Check browser Developer Tools console for any permission errors
2. Look for API endpoints that might expose channel creation
3. Verify no hidden UI elements for channel creation
4. Test that student cannot access creation URLs directly

Expected: No permission errors, proper enforcement of role restrictions
Screenshot: 08_permission_enforcement.png

Step 9: Test Student Notification Behavior
1. Have teacher/admin send message to channel with student
2. Verify student receives real-time message (if using different browser)
3. Test that student gets appropriate notifications
4. Confirm student can respond to messages from teachers/admins

Expected: Student receives messages and notifications properly
Screenshot: 09_student_notifications.png

Step 10: Test Channel Invitation Workflow
1. Have teacher/admin create new channel
2. Include student as participant during creation
3. Verify new channel appears in student's sidebar
4. Test that student can access newly added channel
5. Confirm student can participate immediately

Expected: Student can be added to channels and participate immediately
Screenshot: 10_student_channel_invitation.png

Step 11: Test Error Handling for Restricted Actions
1. Using browser dev tools, try to manipulate UI to show creation buttons
2. Test any API endpoints directly that create channels (if accessible)
3. Verify appropriate error messages for unauthorized actions
4. Check that system gracefully handles permission violations

Expected: Appropriate error handling for unauthorized student actions
Screenshot: 11_error_handling_restrictions.png

Step 12: Verify Student Profile in Messages
1. Send messages as student in channel
2. Verify student's name and avatar appear correctly
3. Check that student role is not visually different in messages
4. Confirm student messages have same formatting as teacher messages

Expected: Student messages display with same formatting and quality as others
Screenshot: 12_student_message_formatting.png

=== PASS/FAIL CRITERIA ===

PASS: All conditions met:
- Student can authenticate and access chat interface
- Student can view and access channels they are participants in
- Student can send and receive messages successfully
- NO channel creation controls visible for students (no + buttons)
- Student cannot initiate new direct messages independently
- Clear difference between student and teacher/admin interface permissions
- Student can fully participate in group conversations
- Permission enforcement works properly with no console errors
- Student receives real-time messages and notifications appropriately
- Student can be added to new channels by teachers/admins
- Appropriate error handling for unauthorized student actions
- Student messages display with proper formatting and identification

FAIL: Any condition not met:
- Student cannot access chat or authentication fails
- Student cannot view channels they should participate in
- Student cannot send messages or messaging is broken
- Channel creation controls visible for students (security issue)
- Student can create channels or direct messages (permission violation)
- No difference between student and teacher interfaces
- Student excluded from group conversations inappropriately
- Permission violations not enforced or console errors present
- Student doesn't receive messages or notifications
- Student cannot access channels they're added to
- Poor error handling or system crashes on unauthorized actions
- Student messages display incorrectly or are treated differently

Individual Step Criteria:
- Step 1: PASS if student authenticates and accesses chat, FAIL if access denied
- Step 2: PASS if student sees their channels, FAIL if cannot access appropriate channels
- Step 3: PASS if student can send messages, FAIL if messaging broken
- Step 4: PASS if no creation controls visible, FAIL if + buttons or creation options shown
- Step 5: PASS if DM creation restricted, FAIL if student can initiate DMs
- Step 6: PASS if teacher/admin has different controls, FAIL if interfaces identical
- Step 7: PASS if group participation works, FAIL if excluded or broken
- Step 8: PASS if permissions enforced properly, FAIL if violations allowed
- Step 9: PASS if notifications work, FAIL if student doesn't receive messages
- Step 10: PASS if invitation workflow works, FAIL if student cannot join new channels
- Step 11: PASS if error handling appropriate, FAIL if poor handling or system crashes
- Step 12: PASS if message formatting equal, FAIL if student messages treated differently

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== NOTES FOR TESTER ===

- This test is critical for security and business rule compliance
- Focus on role-based permission differences between student and teacher/admin
- Document any security concerns or permission violations
- Test with real student account, not admin account with student role
- Pay attention to UI differences that indicate proper role enforcement
- Verify that students have equal participation rights within existing channels
- Note any user experience issues that might confuse students
- Test edge cases where students might try to circumvent restrictions
- Ensure proper business rule implementation per educational platform requirements
