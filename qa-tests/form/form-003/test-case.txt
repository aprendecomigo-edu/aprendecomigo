QA Test Case: Add Student Profile

Test ID: FORM-003
Test Name: Add Student Profile Modal and Registration
Purpose: Verify that school managers can successfully add new student profiles through the add student modal, including proper form validation and data persistence
Expected Result: Modal opens with student registration form, validates all inputs correctly, and successfully creates student profile

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend with web support
- Authentication: Passwordless email verification with Knox tokens
- User Role: School Manager/Owner with permissions to add students

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Test Email: anapmc.carvalho@gmail.com
- User Role: school_owner
- Test Student Data:
  - Name: "João Silva"
  - Email: "joao.silva.test@example.com"
  - Phone: "+351 912 345 678"
  - Birth Date: "2005-05-15"
  - Grade/Year: "10º ano"

Prerequisites:
- User must be authenticated and on the /users page
- Students tab must be accessible
- "Adicionar aluno" (Add student) button must be visible
- Educational systems/courses should be available for selection

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend
  python manage.py runserver --settings=aprendecomigo.settings.development
  # In new terminal:
  cd frontend-ui
  npm start

Expected: Both servers running, user authenticated and on /users page
Screenshot: 01_environment_ready.png

Step 2: Navigate to Students Tab
1. Ensure you are on http://localhost:8081/users
2. Click on "Alunos" (Students) tab
3. Verify students list is visible (may be empty initially)
4. Locate "Adicionar aluno" (Add student) button
5. Verify button is enabled and clickable

Expected: Students tab active with add student button visible
Screenshot: 02_students_tab_with_add_button.png

Step 3: Open Add Student Modal
1. Click on "Adicionar aluno" (Add student) button
2. Wait for modal to open and load completely
3. Verify modal appears with student registration form
4. Check modal title and close button functionality

Expected: Add student modal opens with complete form
Screenshot: 03_add_student_modal_opened.png

Step 4: Verify Form Structure and Fields
1. Check for all required student fields:
   - Full name field
   - Email address field
   - Phone number field (optional)
   - Birth date field or date picker
   - Educational level/grade selection
   - Any additional profile fields
2. Verify form labels and placeholders are in Portuguese
3. Check submit/save button presence

Expected: Complete student registration form with all necessary fields
Screenshot: 04_form_structure_complete.png

Step 5: Test Educational System/Grade Selection
1. Locate educational level or grade selection dropdown
2. Verify available options are loaded (e.g., "6º ano", "7º ano", etc.)
3. Test dropdown functionality
4. Try selecting different grade levels
5. Check for proper Portuguese educational system options

Expected: Grade/level selection works with proper options
Screenshot: 05_grade_selection_working.png

Step 6: Fill Student Information Form
1. Enter student full name: "João Silva"
2. Enter email address: "joao.silva.test@example.com"
3. Enter phone number: "+351 912 345 678"
4. Select or enter birth date: "2005-05-15"
5. Select educational level: "10º ano" (or available equivalent)
6. Fill any additional optional fields

Expected: All form fields accept input correctly
Screenshot: 06_form_filled_correctly.png

Step 7: Test Input Validation
1. Test email validation:
   - Try invalid email format
   - Try empty email field
   - Verify proper email format accepted
2. Test phone number validation (if applicable)
3. Test birth date validation:
   - Try future dates
   - Try invalid date formats
4. Test required field validation

Expected: Form validation works with appropriate error messages
Screenshot: 07_input_validation_working.png

Step 8: Test Form Submission
1. Ensure all required fields are completed correctly
2. Click submit/save button
3. Verify loading state appears during submission
4. Wait for submission to complete
5. Check for success confirmation

Expected: Form submits successfully with loading feedback
Screenshot: 08_form_submission_success.png

Step 9: Verify Student Profile Creation
1. Check that modal closes after successful submission
2. Verify students list now includes the new student
3. Check that student information displays correctly:
   - Name: "João Silva"
   - Email: "joao.silva.test@example.com"
   - Grade level as selected
   - Status should show as active
4. Look for success notification

Expected: Student profile appears in list with correct information
Screenshot: 09_student_profile_created.png

Step 10: Test Multiple Student Addition
1. Open add student modal again
2. Add a second student with different information
3. Verify both students appear in the list
4. Check that list updates correctly
5. Verify no conflicts between student records

Expected: Multiple students can be added successfully
Screenshot: 10_multiple_students_added.png

Step 11: Test Error Handling and Edge Cases
1. Try adding student with duplicate email
2. Test network disconnection during submission
3. Try submitting form with missing required fields
4. Test form reset after errors
5. Verify appropriate error messages for each case

Expected: Graceful error handling with clear user feedback
Screenshot: 11_error_handling_tested.png

Step 12: Backend Validation and Data Persistence
1. Check Django backend logs for student creation
2. Verify API calls to student endpoints
3. Check database for new student records
4. Verify student data matches form input
5. Check that school associations are correct

Expected: Backend processes student creation correctly
Screenshot: 12_backend_validation_clean.png

Step 13: Test Import List Button (if functional)
1. Locate "Importar lista" (Import list) button
2. Click button to test functionality
3. Check if import dialog/modal opens
4. Verify appropriate file upload or import interface
5. Note: May not be fully implemented - document current state

Expected: Import functionality either works or shows planned feature state
Screenshot: 13_import_functionality_tested.png

=== PASS/FAIL CRITERIA ===

PASS: Modal opens successfully AND form validates properly AND student profile creates successfully AND appears in students list with correct data AND modal closes after submission AND user receives clear feedback
FAIL: Modal fails to open OR validation broken OR profile creation fails OR data incorrect OR modal doesn't close OR no submission feedback

UX/BEHAVIORAL REQUIREMENTS:
- Modal should close automatically after successful student creation
- Clear success feedback should be provided (notification, toast, confirmation message)
- Student should appear immediately in the students list after creation
- Loading state should be shown during form submission
- Error states should be clearly communicated if submission fails
- Form should be disabled/show loading during submission to prevent double-submission
- Success feedback should include next steps or confirmation of email sent to student

Individual Step Criteria:
- Step 1-2: PASS if environment ready and students tab accessible, FAIL if setup issues
- Step 3: PASS if modal opens, FAIL if button doesn't work or modal broken
- Step 4: PASS if form structure complete, FAIL if missing fields or layout issues
- Step 5: PASS if grade selection works, FAIL if dropdown broken or options missing
- Step 6: PASS if form accepts all input, FAIL if input fields not functioning
- Step 7: PASS if validation works properly, FAIL if validation missing or incorrect
- Step 8: PASS if submission succeeds, FAIL if form doesn't submit or errors
- Step 9: PASS if student appears in list, FAIL if creation not reflected in UI
- Step 10: PASS if multiple students work, FAIL if list management broken
- Step 11: PASS if errors handled well, FAIL if poor error handling
- Step 12: PASS if backend processes correctly, FAIL if API or database issues
- Step 13: PASS if import button state clear, FAIL if completely broken

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

Notes:
- Focus on complete student registration workflow
- Verify Portuguese educational system integration
- Test both success and error scenarios thoroughly
- Ensure proper data validation and persistence
- Document any unimplemented features (like import) appropriately
