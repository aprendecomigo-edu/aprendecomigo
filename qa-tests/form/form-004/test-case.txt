QA Test Case: Add Teacher Button State Management

Test ID: FORM-004
Test Name: "Add me as teacher" Button Visibility Logic
Purpose: Verify that the "Add me as teacher" button displays correctly based on user's existing teacher profile status, preventing duplicate teacher profiles and user confusion
Expected Result: Button is visible when user has no teacher profile, hidden when user already has teacher profile, with appropriate UX feedback

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend with web support
- Authentication: Passwordless email verification with Knox tokens
- User Role: School Manager/Owner testing teacher profile creation

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data Requirements:
- Test User 1: anapmc.carvalho@gmail.com (NO existing teacher profile)
- Test User 2: Second user account (WITH existing teacher profile)
- Both users must have school_owner role
- Database must have course data available for teacher registration

Prerequisites:
- Clean database state with known user configurations
- Authentication system functional
- /users page accessible with Teachers tab
- API endpoints for teacher profile management working

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Database Preparation
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev
  cd backend
  # Verify no teacher profile for test user 1
  python manage.py shell -c "
  from accounts.models import CustomUser, TeacherProfile
  user = CustomUser.objects.get(email='anapmc.carvalho@gmail.com')
  existing = TeacherProfile.objects.filter(user=user).exists()
  print(f'User {user.email} has teacher profile: {existing}')
  "

Expected: Environment ready, user 1 confirmed WITHOUT teacher profile
Screenshot: 01_environment_database_ready.png

Step 2: Test Scenario A - User WITHOUT Teacher Profile
1. Navigate to http://localhost:8081/users
2. Authenticate as anapmc.carvalho@gmail.com (user without teacher profile)
3. Click on "Professores" (Teachers) tab
4. Observe the teachers list and action buttons
5. Specifically look for "Adicionar-me como professor" button

Expected: "Add me as teacher" button IS visible and enabled
Screenshot: 02_button_visible_no_teacher_profile.png

Step 3: Verify Button Functionality for User Without Profile
1. Ensure "Adicionar-me como professor" button is present
2. Verify button styling indicates it's enabled/clickable
3. Check button positioning in the interface
4. Hover over button to verify hover states work
5. Verify no tooltip or message indicating user already has profile

Expected: Button appears functional and properly styled
Screenshot: 03_button_functional_styling.png

Step 4: Test Button Click for User Without Profile
1. Click on "Adicionar-me como professor" button
2. Verify modal opens successfully
3. Check that teacher onboarding form loads properly
4. Verify all form fields are available for completion
5. Close modal without submitting (cancel or X button)

Expected: Modal opens normally, form accessible, can cancel properly
Screenshot: 04_modal_opens_successfully.png

Step 5: Create Teacher Profile to Change User State
1. Reopen "Adicionar-me como professor" modal
2. Fill out the teacher onboarding form completely
3. Select at least one course/subject
4. Submit the form successfully
5. Wait for success confirmation and modal closure
6. Verify teacher appears in the teachers list

Expected: Teacher profile created successfully, appears in list
Screenshot: 05_teacher_profile_created.png

Step 6: Test Scenario B - Verify Button Hidden After Profile Creation
1. Ensure you're still on the Teachers tab
2. Refresh the page to ensure fresh data load
3. Look for "Adicionar-me como professor" button
4. Verify button is NO LONGER visible
5. Check that only "Convidar professor" button remains

Expected: "Add me as teacher" button is HIDDEN, only invite button visible
Screenshot: 06_button_hidden_after_creation.png

Step 7: Verify Teachers List Shows Created Profile
1. Check teachers list displays your newly created profile
2. Verify your name/email appears in the teachers table
3. Check that teacher status shows as active
4. Verify selected courses/subjects are displayed
5. Confirm data matches what was entered in the form

Expected: Your teacher profile appears correctly in the list
Screenshot: 07_teacher_profile_in_list.png

Step 8: Test Database Verification of Button Logic
Commands in Django shell:
  python manage.py shell -c "
  from accounts.models import CustomUser, TeacherProfile
  user = CustomUser.objects.get(email='anapmc.carvalho@gmail.com')
  teacher_profile = TeacherProfile.objects.filter(user=user).first()
  print(f'User: {user.email}')
  print(f'Has teacher profile: {teacher_profile is not None}')
  if teacher_profile:
      print(f'Teacher ID: {teacher_profile.id}')
      print(f'Specialty: {teacher_profile.specialty}')
  "

Expected: Database confirms user now has teacher profile
Screenshot: 08_database_verification.png

Step 9: Test with Different User Account (User WITH Existing Profile)
1. Create or use second test user account with existing teacher profile
2. Authenticate as the second user
3. Navigate to /users page, Teachers tab
4. Look for "Adicionar-me como professor" button
5. Verify button is NOT visible for this user

Expected: Button is hidden for user who already has teacher profile
Screenshot: 09_button_hidden_existing_user.png

Step 10: Test Page Refresh and State Persistence
1. While logged in as user with teacher profile
2. Refresh the /users page multiple times
3. Navigate away and back to Teachers tab
4. Verify button remains hidden consistently
5. Check that teachers list always shows user's profile

Expected: Button state persists correctly across page loads
Screenshot: 10_state_persistence_verified.png

Step 11: Test Edge Case - Manual Teacher Profile Deletion
Commands to temporarily remove teacher profile:
  python manage.py shell -c "
  from accounts.models import CustomUser, TeacherProfile
  user = CustomUser.objects.get(email='anapmc.carvalho@gmail.com')
  TeacherProfile.objects.filter(user=user).delete()
  print('Teacher profile deleted for testing')
  "

1. Refresh /users page after profile deletion
2. Verify "Add me as teacher" button reappears
3. Check that user no longer appears in teachers list

Expected: Button reappears when teacher profile is removed
Screenshot: 11_button_reappears_after_deletion.png

Step 12: Test Real-time State Updates (If Applicable)
1. In one browser tab, have the Teachers page open
2. In another tab/tool, create a teacher profile for the user via API
3. Return to first tab and check if button state updates
4. Test if page refresh is needed for state change
5. Verify behavior is consistent

Expected: Either real-time update or consistent behavior with refresh
Screenshot: 12_realtime_updates_tested.png

=== PASS/FAIL CRITERIA ===

PASS: Button correctly hidden when user has teacher profile AND button correctly shown when user has no teacher profile AND button functionality works properly when visible AND state persists across page loads AND edge cases handled appropriately

FAIL: Button shows when it shouldn't OR button hidden when it should show OR button state inconsistent OR functionality broken when visible OR state doesn't persist

UX/BEHAVIORAL REQUIREMENTS:
- "Add me as teacher" button MUST be hidden if user already has teacher profile
- Button MUST be visible and functional if user has no teacher profile
- Button state must update immediately after teacher profile creation
- No confusing UI elements - if button is hidden, user should understand why
- State must persist across page refreshes and navigation
- Teachers list must accurately reflect button state (if user in list, button hidden)

EDGE CASE SCENARIOS:
- User creates teacher profile in another tab/session
- Database state changes during user session
- Network issues during profile creation
- Multiple users modifying same data simultaneously
- Profile deletion/recreation scenarios

USER FLOW VALIDATION:
- Clear understanding of why button appears/disappears
- Consistent behavior across all user interactions
- No opportunity for user confusion about profile status
- Graceful handling of state transitions

Individual Step Criteria:
- Steps 1-2: PASS if environment ready and button visible for user without profile
- Step 3: PASS if button properly styled and functional-looking
- Step 4: PASS if button works normally when clicked
- Step 5: PASS if profile creation succeeds normally
- Step 6: PASS if button disappears after profile creation
- Step 7: PASS if created profile appears in teachers list
- Step 8: PASS if database state matches UI state
- Step 9: PASS if button hidden for different user with existing profile
- Step 10: PASS if state persists across page interactions
- Step 11: PASS if button reappears when profile deleted
- Step 12: PASS if real-time updates work or behavior is consistent

Overall Result: PASS only if ALL steps pass AND all UX requirements met
Special Focus: Button visibility logic must be bulletproof - no false positives or negatives

Notes:
- This test specifically validates the UX fix for FORM-002 issue
- Focus on preventing user confusion about profile status
- Verify that button state management is reliable and consistent
- Test covers both positive and negative scenarios thoroughly
- Database manipulation tests edge cases that might occur in production
