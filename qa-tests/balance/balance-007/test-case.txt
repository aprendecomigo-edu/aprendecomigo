QA Test Case: Student Hour Balance Dashboard - Complete Flow E Testing

Test ID: BALANCE-007
Test Name: Complete Flow E - Student Hour Balance Dashboard End-to-End Journey
Purpose: Verify all 4 sub-issues of Flow E work together seamlessly for low balance + renewal scenario
Expected Result: User receives notifications and can successfully renew/top-up with real-time balance updates

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Student Balance Monitoring System (Issue #57)
- Architecture: Django REST Framework backend + React Native web frontend
- Test covers Issues #107, #108, #109, #110 integration

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Development servers running: `make dev-open`
3. Backend at http://localhost:8000, Frontend at http://localhost:8081
4. Database with test student data

Test Data Requirements:
- Student test user with email: test.student@aprendecomigo.com
- Student should have balance between 1-2 hours (to trigger low balance alerts)
- At least one saved payment method for quick renewal
- One active package close to expiry (within 7 days)
- School owner/admin user for managing test data

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Student Balance Preparation
Commands:
  make dev-open
  # Wait for servers to start

Expected: Development environment running, both backend and frontend accessible
Screenshot: 01_dev_environment_started.png

Step 2: Create Test Student with Low Balance
1. Navigate to http://localhost:8081
2. Sign in as school admin
3. Create/modify student test.student@aprendecomigo.com
4. Set student balance to 1.5 hours (triggers low balance alert)
5. Ensure student has at least one saved payment method
6. Create package expiring in 5 days

Expected: Test student created with low balance conditions
Screenshot: 02_test_student_setup.png
Debug: Check server logs for any setup errors: `make logs`

Step 3: Test Backend Notification System (Issue #107)
1. Make API call to trigger balance monitoring:
   curl -X POST http://localhost:8000/api/notifications/trigger-balance-check/
2. Verify notification creation:
   curl -H "Authorization: Token [student_token]" http://localhost:8000/api/notifications/
3. Check unread count:
   curl -H "Authorization: Token [student_token]" http://localhost:8000/api/notifications/unread-count/

Expected: 
- Low balance notification created (notification_type: "low_balance")
- Email notification sent to student
- Unread count > 0
- No duplicate notifications within 24h cooldown
Screenshot: 03_backend_notifications_created.png

Step 4: Test In-App Notification UI (Issue #109)
1. Sign in as student (test.student@aprendecomigo.com)
2. Navigate to student dashboard
3. Verify notification badge appears in header
4. Check balance status indicators (should show red/warning color)
5. Click notification center icon
6. Verify low balance notification appears
7. Mark notification as read

Expected:
- Red/warning visual indicators for low balance
- Notification badge shows correct count
- Low balance notification visible in notification center
- Notification can be marked as read
- Real-time balance updates without page refresh
Screenshot: 04_frontend_notifications_ui.png

Step 5: Test Balance Dashboard Visual Status (Issue #109)
1. Navigate to /student/balance page
2. Verify balance status bar shows correct status (red for <2 hours)
3. Check color coding of remaining hours display
4. Verify "Buy Hours" button appears prominently
5. Check balance summary display accuracy
6. Verify active packages section shows correctly
7. Check upcoming expirations warning display

Expected:
- Balance status bar shows red/critical status
- Remaining hours display in red color (1.5 hours)
- "Buy Hours" button visible and prominent
- Package expiration warning displayed (5 days left)
- All balance information accurate and clearly presented
Screenshot: 05_balance_dashboard_visual_status.png

Step 6: Test Quick Top-Up Packages API (Issue #108)
1. Make API call to get available packages:
   curl -H "Authorization: Token [student_token]" http://localhost:8000/api/finances/student-balance/topup-packages/
2. Verify response includes 5, 10, 20 hour packages
3. Check pricing calculations are correct

Expected:
- API returns 3 quick top-up packages (5, 10, 20 hours)
- Each package has correct pricing
- Response includes description and benefits
Screenshot: 06_topup_packages_api.png

Step 7: Test Quick Top-Up Frontend Interface (Issue #110)
1. From balance dashboard, click "Buy Hours" button
2. Verify quick top-up panel appears
3. Check that 5, 10, 20 hour packages are displayed
4. Select 5-hour package
5. Verify saved payment method appears
6. Check confirmation modal shows transaction details
7. Do NOT complete payment yet (test payment in next step)

Expected:
- Quick top-up panel loads with preset packages
- 5, 10, 20 hour options visible with pricing
- Saved payment method available for selection
- Confirmation modal shows correct amount and hours
- UI is responsive and accessible
Screenshot: 07_quick_topup_interface.png

Step 8: Test Quick Top-Up Payment Processing (Issue #108)
1. Complete the 5-hour package purchase from previous step
2. Make API call to process quick top-up:
   curl -X POST -H "Authorization: Token [student_token]" \
        -H "Content-Type: application/json" \
        -d '{"hours": "5.00", "payment_method_id": "pm_test123"}' \
        http://localhost:8000/api/finances/student-balance/quick-topup/
3. Verify transaction is created and processed
4. Check balance update in real-time

Expected:
- Payment processes successfully
- New transaction created with type "quick_topup"
- Student balance increases by 5 hours (1.5 â†’ 6.5 hours)
- Balance updates in real-time on frontend
- Success confirmation displayed
Screenshot: 08_quick_topup_success.png

Step 9: Test One-Click Subscription Renewal (Issue #108 & #110)
1. Navigate back to balance dashboard
2. Find expiring package (5 days left)
3. Click "Renew" button on the package
4. Verify one-click renewal modal appears
5. Check saved payment method is pre-selected
6. Click "Renew Now" button
7. Make API call to test renewal:
   curl -X POST -H "Authorization: Token [student_token]" \
        -H "Content-Type: application/json" \
        -d '{"original_transaction_id": 123, "payment_method_id": "pm_test123"}' \
        http://localhost:8000/api/finances/student-balance/renew-subscription/

Expected:
- One-click renewal button appears on expiring packages
- Renewal modal shows package details and saved payment method
- Renewal processes successfully
- Package expiry date extended
- Balance reflects renewed package
Screenshot: 09_one_click_renewal.png

Step 10: Test Package Expiration Notifications (Issue #107)
1. Modify test package to expire in 2 days
2. Trigger expiration notification check:
   curl -X POST http://localhost:8000/api/notifications/trigger-expiration-check/
3. Verify package expiring notification created
4. Check email notification sent
5. Verify notification appears in student UI

Expected:
- Package expiring notification created (notification_type: "package_expiring")
- Email sent to student with expiration warning
- Notification appears in student notification center
- Expiration warning badge shows on dashboard
Screenshot: 10_package_expiration_notifications.png

Step 11: Test Balance Status Visual Updates (Issue #109)
1. Verify balance status changed from red to green/normal after top-up
2. Check remaining hours display now shows 6.5 hours in normal color
3. Verify "Buy Hours" button is less prominent or hidden
4. Check balance status bar shows normal/healthy status
5. Confirm real-time updates work without page refresh

Expected:
- Balance status indicators change from red to green/normal
- Hours display changes from red (1.5) to normal color (6.5)
- Status bar shows healthy balance status
- "Buy Hours" button less prominent
- All updates happen in real-time
Screenshot: 11_balance_status_updated.png

Step 12: Test Notification Center Management (Issue #109)
1. Open notification center
2. Verify both low balance and package expiring notifications visible
3. Mark low balance notification as read
4. Verify read status updates immediately
5. Check unread count decreases
6. Test notification filtering by type

Expected:
- Notification center shows all notifications
- Read/unread status works correctly
- Unread count updates in real-time
- Notifications can be filtered by type
- UI updates immediately when notifications marked as read
Screenshot: 12_notification_center_management.png

Step 13: Test Cross-Platform Compatibility
1. Test balance dashboard on different screen sizes
2. Verify mobile responsiveness of notification UI
3. Check touch interactions work properly
4. Test keyboard navigation accessibility
5. Verify all components render correctly

Expected:
- Dashboard responsive on all screen sizes
- Touch interactions work smoothly
- Keyboard navigation functional
- No layout breaks or rendering issues
- Accessibility requirements met
Screenshot: 13_cross_platform_compatibility.png

Step 14: Test API Security and Data Isolation (Issue #108)
1. Test that students can only access their own balance data
2. Try accessing another student's balance with current token
3. Verify saved payment methods are user-isolated
4. Test that renewal/top-up APIs validate user ownership
5. Check that notifications are user-scoped

Expected:
- API returns 403/404 for unauthorized access attempts
- Students can only see their own data
- Payment methods properly isolated by user
- All APIs validate user permissions correctly
- No data leakage between users
Screenshot: 14_api_security_validation.png

Step 15: Test Error Handling and Edge Cases
1. Test behavior with invalid payment methods
2. Try renewal with expired/invalid transaction ID
3. Test top-up with invalid hour amounts
4. Simulate network errors during payment processing
5. Test notification system with malformed data
6. Verify graceful error handling throughout

Expected:
- Proper error messages for invalid requests
- Graceful handling of network errors
- User-friendly error notifications
- No crashes or system failures
- Appropriate fallbacks for failed operations
Screenshot: 15_error_handling_validation.png

=== PASS/FAIL CRITERIA ===

PASS: ALL of the following conditions must be met:
1. Backend notification system creates and sends alerts correctly (Issue #107)
2. Payment system processes renewals and top-ups successfully (Issue #108)
3. Frontend displays notifications and balance status accurately (Issue #109)
4. Renewal interface provides seamless one-click experience (Issue #110)
5. Complete user journey works end-to-end without errors
6. Real-time updates work correctly throughout
7. All visual indicators and status changes work properly
8. Security and data isolation work correctly
9. Error handling is graceful and user-friendly
10. Cross-platform compatibility maintained

FAIL: ANY of the following conditions:
- Any API endpoint returns unexpected errors
- Notifications not created or not displayed properly
- Payment processing fails or creates incorrect transactions
- Balance updates don't reflect in real-time
- Visual status indicators don't match actual balance status
- One-click renewal doesn't work smoothly
- Quick top-up packages not available or incorrectly priced
- User can access other users' data (security violation)
- UI breaks on different screen sizes
- Error handling causes crashes or poor user experience

Individual Step Criteria:
- Step 1-2: PASS if development environment starts and test data created
- Step 3: PASS if backend notifications created and emails sent
- Step 4: PASS if in-app notifications display correctly with proper visual indicators
- Step 5: PASS if balance dashboard shows accurate status with correct color coding
- Step 6: PASS if top-up packages API returns correct data
- Step 7: PASS if quick top-up interface displays properly
- Step 8: PASS if payment processing completes and balance updates
- Step 9: PASS if one-click renewal works end-to-end
- Step 10: PASS if package expiration notifications work correctly
- Step 11: PASS if balance status updates visually after transactions
- Step 12: PASS if notification center management works properly
- Step 13: PASS if cross-platform compatibility maintained
- Step 14: PASS if security validation prevents unauthorized access
- Step 15: PASS if error handling is graceful and appropriate

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails