QA Test Case: Navigation from Parent Page to Auth

Test ID: PARENTS-002
Test Name: Parent Subscription Page to Authentication Navigation Flow
Purpose: Verify that parents can successfully navigate from the subscription page to signin and signup pages, and that navigation works in both directions
Expected Result: Sign In and Sign Up links work correctly, auth pages load properly, and back navigation returns to parent subscription page

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend with Expo Router
- Navigation: Uses Expo Router with file-based routing
- Auth Routes: /auth/signin and /auth/signup

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development  
   - EXPO_PUBLIC_ENV=development
4. Backend Server: Django running on http://localhost:8000
5. Frontend Server: Expo dev server on http://localhost:8081

Test Data:
- No specific test data required for navigation testing
- Authentication should not be required to access auth pages
- Test user email: anapmc.carvalho@gmail.com (for form testing if needed)

Prerequisites:
- Both servers must be running
- Landing page should be accessible (LANDING-001 should pass)
- Auth pages should exist and be configured in routing

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Parent Page Access
1. Start both backend and frontend servers
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend && python manage.py runserver &
  cd ../frontend-ui && npm start

2. Open browser to http://localhost:8081/parents
3. Verify parent subscription page loads (prerequisite)

Expected: Parent subscription page displays with auth links at bottom
Screenshot: 01_parents_page_loaded.png

Step 2: Sign In Link Navigation Test
1. Scroll to bottom of parent subscription page
2. Locate "Sign In" link in authentication section
3. Click the "Sign In" link
4. Wait for page transition/navigation

Expected: Browser navigates to signin page (/auth/signin route)
Screenshot: 02_signin_page_loaded.png

Step 3: Sign In Page Content Verification
1. Verify signin page displays correctly with:
   - "Log in" heading
   - "Enter your email to receive a login code" text
   - Email input field
   - "Send Code" or similar button
   - Back arrow/button (if present)
2. Check that URL is correct: should show /auth/signin

Expected: Signin page loads with all expected elements
Screenshot: 03_signin_page_content.png

Step 4: Back Navigation from Sign In
1. Look for back button or arrow on signin page
2. If present, click back button
3. If no back button, use browser back button
4. Verify return to parent subscription page

Expected: Successfully returns to parent subscription page
Screenshot: 04_back_to_parents.png

Step 5: Sign Up Link Navigation Test  
1. From parent subscription page, locate "Sign Up" link
2. Click the "Sign Up" link
3. Wait for page transition

Expected: Browser navigates to signup page (/auth/signup route)
Screenshot: 05_signup_page_loaded.png

Step 6: Sign Up Page Content Verification
1. Verify signup page displays with:
   - Registration form elements
   - Required fields (name, email, school info, etc.)
   - Form submission button
   - Back navigation option
2. Check URL shows /auth/signup

Expected: Signup page loads with complete registration form
Screenshot: 06_signup_page_content.png

Step 7: Back Navigation from Sign Up
1. Use back button (on page or browser) to return to landing
2. Verify landing page loads correctly after navigation

Expected: Successfully returns to landing page from signup
Screenshot: 07_back_from_signup.png

Step 8: Direct URL Access Test
1. Manually type http://localhost:8081/landing in browser address bar
2. Press Enter to navigate
3. Verify landing page loads correctly

Expected: Landing page accessible via direct URL
Screenshot: 08_direct_url_access.png

Step 9: Cross-Navigation Between Auth Pages
1. Navigate to signin page from landing
2. Look for "Sign up" link on signin page
3. If present, click to navigate to signup
4. Look for "Sign in" link on signup page  
5. Test navigation between auth pages

Expected: Can navigate between signin/signup pages if links exist
Screenshot: 09_auth_cross_navigation.png

Step 10: Landing Page State Preservation
1. Navigate from landing → signin → back to landing
2. Verify landing page scroll position is preserved (should be at bottom)
3. Navigate from landing → signup → back to landing  
4. Check that page state is consistent

Expected: Landing page maintains proper state after navigation
Screenshot: 10_state_preservation.png

Step 11: URL Structure and Browser History Test
1. Start at landing page
2. Navigate: landing → signin → signup → back → back
3. Check browser back/forward buttons work correctly
4. Verify URL changes appropriately at each step
5. Test browser refresh on each page

Expected: Browser history works correctly, URLs are clean, refresh works
Screenshot: 11_browser_history.png

Step 12: Error Handling and Edge Cases
1. Test navigation with slow network (throttle in dev tools)
2. Test rapid clicking of navigation links
3. Test navigation during page load
4. Check for any console errors during navigation

Expected: Navigation remains stable under edge conditions
Screenshot: 12_error_handling.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND:
- Sign In link successfully navigates to /auth/signin
- Sign Up link successfully navigates to /auth/signup
- Both auth pages load with expected content and functionality
- Back navigation returns to landing page in all cases
- Browser history and URL structure work correctly
- No navigation errors or broken links
- Page state is preserved appropriately

FAIL: Any step fails OR:
- Navigation links don't work or navigate to wrong pages
- Auth pages don't load or display incorrectly
- Back navigation fails or goes to wrong page  
- Browser history is broken or URLs malformed
- Console errors occur during navigation
- Navigation is unreliable or inconsistent

Individual Step Criteria:
- Step 1: PASS if landing page loads with auth links, FAIL if page doesn't load
- Step 2: PASS if Sign In link navigates to signin page, FAIL if navigation fails
- Step 3: PASS if signin page displays correctly, FAIL if page broken or missing elements
- Step 4: PASS if back navigation returns to landing, FAIL if navigation fails
- Step 5: PASS if Sign Up link navigates to signup page, FAIL if navigation fails
- Step 6: PASS if signup page displays correctly, FAIL if page broken or missing elements  
- Step 7: PASS if back navigation works from signup, FAIL if navigation fails
- Step 8: PASS if direct URL access works, FAIL if URL doesn't load landing page
- Step 9: PASS if cross-navigation works (when applicable), FAIL if links broken
- Step 10: PASS if page state preserved, FAIL if state lost or page broken
- Step 11: PASS if browser history works correctly, FAIL if history/URLs broken
- Step 12: PASS if no errors under edge conditions, FAIL if navigation unstable

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Navigation should be intuitive and follow web standards
- Back navigation should work consistently (page back button or browser back)  
- URLs should be clean and bookmarkable
- Navigation should work smoothly without jarring transitions
- Auth pages should be accessible but not interfere with landing page purpose
- Loading states during navigation should be handled gracefully
- Navigation should work across different devices and browsers