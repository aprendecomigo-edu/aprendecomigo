QA Test Case: Budget Control and Spending Limits Management

Test ID: PARENTS-006
Test Name: Family Budget Control and Spending Limits Implementation
Purpose: Verify parent can set and manage spending limits, monitor budget utilization, and receive alerts for budget thresholds
Expected Result: Budget controls work correctly, spending limits are enforced, and parents receive appropriate budget alerts

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend with Expo Router
- Implementation: Family budget control system (GitHub Issue #58, #111, #112)
- Models: FamilyBudgetControl in finances/models.py
- API: parentApi.ts with budget control endpoints

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development
4. Backend Server: Django running on http://localhost:8000
5. Frontend Server: Expo dev server on http://localhost:8081

Test Data:
- Parent Email: budget.parent@example.com
- Child 1 Email: budget.child1@example.com
- Child 2 Email: budget.child2@example.com
- Parent Name: Budget Parent
- Child 1 Name: Budget Child One
- Child 2 Name: Budget Child Two
- Monthly Budget: €100
- Weekly Budget: €25
- Daily Budget: €10
- Auto-Approval Threshold: €15

Prerequisites:
- Parent-child relationships established (use PARENTS-004 test first)
- Multiple children linked to parent account
- Pricing plans available for testing purchases
- Transaction history system functional
- Notification system working

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Family Account Preparation
1. Ensure servers are running and test accounts created
2. Establish parent with two child accounts
Commands:
  # Verify parent-child relationships exist
  curl -H "Authorization: Bearer {parent_token}" \
    http://localhost:8000/api/v1/accounts/parent-child-relationships/ | jq .

3. Ensure children have some initial account balance for testing
4. Clear any existing budget controls for clean test

Expected: Parent account with two children ready for budget control testing
Screenshot: 01_budget_family_setup.png

Step 2: Parent Access Budget Control Settings
1. Sign in as parent user (budget.parent@example.com)
2. Navigate to parent dashboard
3. Access budget control or family settings section
4. Verify budget control interface is accessible
5. Check that all linked children appear in budget control list

Expected: Parent can access budget control settings for all children
Screenshot: 02_budget_control_access.png

Step 3: Create Budget Control for First Child
1. Select first child for budget configuration
2. Set monthly spending limit: €100
3. Set weekly spending limit: €25
4. Set daily spending limit: €10
5. Set auto-approval threshold: €15 (purchases below this auto-approve)
6. Enable budget control as active
7. Save budget control settings

Expected: Budget control successfully created for first child with all limits
Screenshot: 03_budget_control_child1_created.png

Step 4: Create Different Budget Control for Second Child
1. Select second child for budget configuration
2. Set different limits:
   - Monthly limit: €150
   - Weekly limit: €40
   - Daily limit: €15
   - Auto-approval threshold: €20
3. Enable budget control as active
4. Save budget control settings
5. Verify both children now have different budget controls

Expected: Second child has different budget control settings configured
Screenshot: 04_budget_control_child2_created.png

Step 5: Test Daily Spending Limit Enforcement
1. Sign in as first child (budget.child1@example.com)
2. Attempt purchase for €8 (below daily limit of €10)
3. Verify purchase processes normally (auto-approval or direct purchase)
4. Attempt second purchase for €5 on same day (total €13, exceeds daily limit)
5. Verify system blocks purchase or requires parent approval
6. Check parent receives notification about daily limit approach/breach

Expected: Daily spending limit enforced correctly with appropriate notifications
Screenshot: 05_daily_limit_enforcement.png

Step 6: Test Weekly Spending Limit Enforcement
1. Continue with first child account
2. Over several days, make purchases totaling close to weekly limit (€25)
3. Attempt purchase that would exceed weekly limit
4. Verify system prevents overspending or requires parent approval
5. Check parent dashboard shows weekly spending tracking
6. Verify weekly reset works correctly after week boundary

Expected: Weekly spending limit enforced with proper tracking and reset
Screenshot: 06_weekly_limit_enforcement.png

Step 7: Test Monthly Spending Limit Enforcement
1. Simulate monthly spending approaching limit (€100 for first child)
2. Track spending accumulation in parent dashboard
3. Attempt purchase that would exceed monthly limit
4. Verify system enforces monthly limit appropriately
5. Check parent receives alert about monthly limit approach
6. Test monthly reset functionality

Expected: Monthly spending limit enforced with proper tracking and alerts
Screenshot: 07_monthly_limit_enforcement.png

Step 8: Test Auto-Approval Threshold Functionality
1. Test purchase below auto-approval threshold (€10 < €15 for first child)
2. Verify purchase auto-approves without parent intervention
3. Test purchase above auto-approval threshold (€18 > €15)
4. Verify system requires parent approval
5. Check different thresholds work for different children
6. Verify auto-approval respects other budget limits

Expected: Auto-approval threshold works correctly within budget constraints
Screenshot: 08_auto_approval_threshold_test.png

Step 9: Test Budget Control Modification
1. As parent, edit budget control for first child
2. Increase monthly limit from €100 to €120
3. Decrease auto-approval threshold from €15 to €12
4. Save changes and verify they take effect immediately
5. Test that new limits are enforced for subsequent purchases
6. Verify budget history preserves previous limit information

Expected: Budget control modifications apply correctly to ongoing spending
Screenshot: 09_budget_modification_test.png

Step 10: Test Budget Utilization Tracking and Analytics
1. Navigate to parent budget analytics/tracking dashboard
2. Verify spending utilization displays for each child:
   - Current daily/weekly/monthly spending
   - Percentage of limits used
   - Remaining budget amounts
   - Spending trends and patterns
3. Check graphical representations (charts, progress bars)
4. Test different time period views (daily, weekly, monthly)

Expected: Comprehensive budget utilization tracking with visual analytics
Screenshot: 10_budget_analytics_dashboard.png

Step 11: Test Budget Alert and Notification System
1. Configure budget alert thresholds (75%, 90%, 100% of limits)
2. Trigger alerts by approaching spending limits
3. Verify parent receives notifications via:
   - In-app notifications
   - Email alerts (if configured)
   - Real-time dashboard updates
4. Test alert customization settings
5. Check alert history and acknowledgment

Expected: Budget alert system functions with timely, accurate notifications
Screenshot: 11_budget_alert_system.png

Step 12: Test Budget Control for Multiple Children Simultaneously
1. Have both children attempt purchases simultaneously
2. Verify budget controls work independently for each child
3. Test family-wide spending view in parent dashboard
4. Check cross-child spending comparisons and analytics
5. Verify no budget control interference between children
6. Test aggregate family spending tracking

Expected: Budget controls work independently per child with family-wide visibility
Screenshot: 12_multi_child_budget_test.png

Step 13: Test Budget Control Deactivation and Reactivation
1. Disable budget control for first child
2. Verify child can make purchases without budget restrictions
3. Check parent still receives purchase notifications
4. Reactivate budget control for first child
5. Verify budget limits resume enforcement
6. Test partial budget control (some limits active, others disabled)

Expected: Budget control activation/deactivation works correctly
Screenshot: 13_budget_activation_control.png

Step 14: Test Budget Control API Endpoints
1. Test budget control CRUD operations via API:
Commands:
  # Get budget controls
  curl -H "Authorization: Bearer {parent_token}" \
    http://localhost:8000/api/v1/finances/budget-controls/ | jq .
  
  # Update budget control
  curl -X PATCH -H "Authorization: Bearer {parent_token}" \
    -H "Content-Type: application/json" \
    -d '{"monthly_limit": "200.00"}' \
    http://localhost:8000/api/v1/finances/budget-controls/{id}/
  
  # Test budget utilization endpoint
  curl -H "Authorization: Bearer {parent_token}" \
    http://localhost:8000/api/v1/finances/budget-utilization/ | jq .

2. Verify API responses contain correct budget data
3. Test error handling for invalid budget configurations

Expected: All budget control API endpoints function correctly with proper validation
Screenshot: 14_budget_api_endpoints_test.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND:
- Budget controls can be created and configured for each child
- Daily, weekly, and monthly spending limits are enforced correctly
- Auto-approval thresholds work within budget constraints
- Budget utilization tracking provides accurate spending analytics
- Budget alerts and notifications function timely and accurately
- Budget controls work independently for multiple children
- Budget modifications take effect immediately
- Budget control activation/deactivation works properly
- API endpoints function correctly with proper validation
- Budget data persists correctly across sessions and system restarts

FAIL: Any step fails OR:
- Budget control creation or configuration fails
- Spending limits not enforced or enforced incorrectly
- Auto-approval thresholds don't work as expected
- Budget tracking data inaccurate or missing
- Alert system fails to notify parents of budget events
- Budget controls interfere with each other across children
- Budget modifications don't apply or cause system errors
- API endpoints return errors or incorrect data
- Budget data lost or corrupted between sessions

Individual Step Criteria:
- Step 1: PASS if family accounts ready, FAIL if setup incomplete
- Step 2: PASS if budget interface accessible, FAIL if access denied/broken
- Step 3: PASS if first child budget created, FAIL if creation fails
- Step 4: PASS if second child budget configured differently, FAIL if configuration fails
- Step 5: PASS if daily limits enforced, FAIL if limits ignored
- Step 6: PASS if weekly limits work with reset, FAIL if weekly tracking broken
- Step 7: PASS if monthly limits enforced, FAIL if monthly tracking fails
- Step 8: PASS if auto-approval works correctly, FAIL if threshold logic broken
- Step 9: PASS if budget modifications apply, FAIL if changes don't take effect
- Step 10: PASS if analytics accurate and comprehensive, FAIL if tracking data wrong
- Step 11: PASS if alerts timely and accurate, FAIL if notification system broken
- Step 12: PASS if multi-child controls independent, FAIL if interference occurs
- Step 13: PASS if activation control works, FAIL if enable/disable broken
- Step 14: PASS if API endpoints functional, FAIL if API errors or incorrect data

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Budget control setup should be intuitive and flexible
- Spending limits should be clearly communicated to children when approached
- Budget analytics should provide actionable insights for parents
- Alert system should be informative but not overwhelming
- Budget controls should promote responsible spending habits
- System should maintain family trust through transparency
- Budget tracking should be accurate and real-time
- Emergency override capabilities should be available for parents