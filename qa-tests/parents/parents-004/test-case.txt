QA Test Case: Parent Account Setup and Child Account Linking

Test ID: PARENTS-004
Test Name: Parent Account Setup and Child Account Linking Flow
Purpose: Verify parent can create profile, link child accounts, and establish parent-child relationships for account management
Expected Result: Parent successfully creates profile, links child accounts, and can manage child permissions and relationships

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend with Expo Router
- Implementation: Parent-child account infrastructure (GitHub Issue #58, #111, #112)
- Parent Profile Models: ParentProfile, ParentChildRelationship in accounts/models.py
- Parent API: parentApi.ts with relationship management endpoints

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development
4. Backend Server: Django running on http://localhost:8000
5. Frontend Server: Expo dev server on http://localhost:8081

Test Data:
- Parent Email: test.parent@example.com
- Child 1 Email: test.child1@example.com
- Child 2 Email: test.child2@example.com
- School: Default school from test data
- Parent Name: Test Parent
- Child 1 Name: Test Child One
- Child 2 Name: Test Child Two

Prerequisites:
- Clean database state or test data setup
- Both backend and frontend servers running
- Test user accounts created for parent and children
- School test data available

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
1. Navigate to project directory and activate virtual environment
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend

2. Start Django backend server
Commands:
  python manage.py runserver
  # Verify server starts on http://localhost:8000

3. Open new terminal and start frontend
Commands:
  cd /Users/anapmc/Code/aprendecomigo/frontend-ui
  npm start
  # Verify Expo dev server starts on http://localhost:8081

Expected: Both servers start successfully without errors
Screenshot: 01_servers_running.png

Step 2: Test Data Setup (API Direct)
1. Create test parent user account
Commands:
  curl -X POST http://localhost:8000/api/v1/accounts/register/ \
    -H "Content-Type: application/json" \
    -d '{"email": "test.parent@example.com", "name": "Test Parent", "role": "parent"}'

2. Create test child user accounts
Commands:
  curl -X POST http://localhost:8000/api/v1/accounts/register/ \
    -H "Content-Type: application/json" \
    -d '{"email": "test.child1@example.com", "name": "Test Child One", "role": "student"}'
  
  curl -X POST http://localhost:8000/api/v1/accounts/register/ \
    -H "Content-Type: application/json" \
    -d '{"email": "test.child2@example.com", "name": "Test Child Two", "role": "student"}'

3. Verify test accounts created successfully
Commands:
  curl http://localhost:8000/api/v1/accounts/users/ | jq '.results[] | select(.email | contains("test."))'

Expected: Three test user accounts created (1 parent, 2 children)
Screenshot: 02_test_data_created.png

Step 3: Parent Login and Initial Profile Access
1. Navigate to http://localhost:8081 in browser
2. Sign in as parent user (test.parent@example.com)
3. Complete any required onboarding steps
4. Navigate to parent dashboard/profile area

Expected: Parent successfully logs in and accesses dashboard
Screenshot: 03_parent_login_success.png

Step 4: Parent Profile Creation and Setup
1. Locate parent profile setup or creation form
2. Fill in parent profile information:
   - Notification preferences (email enabled, SMS disabled)
   - Default approval settings
   - Communication preferences
3. Save parent profile

Expected: Parent profile created successfully with configured settings
Screenshot: 04_parent_profile_setup.png

Step 5: Add First Child to Parent Account
1. Navigate to "Add Child" or "Link Child Account" section
2. Enter first child's email: test.child1@example.com
3. Select relationship type: "Parent"
4. Set as primary contact: Yes
5. Configure permissions for this child
6. Submit child linking request

Expected: Child account successfully linked to parent with appropriate relationship
Screenshot: 05_first_child_linked.png

Step 6: Add Second Child to Parent Account
1. Navigate to add another child
2. Enter second child's email: test.child2@example.com
3. Select relationship type: "Parent"
4. Set as primary contact: No
5. Configure different permissions for this child
6. Submit second child linking request

Expected: Second child account successfully linked to parent
Screenshot: 06_second_child_linked.png

Step 7: Verify Parent-Child Relationships in Dashboard
1. Navigate to parent dashboard or family overview
2. Verify both children appear in the parent's account
3. Check that child information displays correctly:
   - Child names and emails
   - Relationship types
   - Permission settings
   - Primary contact status
4. Verify parent can switch between child accounts

Expected: Both children visible in parent dashboard with correct information
Screenshot: 07_family_overview_complete.png

Step 8: Test Parent-Child Relationship Permissions
1. Navigate to child account management
2. Verify parent can access child account details
3. Test viewing child's account balance
4. Test viewing child's transaction history
5. Verify parent cannot access unauthorized child data

Expected: Parent has appropriate access to child accounts per configured permissions
Screenshot: 08_child_permissions_test.png

Step 9: Edit Child Relationship Settings
1. Select first child from family overview
2. Edit relationship settings:
   - Change relationship type or permissions
   - Update notification preferences for this child
   - Modify spending controls (if available)
3. Save changes
4. Verify changes are reflected in dashboard

Expected: Child relationship settings updated successfully
Screenshot: 09_relationship_edit_success.png

Step 10: Remove and Re-add Child Relationship
1. Remove second child from parent account
2. Verify child no longer appears in parent dashboard
3. Re-add the same child with different settings
4. Verify child appears again with new configuration

Expected: Child relationship removal and re-addition works correctly
Screenshot: 10_relationship_management_test.png

Step 11: API Endpoint Verification
1. Test parent profile API endpoints directly:
Commands:
  # Get parent profile
  curl -H "Authorization: Bearer {parent_token}" \
    http://localhost:8000/api/v1/accounts/parent-profiles/me/
  
  # Get parent-child relationships
  curl -H "Authorization: Bearer {parent_token}" \
    http://localhost:8000/api/v1/accounts/parent-child-relationships/

2. Verify API responses contain correct relationship data
3. Test updating relationship via API

Expected: All parent-child relationship API endpoints function correctly
Screenshot: 11_api_endpoints_verified.png

Step 12: Error Handling and Edge Cases
1. Try adding non-existent child email
2. Test adding child that's already linked
3. Test removing primary contact relationship
4. Test accessing child data without proper permissions
5. Verify appropriate error messages and handling

Expected: All error cases handled gracefully with clear messaging
Screenshot: 12_error_handling_verified.png

=== PASS/FAIL CRITERIA ===

PASS: All steps complete successfully AND:
- Parent profile created and configured correctly
- Both child accounts successfully linked to parent
- Parent-child relationships established with proper permissions
- Parent dashboard displays family overview accurately
- Parent can manage child account access appropriately
- API endpoints function correctly for relationship management
- Error handling works properly for edge cases
- All relationship data persists correctly in database

FAIL: Any step fails OR:
- Parent profile creation fails or doesn't persist
- Child account linking fails or creates incorrect relationships
- Permission system doesn't work as expected
- Parent dashboard doesn't display children correctly
- API endpoints return errors or incorrect data
- Error handling is missing or provides poor user experience
- Database integrity issues with relationship data

Individual Step Criteria:
- Step 1: PASS if both servers start without errors, FAIL if either server fails
- Step 2: PASS if all test accounts created successfully, FAIL if creation fails
- Step 3: PASS if parent logs in and accesses dashboard, FAIL if login/access fails
- Step 4: PASS if parent profile setup completes, FAIL if setup fails or doesn't persist
- Step 5: PASS if first child linked successfully, FAIL if linking fails
- Step 6: PASS if second child linked successfully, FAIL if linking fails
- Step 7: PASS if family overview displays correctly, FAIL if children missing/incorrect
- Step 8: PASS if permissions work as expected, FAIL if unauthorized access or access denied
- Step 9: PASS if relationship editing works, FAIL if changes don't persist
- Step 10: PASS if removal/re-addition works, FAIL if relationship management broken
- Step 11: PASS if API endpoints function correctly, FAIL if API errors occur
- Step 12: PASS if error handling appropriate, FAIL if poor error handling

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Parent profile setup should be intuitive and guided
- Child linking process should be straightforward with clear instructions
- Family overview should provide clear visibility into all child accounts
- Permission management should be granular but not overwhelming
- Error messages should be helpful and actionable
- Relationship management should maintain data integrity
- Parent dashboard should be the central hub for family account management