QA Test Case: Teacher Dashboard Consolidated API Integration and Data Validation

Test ID: TEACHDASH-007
Test Name: Teacher Dashboard Consolidated API Integration and Data Validation
Purpose: Verify the consolidated teacher dashboard API (/api/accounts/teachers/consolidated_dashboard/) from GitHub issues #90 and #91 works correctly with proper data loading, caching, and error handling
Expected Result: Teacher dashboard loads all sections with real data from consolidated API within performance requirements

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Platform (EdTech tutoring platform)
- Architecture: Django REST Framework backend + React Native + Expo frontend 
- GitHub Issues: #90 (Backend API), #91 (Frontend Implementation)
- Backend API: /api/accounts/teachers/consolidated_dashboard/
- Frontend Component: /frontend-ui/app/(teacher)/dashboard/index.tsx
- Hook: /frontend-ui/hooks/useTeacherDashboard.ts
- Service: /backend/accounts/services/teacher_dashboard_service.py

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Development servers: `make dev` (starts both backend and frontend)
4. Browser: Chrome or Firefox for web testing

Test Data:
- Test Teacher Email: teacher@test.com (must have user_type: 'teacher')
- Alternative Teacher Email: prof.test@example.com (backup teacher account)
- User Role: teacher (with completed profile wizard)
- Expected Schools: Should have at least one school association
- Expected Students: Should have assigned students for full testing
- Expected Sessions: Should have some scheduled/completed sessions for testing

Prerequisites:
- Teacher must have completed profile wizard (all steps)
- Teacher must be associated with at least one school
- School should have some students assigned to teacher
- Backend consolidated API must be implemented and accessible
- Frontend useTeacherDashboard hook must be implemented
- Authentication system must be working properly

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate  # If virtual environment exists
  make dev
  
Wait for servers to start completely (both backend and frontend)
Check logs with: make logs

Expected: 
- Backend server starts on port (usually 8000)
- Frontend server starts on port (usually 8081)
- No startup errors in logs
- Both servers responding to health checks
Screenshot: 01_servers_started_successfully.png

Step 2: API Endpoint Validation (Direct Testing)
1. Open browser Developer Tools -> Network tab
2. Test API endpoint directly: http://localhost:8000/api/accounts/teachers/consolidated_dashboard/
3. Use proper authentication headers (Knox token)
4. Verify API response structure matches service expectations
5. Check response time is under 500ms requirement

Expected: 
- API returns 200 OK status
- Response contains all required sections: teacher_info, students, sessions, progress_metrics, recent_activities, earnings, quick_stats
- Response time under 500ms
- Data structure matches TeacherDashboardService schema
Screenshot: 02_api_direct_validation.png

Step 3: Teacher Authentication with Correct User Role
1. Navigate to http://localhost:8081
2. Go to sign-in page
3. Enter teacher email: teacher@test.com
4. Complete passwordless authentication flow
5. Verify user has user_type: 'teacher' (not 'admin')
6. Check token is properly stored and retrieved

Expected: 
- Authentication completes successfully
- User profile shows user_type: 'teacher'
- Authentication token is properly stored and accessible
- No AsyncStorage/localStorage integration issues
Screenshot: 03_teacher_authentication_role_verified.png

Step 4: Teacher Dashboard Route Access and Initial Load
1. Verify automatic redirect to /(teacher)/dashboard route
2. Check URL structure follows teacher route pattern
3. Verify page loads without infinite loading states
4. Check useTeacherDashboard hook is called correctly
5. Monitor API call to consolidated dashboard endpoint

Expected: 
- Dashboard loads within 2 seconds
- URL shows /(teacher)/dashboard route
- useTeacherDashboard hook executes successfully
- Consolidated API call is made with proper authentication
- No console errors during page load
Screenshot: 04_dashboard_route_access_verified.png

Step 5: Consolidated API Integration Validation
1. Open browser Developer Tools -> Network tab
2. Filter for XHR/Fetch requests
3. Locate call to /api/accounts/teachers/consolidated_dashboard/
4. Verify request headers include proper authentication
5. Check response data structure and content
6. Verify no duplicate API calls are made

Expected:
- Single consolidated API call loads all dashboard data
- Request includes Knox token authentication header
- Response includes all sections with realistic data
- No duplicate or unnecessary API calls
- Response time under 500ms
Screenshot: 05_consolidated_api_integration.png

Step 6: Teacher Info Section Validation
1. Verify welcome message displays teacher name correctly
2. Check time-based greeting (Bom dia/Boa tarde/Boa noite)
3. Verify teacher profile information displays
4. Check school association information is shown
5. Verify refresh functionality works

Expected:
- Welcome message shows "Bom [time], [Teacher Name]!"
- Teacher profile data loads from API teacher_info section
- School information displays correctly
- Refresh button updates data without page reload
Screenshot: 06_teacher_info_section.png

Step 7: Quick Stats Overview Card Validation
1. Locate Quick Stats section with gradient card design
2. Verify key metrics display from quick_stats API section:
   - Total Students count (total_students)
   - Sessions Today count (sessions_today) 
   - Sessions This Week count (sessions_this_week)
   - Completion Rate percentage (completion_rate)
3. Check numbers are realistic and match API response
4. Verify responsive design adapts to screen size

Expected:
- All metrics display numerical values from API
- Data matches consolidated API quick_stats section
- Card has proper gradient styling
- Responsive layout works correctly
Screenshot: 07_quick_stats_validation.png

Step 8: Quick Actions Panel Functionality Testing
1. Locate Quick Actions panel
2. Test each action button:
   - "Agendar Sessão" -> should navigate to calendar booking
   - "Estudantes" -> should navigate to /(teacher)/students
   - "Analytics" -> should navigate to /(teacher)/analytics
   - "Sessões" -> should navigate to /(teacher)/sessions
3. Verify proper navigation occurs for each action
4. Check accessibility labels and button states

Expected:
- All quick action buttons are visible and clickable
- Navigation works correctly for each button
- No broken links or 404 errors
- Accessibility labels are present
Screenshot: 08_quick_actions_functionality.png

Step 9: Today's Sessions Section Testing
1. Locate "Sessões de Hoje" section
2. Verify sessions display from sessions.today API data
3. Check session information displays correctly:
   - Session time formatting
   - Student names/count
   - Session type and grade level
   - Status badges (Agendada/Concluída)
4. Test "Ver todas as sessões" link if applicable

Expected:
- Sessions display with proper Portuguese formatting
- Session data matches API sessions.today section
- Status badges have correct colors and text
- Time displays in HH:MM format
Screenshot: 09_todays_sessions_validation.png

Step 10: Student Roster Preview and Search Testing
1. Locate Student Roster section
2. Test search functionality:
   - Enter student name in search box
   - Verify debounced search (300ms delay)
   - Test search by email as well
3. Verify student list display:
   - Student cards with progress visualization
   - Progress bars with percentage display
   - Initial letters in colored circles
4. Test "Ver todos os estudantes" navigation

Expected:
- Search works with proper debouncing (300ms)
- Student data matches API students section
- Progress bars display completion_percentage correctly
- Navigation to students page works
Screenshot: 10_student_roster_search_testing.png

Step 11: Progress Metrics Section Validation
1. Locate "Métricas de Progresso" section
2. Verify analytics display from progress_metrics API section:
   - Average Student Progress (average_student_progress)
   - Total Assessments Given (total_assessments_given)
   - Students Improved This Month (students_improved_this_month)
3. Check "Ver Analytics Detalhados" button functionality
4. Verify data formatting and display quality

Expected:
- Analytics display meaningful data from API
- Metrics are properly formatted (percentages, counts)
- "Ver Analytics Detalhados" navigates correctly
- Data matches progress_metrics API section
Screenshot: 11_progress_metrics_validation.png

Step 12: Recent Activities Feed Testing
1. Locate "Atividade Recente" section
2. Verify activity feed displays from recent_activities API section
3. Check activity information:
   - Activity descriptions and types
   - Timestamps in Portuguese format
   - Activity icons based on type
4. Verify activities are teacher-specific and relevant

Expected:
- Activities display in chronological order
- Timestamps show in Portuguese format (dd/mmm, HH:MM)
- Activities are teacher-specific from API
- Icons match activity types correctly
Screenshot: 12_recent_activities_validation.png

Step 13: Loading States and Error Handling Testing
1. Refresh page and observe loading states
2. Verify skeleton screens appear during data loading
3. Test error scenarios:
   - Temporarily block network to simulate API failure
   - Check error message display and retry functionality
4. Test graceful degradation when data sections are missing

Expected:  
- Loading states show proper skeleton screens
- Error states display helpful Portuguese messages
- Retry functionality works correctly
- Graceful handling of missing data sections
Screenshot: 13_loading_error_states.png

Step 14: Performance and Caching Validation
1. Monitor initial page load time (should be < 2 seconds)
2. Check consolidated API response time (should be < 500ms)
3. Verify caching behavior:
   - Second page load should be faster due to cache
   - Refresh button should bypass cache
4. Use Lighthouse for performance audit if available

Expected:
- Initial page load under 2 seconds
- API response under 500ms consistently
- Caching improves subsequent load times
- Performance meets GitHub issue requirements
Screenshot: 14_performance_caching_validation.png

Step 15: Data Integrity and Consistency Testing
1. Compare API response data with UI display
2. Verify all numerical values match between API and UI
3. Check data formatting consistency:
   - Decimal precision for percentages
   - Date formatting in Portuguese
   - Currency formatting for earnings data
4. Verify real-time data updates when refresh is triggered

Expected:
- Complete data integrity between API and UI
- Consistent formatting throughout dashboard
- Proper Portuguese localization
- Real-time updates work correctly
Screenshot: 15_data_integrity_validation.png

Step 16: Cross-Platform Responsive Design Testing
1. Test dashboard on different screen sizes:
   - Desktop (1920x1080)
   - Tablet (768x1024) 
   - Mobile (375x667)
2. Use browser developer tools to simulate device sizes
3. Verify all sections adapt properly to different screen sizes
4. Check touch interactions on mobile simulation

Expected:
- Layout adapts gracefully to all screen sizes
- Content remains accessible and readable
- Touch targets are appropriately sized for mobile
- No horizontal scrolling or layout breaks
Screenshot: 16_responsive_design_testing.png

Step 17: API Error Recovery and Resilience Testing
1. Test partial API failures:
   - Mock server returning incomplete data
   - Mock 500 errors from specific API endpoints
2. Verify graceful degradation when sections fail to load
3. Test retry mechanisms and error recovery
4. Check user experience during API issues

Expected:
- Graceful handling of partial API failures
- Error messages are user-friendly in Portuguese
- Retry mechanisms work correctly
- Dashboard remains functional during partial failures
Screenshot: 17_api_resilience_testing.png

Step 18: Security and Authorization Validation
1. Verify only teacher-specific data is displayed
2. Check that API calls include proper authentication headers
3. Test authorization boundaries:
   - Verify teacher cannot see other teachers' data
   - Check school-level data filtering
4. Verify no sensitive information in browser console/storage

Expected:
- Dashboard shows only data relevant to logged-in teacher
- Proper authentication headers on all requests
- School-level data filtering works correctly
- No sensitive data exposed in client-side storage
Screenshot: 18_security_authorization_validation.png

=== PASS/FAIL CRITERIA ===

PASS: ALL of the following conditions must be met:
- Teacher authentication works with correct user_type: 'teacher'
- Consolidated API (/api/accounts/teachers/consolidated_dashboard/) responds within 500ms
- Dashboard loads within 2 seconds with all sections displaying real data
- All API sections are properly integrated: teacher_info, students, sessions, progress_metrics, recent_activities, earnings, quick_stats
- Quick actions navigation works correctly to all target routes
- Student search functionality works with proper debouncing
- Data integrity maintained between API response and UI display
- Loading states and error handling work gracefully
- Responsive design works correctly on desktop, tablet, and mobile
- Security: Only teacher-specific data is shown, proper authorization
- Performance meets requirements consistently
- No console errors or JavaScript exceptions during normal usage

FAIL: ANY of the following conditions occur:
- Authentication fails or teacher has wrong user_type
- Consolidated API takes longer than 500ms consistently
- Dashboard takes longer than 2 seconds to load initially
- Any API section fails to load or shows only placeholder data
- Console errors or JavaScript exceptions during normal usage
- Quick actions navigation is broken or leads to 404 errors
- Student search doesn't work or has performance issues
- Data inconsistency between API and UI display
- Responsive design breaks on any screen size
- Security issues: wrong data shown or unauthorized access possible
- Loading states never resolve or error handling crashes app
- Performance consistently below requirements

Individual Step Criteria:
- Step 1-2: PASS if servers start and API endpoint works, FAIL if startup/API errors
- Step 3: PASS if teacher authentication with correct role works, FAIL if wrong role/auth fails
- Step 4: PASS if dashboard route loads within time limit, FAIL if timeout/errors
- Step 5: PASS if consolidated API integration works correctly, FAIL if API errors/wrong data
- Step 6-12: PASS if each section displays correctly with real data, FAIL if broken/empty
- Step 13: PASS if loading/error states work gracefully, FAIL if crashes or infinite loading
- Step 14: PASS if performance meets requirements, FAIL if consistently too slow
- Step 15: PASS if data integrity maintained, FAIL if inconsistencies
- Step 16: PASS if responsive on all sizes, FAIL if layout breaks
- Step 17: PASS if API resilience works, FAIL if poor error handling
- Step 18: PASS if security/authorization works, FAIL if unauthorized access/wrong data

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== UX/BEHAVIORAL REQUIREMENTS ===
- Dashboard provides immediate value on first load with personalized teacher data
- Consolidated API minimizes loading time with single request architecture
- Loading states prevent user confusion during data fetching
- Error messages are helpful in Portuguese and provide recovery options
- Responsive design maintains usability across all device sizes
- Performance feels snappy and responsive (no lag or delays)
- Navigation is intuitive and follows expected teacher workflow patterns
- Content is properly localized in Portuguese
- Data consistency ensures teacher confidence in platform accuracy
- Quick actions provide immediate access to most common teacher tasks