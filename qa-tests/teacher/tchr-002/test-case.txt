QA Test Case: Individual Teacher Profile View with Admin Editing

Test ID: TCHR-002
Test Name: Individual Teacher Profile View with Admin Editing Capabilities
Purpose: Verify that school administrators can view comprehensive individual teacher profiles, access detailed profile completion information, and edit teacher information with appropriate permissions while maintaining teacher autonomy
Expected Result: Individual teacher profiles display comprehensive information, admin editing modal works correctly with proper field restrictions, and profile completion details are accurate

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native Expo frontend
- Frontend URL: http://localhost:8081
- Backend URL: http://localhost:8000
- User Authentication: Passwordless email verification with JWT tokens

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Development servers running: `make dev`

Test Data:
- Test School Admin Email: anapmc.carvalho@gmail.com
- Expected Role: school_owner with admin privileges
- Test Teacher: Must have an existing teacher profile with varying completion levels
- Database: Should contain teacher profiles with contact info, courses, and teaching details

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

1. Ensure both Django backend and Expo frontend servers are running
2. Navigate to http://localhost:8081
3. Complete login process with anapmc.carvalho@gmail.com
4. Verify successful authentication and dashboard access

Expected: Successful login and access to school admin dashboard
Screenshot: 01_authentication_successful.png
Debug: Check server logs if authentication fails

Step 2: Navigate to Teacher Directory
1. From dashboard, navigate to Users page
2. Ensure Teachers tab is active
3. Verify teacher directory displays with multiple teachers
4. Identify a teacher with interesting profile data for detailed testing
5. Note the teacher's profile completion indicator

Expected: Teacher directory loads with multiple teachers visible
Screenshot: 02_teacher_directory_loaded.png
Debug: Verify API calls are successful for teacher data

Step 3: Access Individual Teacher Profile
1. Locate a teacher in the directory with good test data
2. Click the "View" action button (eye icon) for that teacher
3. Verify navigation to individual teacher profile page (/teachers/[id])
4. Confirm URL shows the correct teacher ID
5. Wait for profile page to fully load

Expected: Navigation to individual teacher profile page successful
Screenshot: 03_teacher_profile_navigation.png
Debug: Check browser console for routing errors

Step 4: Verify Teacher Profile Header and Overview
1. Examine the profile header section
2. Verify it displays:
   - Teacher name and photo/avatar
   - Contact email
   - Current status (Active/Inactive)
   - Profile completion percentage with visual indicator
   - Action buttons (Edit, Message, Send Reminder)
3. Verify the "Back" navigation works correctly
4. Check that the AdminTeacherProfileHeader component renders properly

Expected: Profile header displays comprehensive teacher overview with all elements
Screenshot: 04_profile_header_complete.png
Debug: Check that teacher data is properly loaded from API

Step 5: Examine Profile Completion Details
1. Locate the "Status do Perfil" (Profile Status) section
2. Verify it shows:
   - Profile completion percentage
   - Visual completion indicator (circular progress or similar)
   - List of missing critical fields (if any)
   - Recommendations for profile improvement
   - Detailed breakdown of completion status
3. Verify completion calculation matches the directory view
4. Check for high priority recommendations (marked with warning icons)

Expected: Profile completion section shows detailed analysis with recommendations
Screenshot: 05_profile_completion_details.png
Debug: Verify ProfileCompletionService is working correctly

Step 6: Review Contact Information Section
1. Examine the "Informações de Contato" (Contact Information) section
2. Verify it displays all contact fields:
   - Email address (from user account)
   - Phone number
   - Address
   - Calendar integration status
3. Check that empty fields show "Não informado" (Not provided)
4. Verify all information is properly formatted and readable

Expected: Contact information displays completely with proper handling of empty fields
Screenshot: 06_contact_information_section.png
Debug: Check that all contact fields are properly mapped from backend

Step 7: Review Teaching Information Section
1. Examine the "Informações de Ensino" (Teaching Information) section
2. Verify it shows:
   - Educational background/formation
   - Availability information
   - Active courses count and details
   - Individual course cards with:
     * Course name
     * Grade level
     * Subject area
     * Active/Inactive status badges
3. Verify course information is accurate and well-formatted

Expected: Teaching information displays comprehensively with proper course details
Screenshot: 07_teaching_information_section.png
Debug: Verify course data is correctly fetched and displayed

Step 8: Review Recent Activity Section
1. Examine the "Atividade Recente" (Recent Activity) section
2. Verify it displays:
   - Last activity date (formatted in Portuguese locale)
   - Profile last updated date
   - Account creation date
3. Check date formatting is consistent and user-friendly
4. Verify "Nunca" (Never) shows for null dates

Expected: Activity section shows properly formatted dates with appropriate handling of null values
Screenshot: 08_recent_activity_section.png
Debug: Check date formatting and null value handling

Step 9: Test Admin Edit Modal Access
1. Click the "Editar" (Edit) button in the profile header
2. Verify the AdminEditTeacherModal opens correctly
3. Examine the modal structure and fields:
   - Modal header with teacher name
   - Form fields that admins can edit (should be limited)
   - Proper form validation
   - Save and Cancel buttons
4. Verify the modal displays current teacher data
5. Note which fields are editable vs read-only

Expected: Admin edit modal opens with appropriate fields and current data
Screenshot: 09_admin_edit_modal_opened.png
Debug: Check that modal receives teacher data correctly

Step 10: Test Admin Field Editing Permissions
1. In the admin edit modal, identify editable fields (typically basic contact info)
2. Test editing permitted fields:
   - Make small changes to allowed fields
   - Verify form validation works
   - Test required field validation
3. Verify restricted fields are either:
   - Read-only
   - Not present in admin modal
   - Clearly marked as teacher-only
4. Test form behavior with invalid data

Expected: Admin can edit appropriate fields while critical teacher data remains protected
Screenshot: 10_admin_editing_permissions.png
Debug: Verify field-level permissions are properly enforced

Step 11: Test Admin Edit Save Functionality
1. Make valid changes to editable fields in the modal
2. Click "Save" or equivalent submit button
3. Verify:
   - Save operation completes successfully
   - Modal closes after successful save
   - Profile page refreshes with updated data
   - Success feedback is provided to user
4. Verify the changes are reflected in the profile display
5. Check that teacher receives appropriate notification (if implemented)

Expected: Save operation works correctly with proper feedback and data refresh
Screenshot: 11_admin_edit_save_successful.png
Debug: Check API calls and response handling for save operation

Step 12: Test Communication Features
1. Test the "Mensagem" (Message) button functionality
2. Verify it triggers appropriate action:
   - Opens message modal/interface
   - Logs intent in console (for development)
   - Shows proper UI feedback
3. Test the "Send Reminder" functionality for profile completion
4. Verify communication features are properly integrated

Expected: Communication features work as intended with proper UI feedback
Screenshot: 12_communication_features.png
Debug: Check that communication actions are properly implemented

Step 13: Test Profile Page Responsiveness
1. Open browser developer tools
2. Test profile page at different viewport sizes:
   - Desktop (1200px+)
   - Tablet (768px)
   - Mobile (375px)
3. Verify all sections remain accessible and readable
4. Check that action buttons remain functional
5. Verify scrolling works properly on mobile

Expected: Profile page is fully responsive with all features accessible on mobile
Screenshot: 13_mobile_responsiveness.png
Debug: Check for layout issues or inaccessible elements on small screens

Step 14: Test Profile Navigation and Return
1. Test navigation back to teacher directory using:
   - Back button in profile header
   - Browser back button
   - Direct navigation
2. Verify proper return to teacher directory
3. Test accessing different teacher profiles in sequence
4. Verify profile data updates correctly for different teachers

Expected: Navigation works smoothly with proper state management
Screenshot: 14_navigation_testing.png
Debug: Check that routing and state management work correctly

Step 15: Test Error Handling and Edge Cases
1. Test profile page with teacher who has minimal data
2. Test with teacher who has complete profile
3. Try accessing invalid teacher ID (manually change URL)
4. Test behavior when API calls fail
5. Verify appropriate error states and fallbacks

Expected: Error handling works gracefully with informative error messages
Screenshot: 15_error_handling.png
Debug: Check error boundary behavior and API error handling

=== PASS/FAIL CRITERIA ===

PASS: Individual teacher profiles display comprehensively with all required sections, admin editing modal works with appropriate field restrictions, profile completion details are accurate, communication features function properly, interface is mobile-responsive, and error handling works correctly

FAIL: Any of the following occur:
- Teacher profile fails to load or display incomplete information
- Profile completion details are inaccurate or missing
- Admin edit modal doesn't open or has incorrect permissions
- Contact, teaching, or activity sections are broken or incomplete
- Communication features don't work
- Interface is not mobile-responsive
- Navigation fails or causes errors
- Error handling is inadequate
- Save functionality doesn't work properly

Individual Step Criteria:
- Step 1: PASS if authentication succeeds and servers are running, FAIL if login fails
- Step 2: PASS if teacher directory loads correctly, FAIL if navigation fails
- Step 3: PASS if individual profile navigation works, FAIL if routing fails
- Step 4: PASS if profile header displays all required elements, FAIL if header is incomplete
- Step 5: PASS if completion details are accurate and comprehensive, FAIL if completion info missing
- Step 6: PASS if contact information displays properly with good empty state handling, FAIL if contact section broken
- Step 7: PASS if teaching information shows courses and details correctly, FAIL if teaching section incomplete
- Step 8: PASS if activity section shows proper dates and formatting, FAIL if dates broken or missing
- Step 9: PASS if admin edit modal opens with appropriate fields, FAIL if modal doesn't work
- Step 10: PASS if field permissions are properly enforced, FAIL if permissions are incorrect
- Step 11: PASS if save functionality works with proper feedback, FAIL if save fails or no feedback
- Step 12: PASS if communication features work as intended, FAIL if communication broken
- Step 13: PASS if profile is fully responsive and functional on mobile, FAIL if mobile UX broken
- Step 14: PASS if navigation works smoothly in all scenarios, FAIL if navigation issues
- Step 15: PASS if error handling is graceful and informative, FAIL if errors cause crashes

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails