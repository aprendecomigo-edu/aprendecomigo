QA Test Case: Individual Session Booking with Hour Deduction

Test ID: SESSION-001
Test Name: Individual Session Booking with Hour Deduction
Purpose: Verify that individual tutoring session bookings correctly deduct hours from student account balance with proper financial integration
Expected Result: Session booking succeeds and hours are accurately deducted from student balance

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend  
- Feature: Session Booking Hour Deduction (GitHub Issue #32)
- Integration: Classroom-Finances app integration
- APIs: /scheduler/api/book-session/ and /finances/api/student-balance/
- Authentication: JWT token authentication required

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data Requirements:
- Student Account: student.session@test.com with sufficient hour balance (20.00 hours)
- Teacher Account: teacher.session@test.com with available time slots
- School: Test School with both users as members
- Initial Student Balance: 20.00 hours, $200.00 balance amount
- Session Duration: 1.0 hour (standard individual session)
- Expected Hour Deduction: 1.0 hour
- Expected Balance After: 19.00 hours, $190.00 balance amount

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Service Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected: Both services start successfully
- Backend: http://localhost:8000 responds  
- Frontend: http://localhost:8081 shows loading screen
- API accessible at http://localhost:8000/api/

Screenshot: 01_servers_started.png

Step 2: Create Test Users and Initial Balance Data
1. Open browser to http://localhost:8000/admin/
2. Login with admin credentials
3. Create test users:
   - Email: student.session@test.com, Name: "Test Student Session", Role: student
   - Email: teacher.session@test.com, Name: "Test Teacher Session", Role: teacher
4. Create initial student balance:
   - Student: student.session@test.com
   - Hours purchased: 20.00
   - Hours consumed: 0.00  
   - Balance amount: 200.00
   - Active package with sufficient hours

Expected: Test users and initial balance created successfully
Screenshot: 02_test_data_created.png

Step 3: Verify Initial Balance State via API
1. Navigate to http://localhost:8081/auth/signin
2. Login as student.session@test.com
3. Complete authentication flow
4. Open browser developer tools console
5. Get JWT token from localStorage/sessionStorage
6. Execute balance check API call:
```javascript
const token = 'STUDENT_JWT_TOKEN'; 
fetch('http://localhost:8000/finances/api/student-balance/', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    console.log('=== INITIAL BALANCE STATE ===');
    console.log('Hours purchased:', data.balance_summary.hours_purchased);
    console.log('Hours consumed:', data.balance_summary.hours_consumed);
    console.log('Remaining hours:', data.balance_summary.remaining_hours);
    console.log('Balance amount:', data.balance_summary.balance_amount);
  });
```

Expected Response:
- hours_purchased: "20.00"
- hours_consumed: "0.00"
- remaining_hours: "20.00"
- balance_amount: "200.00"

Screenshot: 03_initial_balance_verified.png

Step 4: Navigate to Session Booking Interface
1. Navigate to calendar/schedule page in the application
2. Wait for calendar interface to load
3. Verify booking functionality is available
4. Look for "Book Session" or "Schedule Class" button

Expected: Calendar interface loads with booking capabilities
Screenshot: 04_calendar_interface_loaded.png

Step 5: Initiate Individual Session Booking
1. Click "Book Session" or equivalent button
2. Wait for booking form/modal to appear
3. Verify form contains required fields:
   - Teacher selection
   - Date selection
   - Time slot selection
   - Session type (individual/group)
   - Duration field
4. Verify session type defaults to or can be set to "Individual"

Expected: Booking form loads with all required fields
Screenshot: 05_booking_form_loaded.png

Step 6: Fill Session Booking Details
1. Select teacher: teacher.session@test.com
2. Select date: Tomorrow's date (future date)
3. Select time slot: Available time (e.g., 10:00 AM)
4. Confirm session type: Individual
5. Verify duration: 1.0 hour
6. Add session title: "Math Tutoring Session"
7. Add any notes if required

Expected: All form fields populated correctly
Screenshot: 06_booking_details_filled.png

Step 7: Submit Session Booking with Hour Deduction
1. Click "Book Session" or "Submit" button
2. Wait for API response
3. Monitor network tab for API calls:
   - POST /scheduler/api/book-session/
   - Potential automatic calls to finances endpoints
4. Check for success/error messages

Expected: 
- HTTP 201 Created response for session booking
- Success message displayed
- Hour deduction processed automatically
- Session appears in calendar

Screenshot: 07_session_booking_submitted.png

Step 8: Verify Session Booking Success
1. Check that session appears in calendar view
2. Verify session details:
   - Student: student.session@test.com
   - Teacher: teacher.session@test.com
   - Duration: 1.0 hour
   - Status: Scheduled/Confirmed
   - Date and time match booking
3. Click on session to view details if possible

Expected: Session successfully created and visible in calendar
Screenshot: 08_session_in_calendar.png

Step 9: Verify Hour Deduction via API
1. Execute balance check API call again:
```javascript
const token = 'STUDENT_JWT_TOKEN';
fetch('http://localhost:8000/finances/api/student-balance/', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    console.log('=== POST-BOOKING BALANCE STATE ===');
    console.log('Hours purchased:', data.balance_summary.hours_purchased);
    console.log('Hours consumed:', data.balance_summary.hours_consumed);
    console.log('Remaining hours:', data.balance_summary.remaining_hours);
    console.log('Balance amount:', data.balance_summary.balance_amount);
    console.log('=== VERIFICATION ===');
    console.log('Expected hours consumed: 1.00');
    console.log('Expected remaining hours: 19.00');
    console.log('Expected balance amount: 190.00');
  });
```

Expected Response:
- hours_purchased: "20.00" (unchanged)
- hours_consumed: "1.00" (increased by 1.0)
- remaining_hours: "19.00" (decreased by 1.0)
- balance_amount: "190.00" (decreased by $10.00)

Screenshot: 09_balance_after_deduction.png

Step 10: Verify Hour Consumption Record Creation
1. Check hour consumption records via admin or API
2. Navigate to http://localhost:8000/admin/finances/hourconsumption/
3. Verify new consumption record exists:
   - Student: student.session@test.com
   - Hours consumed: 1.00
   - Session reference: Points to created session
   - Timestamp: Recent creation time
   - Transaction type: Session booking

Expected: Hour consumption record created correctly
Screenshot: 10_consumption_record_created.png

Step 11: Test Balance Calculation Accuracy
1. Verify mathematical accuracy:
```javascript
const token = 'STUDENT_JWT_TOKEN';
fetch('http://localhost:8000/finances/api/student-balance/', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    const purchased = parseFloat(data.balance_summary.hours_purchased);
    const consumed = parseFloat(data.balance_summary.hours_consumed);
    const remaining = parseFloat(data.balance_summary.remaining_hours);
    const balanceAmount = parseFloat(data.balance_summary.balance_amount);
    
    console.log('=== CALCULATION VERIFICATION ===');
    console.log('Purchased:', purchased);
    console.log('Consumed:', consumed);
    console.log('Remaining:', remaining);
    console.log('Calculation check:', remaining === (purchased - consumed));
    console.log('Balance per hour rate:', balanceAmount / remaining);
  });
```

Expected: All calculations accurate with 2-decimal precision
Screenshot: 11_calculation_verification.png

Step 12: Test Session Details and Audit Trail
1. Navigate to session details in admin:
   http://localhost:8000/admin/scheduler/classsession/
2. Find the created session and verify:
   - Student field: student.session@test.com
   - Teacher field: teacher.session@test.com
   - Duration: 1.0 hour
   - Status: Scheduled
   - Created timestamp
   - Hour deduction flag/reference
3. Check for any audit logs related to hour deduction

Expected: Session created with proper audit trail
Screenshot: 12_session_audit_trail.png

Step 13: Test API Response Headers and Performance
1. Measure booking API performance:
```javascript
const token = 'STUDENT_JWT_TOKEN';
const startTime = performance.now();
fetch('http://localhost:8000/scheduler/api/book-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    teacher_email: 'teacher.session@test.com',
    date: '2025-07-28',
    time: '11:00',
    duration: 1.0,
    session_type: 'individual',
    title: 'Performance Test Session'
  })
})
  .then(response => {
    const endTime = performance.now();
    console.log(`Booking API Response Time: ${endTime - startTime} milliseconds`);
    console.log('Response Status:', response.status);
    return response.json();
  })
  .then(data => console.log('Performance test result:', data));
```

Expected: 
- Response time < 2000ms
- Proper response structure
- Hour deduction processed within acceptable time

Screenshot: 13_api_performance_test.png

Step 14: Test Financial Integration Security
1. Verify hour deduction authorization:
```javascript
// Test with insufficient permissions or wrong student
const wrongToken = 'DIFFERENT_STUDENT_TOKEN';
fetch('http://localhost:8000/scheduler/api/book-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${wrongToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    teacher_email: 'teacher.session@test.com',
    date: '2025-07-28',
    time: '12:00',
    duration: 1.0,
    session_type: 'individual',
    title: 'Unauthorized Test'
  })
})
  .then(response => {
    console.log('Unauthorized booking status:', response.status);
    return response.json();
  })
  .then(data => console.log('Security test result:', data));
```

Expected: 
- Proper authorization checks
- Hour deduction only for authorized student
- Secure financial operations

Screenshot: 14_security_verification.png

Step 15: Test Error Handling and Edge Cases
1. Test booking when student is logged out:
```javascript
// Test without authentication
fetch('http://localhost:8000/scheduler/api/book-session/', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    teacher_email: 'teacher.session@test.com',
    date: '2025-07-28',
    time: '13:00',
    duration: 1.0,
    session_type: 'individual',
    title: 'Unauthenticated Test'
  })
})
  .then(response => {
    console.log('Unauthenticated booking status:', response.status);
    return response.json();
  })
  .then(data => console.log('Error handling test:', data));
```

Expected:
- HTTP 401 Unauthorized for unauthenticated requests
- Proper error messages
- No hour deduction for failed bookings

Screenshot: 15_error_handling_test.png

Step 16: Database Consistency Verification
Commands:
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
  from finances.models import StudentAccountBalance, HourConsumption
  from scheduler.models import ClassSession
  from accounts.models import CustomUser
  
  student = CustomUser.objects.get(email='student.session@test.com')
  balance = StudentAccountBalance.objects.get(student=student)
  sessions = ClassSession.objects.filter(student=student)
  consumptions = HourConsumption.objects.filter(student=student)
  
  print('=== DATABASE CONSISTENCY CHECK ===')
  print(f'Student: {student.email}')
  print(f'Balance hours consumed: {balance.hours_consumed}')
  print(f'Total consumption records: {consumptions.count()}')
  print(f'Total sessions booked: {sessions.count()}')
  print(f'Session-consumption consistency: {sessions.count() == consumptions.count()}')
  
  for session in sessions:
      print(f'Session: {session.title}, Duration: {session.duration}')
  for consumption in consumptions:
      print(f'Consumption: {consumption.hours_consumed}, Session: {consumption.session_id}')
  "

Expected: Database records consistent between sessions and consumptions
Screenshot: 16_database_consistency.png

=== PASS/FAIL CRITERIA ===

PASS: Session booking succeeds AND hours are accurately deducted AND balance calculations are correct AND audit trail is complete

FAIL: Session booking fails OR hours not deducted OR incorrect calculations OR missing audit trail OR security vulnerabilities

Individual Step Criteria:
- Step 1-2: PASS if environment setup and test data creation successful, FAIL if setup issues
- Step 3: PASS if initial balance state correct, FAIL if balance API fails or wrong values  
- Step 4-6: PASS if booking interface loads and form can be filled, FAIL if UI issues
- Step 7-8: PASS if session booking succeeds and appears in calendar, FAIL if booking fails
- Step 9: PASS if hour deduction processed correctly, FAIL if balance unchanged or wrong
- Step 10: PASS if consumption record created, FAIL if missing or incorrect record
- Step 11: PASS if calculations accurate, FAIL if mathematical errors
- Step 12: PASS if audit trail complete, FAIL if missing session or hour references
- Step 13: PASS if performance acceptable, FAIL if slow response or errors
- Step 14: PASS if security controls working, FAIL if unauthorized access allowed
- Step 15: PASS if error handling proper, FAIL if poor error responses
- Step 16: PASS if database consistency maintained, FAIL if data inconsistencies

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== ADDITIONAL VERIFICATION POINTS ===

Hour Deduction Requirements:
- Exact 1.0 hour deducted for individual session
- Balance calculation: remaining = purchased - consumed
- Monetary calculation: balance amount reduced proportionally
- Consumption record links to session
- Timestamp accuracy for all records

Session Booking Integration:
- Session created in scheduler app
- Hour consumption created in finances app
- Cross-app data consistency maintained
- Transaction atomicity (all or nothing)
- Proper error rollback if any part fails

Financial Security Checklist:
- Authentication required for all operations
- Student can only book for themselves
- Hour deduction only for successful bookings
- No duplicate deductions for same session
- Proper audit logging for financial operations

Performance Requirements:
- Session booking response < 2000ms
- Balance API response < 1000ms
- Database operations optimized
- No race conditions in concurrent bookings
- Proper locking for financial operations