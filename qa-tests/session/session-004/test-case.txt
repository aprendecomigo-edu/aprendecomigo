QA Test Case: Session Cancellation and Hour Refund Process

Test ID: SESSION-004
Test Name: Session Cancellation and Hour Refund Process
Purpose: Verify that session cancellations correctly refund hours to student account balance with proper audit trails and transaction integrity
Expected Result: Session cancellation succeeds and hours are accurately refunded with complete audit trail

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Feature: Session Cancellation Hour Refund (GitHub Issue #32)
- Integration: Classroom-Finances app integration with refund processing
- APIs: /scheduler/api/cancel-session/ and /finances/api/student-balance/
- Authentication: JWT token authentication required

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data Requirements:
- Student Account: student.cancel@test.com with scheduled sessions
- Teacher Account: teacher.cancel@test.com with scheduled sessions
- School Admin: admin.cancel@test.com with cancellation permissions
- Initial Student Balance: 15.00 hours, $150.00 balance amount
- Scheduled Sessions: Multiple sessions of different durations for cancellation testing
- Cancellation Policies: Early cancellation (24h+), late cancellation (<24h), same-day cancellation

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Service Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected: Both services start successfully
Screenshot: 01_servers_started.png

Step 2: Create Test Users and Initial Data
1. Open browser to http://localhost:8000/admin/
2. Login with admin credentials
3. Create test users:
   - Email: student.cancel@test.com, Name: "Test Student Cancel", Role: student
   - Email: teacher.cancel@test.com, Name: "Test Teacher Cancel", Role: teacher
   - Email: admin.cancel@test.com, Name: "Test Admin Cancel", Role: school_admin
4. Create initial student balance:
   - Hours purchased: 20.00
   - Hours consumed: 5.00 (from previous sessions)
   - Remaining: 15.00 hours
   - Balance amount: 150.00

Expected: Test users and initial balance created successfully
Screenshot: 02_cancel_test_data_created.png

Step 3: Create Multiple Scheduled Sessions for Cancellation Testing
1. Book several sessions for testing different cancellation scenarios:

   Session 1 - Early Cancellation Test:
   - Date: 3 days from today
   - Time: 10:00 AM
   - Duration: 1.0 hour
   - Type: Individual

   Session 2 - Late Cancellation Test:
   - Date: Tomorrow
   - Time: 2:00 PM
   - Duration: 1.5 hours
   - Type: Individual

   Session 3 - Same-Day Cancellation Test:
   - Date: Today
   - Time: 6:00 PM
   - Duration: 2.0 hours
   - Type: Individual

   Session 4 - Group Session Cancellation:
   - Date: 2 days from today
   - Time: 11:00 AM
   - Duration: 1.0 hour
   - Type: Group (with multiple students)

2. Verify all sessions are created and hours deducted:
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/finances/api/student-balance/', {
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    console.log('=== BALANCE AFTER BOOKING SESSIONS ===');
    console.log('Hours consumed:', data.balance_summary.hours_consumed);
    console.log('Remaining hours:', data.balance_summary.remaining_hours);
    console.log('Expected consumed: 10.50 (5.00 + 5.50 new sessions)');
    console.log('Expected remaining: 9.50');
  });
```

Expected: All sessions created and hours properly deducted
Screenshot: 03_sessions_created_for_cancellation.png

Step 4: Test Early Cancellation (24+ Hours Before Session)
1. Login as student.cancel@test.com
2. Navigate to scheduled sessions
3. Cancel Session 1 (3 days from today, 1.0 hour):
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'SESSION_1_ID',
    cancellation_reason: 'Schedule conflict',
    cancelled_by: 'student'
  })
})
  .then(response => {
    console.log('Early cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== EARLY CANCELLATION RESULT ===');
    console.log('Cancellation successful:', data.success);
    console.log('Refund amount:', data.refund_amount);
    console.log('Refund policy:', data.refund_policy);
    console.log('Session status:', data.session_status);
  });
```

Expected:
- HTTP 200 Success
- Full refund (1.0 hour)
- Session status: Cancelled
- Refund policy: Full refund for early cancellation

Screenshot: 04_early_cancellation_success.png

Step 5: Verify Hour Refund for Early Cancellation
1. Check balance after early cancellation:
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/finances/api/student-balance/', {
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    console.log('=== BALANCE AFTER EARLY CANCELLATION ===');
    console.log('Hours consumed:', data.balance_summary.hours_consumed);
    console.log('Remaining hours:', data.balance_summary.remaining_hours);
    console.log('Expected consumed: 9.50 (10.50 - 1.00 refund)');
    console.log('Expected remaining: 10.50 (9.50 + 1.00 refund)');
    console.log('Balance amount:', data.balance_summary.balance_amount);
  });
```

Expected:
- hours_consumed: "9.50"
- remaining_hours: "10.50"
- balance_amount: "105.00"

Screenshot: 05_balance_after_early_cancellation.png

Step 6: Test Late Cancellation (Less than 24 Hours)
1. Cancel Session 2 (tomorrow, 1.5 hours):
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'SESSION_2_ID',
    cancellation_reason: 'Emergency',
    cancelled_by: 'student'
  })
})
  .then(response => {
    console.log('Late cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== LATE CANCELLATION RESULT ===');
    console.log('Cancellation successful:', data.success);
    console.log('Refund amount:', data.refund_amount);
    console.log('Refund percentage:', data.refund_percentage);
    console.log('Cancellation fee:', data.cancellation_fee);
    console.log('Session status:', data.session_status);
  });
```

Expected:
- HTTP 200 Success
- Partial refund (e.g., 50% = 0.75 hours)
- Cancellation fee applied
- Session status: Cancelled

Screenshot: 06_late_cancellation_partial_refund.png

Step 7: Test Same-Day Cancellation
1. Cancel Session 3 (today, 2.0 hours):
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'SESSION_3_ID',
    cancellation_reason: 'Illness',
    cancelled_by: 'student'
  })
})
  .then(response => {
    console.log('Same-day cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== SAME-DAY CANCELLATION RESULT ===');
    console.log('Cancellation successful:', data.success);
    console.log('Refund amount:', data.refund_amount);
    console.log('Refund policy:', data.refund_policy);
    console.log('No refund reason:', data.no_refund_reason);
  });
```

Expected:
- HTTP 200 Success
- No refund (0.0 hours)
- Policy: No refund for same-day cancellation
- Session status: Cancelled

Screenshot: 07_same_day_no_refund.png

Step 8: Test Teacher-Initiated Cancellation
1. Login as teacher.cancel@test.com
2. Cancel a session from teacher's perspective:
```javascript
const teacherToken = 'TEACHER_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${teacherToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'SESSION_4_ID',
    cancellation_reason: 'Teacher emergency',
    cancelled_by: 'teacher'
  })
})
  .then(response => {
    console.log('Teacher cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== TEACHER CANCELLATION RESULT ===');
    console.log('Cancellation successful:', data.success);
    console.log('Refund amount:', data.refund_amount);
    console.log('Refund policy:', data.refund_policy);
    console.log('Teacher penalty:', data.teacher_penalty);
  });
```

Expected:
- HTTP 200 Success
- Full refund to student regardless of timing
- Possible teacher penalty applied
- Session status: Cancelled by Teacher

Screenshot: 08_teacher_cancellation_full_refund.png

Step 9: Test Admin-Initiated Cancellation
1. Login as admin.cancel@test.com
2. Test admin cancellation capabilities:
```javascript
const adminToken = 'ADMIN_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${adminToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'SESSION_5_ID',
    cancellation_reason: 'Administrative decision',
    cancelled_by: 'admin',
    override_policy: true
  })
})
  .then(response => {
    console.log('Admin cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== ADMIN CANCELLATION RESULT ===');
    console.log('Cancellation successful:', data.success);
    console.log('Refund amount:', data.refund_amount);
    console.log('Policy override:', data.policy_override);
    console.log('Admin privileges:', data.admin_privileges);
  });
```

Expected:
- HTTP 200 Success
- Admin can override cancellation policies
- Full refund possible regardless of timing
- Special admin audit trail

Screenshot: 09_admin_cancellation_override.png

Step 10: Verify Hour Refund Records in Database
1. Check hour refund records created:
```javascript
// API call to check refund history
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/finances/api/refund-history/', {
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    console.log('=== REFUND HISTORY ===');
    data.refunds.forEach(refund => {
      console.log(`Session: ${refund.session_id}`);
      console.log(`Refund amount: ${refund.refund_hours}`);
      console.log(`Refund date: ${refund.refund_date}`);
      console.log(`Reason: ${refund.cancellation_reason}`);
      console.log('---');
    });
  });
```

Expected: Complete refund history with audit trail
Screenshot: 10_refund_history_verification.png

Step 11: Test Group Session Cancellation Refund
1. For the group session, verify all participants receive refunds:
Commands:
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
  from finances.models import HourRefund, StudentAccountBalance
  from scheduler.models import ClassSession
  from accounts.models import CustomUser
  
  # Check group session refunds
  group_session = ClassSession.objects.filter(
      session_type='group',
      status='cancelled'
  ).first()
  
  if group_session:
      print('=== GROUP SESSION REFUND CHECK ===')
      print(f'Group session ID: {group_session.id}')
      
      # Check refunds for all participants
      refunds = HourRefund.objects.filter(session=group_session)
      print(f'Number of refunds: {refunds.count()}')
      
      for refund in refunds:
          print(f'Student: {refund.student.email}')
          print(f'Refund amount: {refund.refund_hours}')
          print(f'Refund reason: {refund.refund_reason}')
  "

Expected: All group session participants receive appropriate refunds
Screenshot: 11_group_session_refunds.png

Step 12: Test Cancellation Authorization and Security
1. Test unauthorized cancellation attempt:
```javascript
// Try to cancel another student's session
const wrongStudentToken = 'DIFFERENT_STUDENT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${wrongStudentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'OTHER_STUDENT_SESSION_ID',
    cancellation_reason: 'Unauthorized test',
    cancelled_by: 'student'
  })
})
  .then(response => {
    console.log('Unauthorized cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== UNAUTHORIZED CANCELLATION TEST ===');
    console.log('Error message:', data.error);
    console.log('Authorization check:', data.authorization_error);
  });
```

Expected:
- HTTP 403 Forbidden
- Clear error message about authorization
- No cancellation or refund processed

Screenshot: 12_cancellation_authorization_test.png

Step 13: Test Already Cancelled Session Handling
1. Attempt to cancel an already cancelled session:
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'ALREADY_CANCELLED_SESSION_ID',
    cancellation_reason: 'Double cancellation test',
    cancelled_by: 'student'
  })
})
  .then(response => {
    console.log('Double cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== DOUBLE CANCELLATION TEST ===');
    console.log('Error message:', data.error);
    console.log('Current status:', data.current_status);
    console.log('Already cancelled:', data.already_cancelled);
  });
```

Expected:
- HTTP 400 Bad Request
- Error message: "Session already cancelled"
- No additional refund processed

Screenshot: 13_double_cancellation_prevention.png

Step 14: Test Past Session Cancellation
1. Attempt to cancel a session that already occurred:
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'PAST_SESSION_ID',
    cancellation_reason: 'Past session test',
    cancelled_by: 'student'
  })
})
  .then(response => {
    console.log('Past session cancellation status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== PAST SESSION CANCELLATION TEST ===');
    console.log('Error message:', data.error);
    console.log('Session date:', data.session_date);
    console.log('Too late to cancel:', data.too_late);
  });
```

Expected:
- HTTP 400 Bad Request
- Error message: "Cannot cancel past sessions"
- No refund processed

Screenshot: 14_past_session_cancellation_denied.png

Step 15: Test Refund Transaction Integrity
1. Verify balance calculations after all cancellations:
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
fetch('http://localhost:8000/finances/api/student-balance/', {
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => {
    console.log('=== FINAL BALANCE VERIFICATION ===');
    console.log('Hours purchased:', data.balance_summary.hours_purchased);
    console.log('Hours consumed:', data.balance_summary.hours_consumed);
    console.log('Remaining hours:', data.balance_summary.remaining_hours);
    console.log('Balance amount:', data.balance_summary.balance_amount);
    
    // Manual calculation verification
    const purchased = parseFloat(data.balance_summary.hours_purchased);
    const consumed = parseFloat(data.balance_summary.hours_consumed);
    const remaining = parseFloat(data.balance_summary.remaining_hours);
    
    console.log('=== CALCULATION CHECK ===');
    console.log('Calculation correct:', remaining === (purchased - consumed));
    console.log('Expected remaining calculation:', purchased - consumed);
  });
```

Expected: All balance calculations accurate after refunds
Screenshot: 15_final_balance_verification.png

Step 16: Test Cancellation Performance and Concurrent Handling
1. Test cancellation API performance:
```javascript
const studentToken = 'STUDENT_CANCEL_JWT_TOKEN';
const startTime = performance.now();

fetch('http://localhost:8000/scheduler/api/cancel-session/', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${studentToken}`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    session_id: 'PERFORMANCE_TEST_SESSION_ID',
    cancellation_reason: 'Performance test',
    cancelled_by: 'student'
  })
})
  .then(response => {
    const endTime = performance.now();
    console.log(`Cancellation API Response Time: ${endTime - startTime} milliseconds`);
    console.log('Response status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('=== CANCELLATION PERFORMANCE ===');
    console.log('Refund processed:', data.refund_amount);
    console.log('Transaction time acceptable:', (endTime - startTime) < 3000);
  });
```

Expected: Cancellation and refund processing within 3 seconds
Screenshot: 16_cancellation_performance_test.png

=== PASS/FAIL CRITERIA ===

PASS: All cancellation scenarios work correctly AND appropriate refunds processed AND audit trail complete AND transaction integrity maintained AND proper authorization enforced

FAIL: Cancellation fails OR incorrect refunds OR missing audit trail OR authorization bypassed OR data inconsistencies

Individual Step Criteria:
- Step 1-3: PASS if environment setup and test sessions created, FAIL if setup issues
- Step 4-5: PASS if early cancellation with full refund works, FAIL if refund incorrect
- Step 6: PASS if late cancellation with partial refund works, FAIL if policy not applied
- Step 7: PASS if same-day cancellation with no refund works, FAIL if refund given inappropriately
- Step 8: PASS if teacher cancellation provides full refund, FAIL if teacher policy not applied
- Step 9: PASS if admin cancellation with override works, FAIL if admin privileges not working
- Step 10: PASS if refund history complete, FAIL if audit trail missing
- Step 11: PASS if group session refunds work for all participants, FAIL if group refund issues
- Step 12: PASS if unauthorized cancellation blocked, FAIL if authorization bypass
- Step 13: PASS if double cancellation prevented, FAIL if duplicate refunds
- Step 14: PASS if past session cancellation blocked, FAIL if inappropriate cancellation allowed
- Step 15: PASS if balance calculations accurate after refunds, FAIL if mathematical errors
- Step 16: PASS if performance acceptable, FAIL if slow cancellation processing

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== ADDITIONAL VERIFICATION POINTS ===

Cancellation Policy Requirements:
- Early cancellation (24+ hours): Full refund
- Late cancellation (<24 hours): Partial refund with fee
- Same-day cancellation: No refund
- Teacher cancellation: Full refund to student
- Admin cancellation: Policy override capability

Refund Processing Standards:
- Accurate hour refund calculations
- Proper balance updates for all affected students
- Complete audit trail for all refund transactions
- Transaction atomicity (refund and cancellation together)
- No duplicate refunds for same session

Authorization and Security:
- Students can only cancel their own sessions
- Teachers can cancel sessions they are teaching
- Admins can cancel any session in their school
- Proper authentication required for all operations
- No unauthorized access to cancellation functions

Technical Requirements:
- Cancellation API response time < 3 seconds
- Concurrent cancellation handling without race conditions
- Database transaction integrity for refund operations
- Proper error handling for all edge cases
- Comprehensive logging for audit and monitoring