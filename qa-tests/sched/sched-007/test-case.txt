QA Test Case: Teacher Availability System and Time Slot Generation

Test ID: SCHED-007
Test Name: Teacher Availability System and Time Slot Generation
Purpose: Verify that teacher availability system works correctly and generates appropriate time slots for booking based on actual teacher availability
Expected Result: Teacher availability is properly respected and time slots are generated correctly based on actual availability data

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Teacher Availability: Teachers set weekly availability schedules
- Time Slot Generation: Available slots generated based on availability and existing bookings
- Conflict Prevention: Double-booking prevention system

Test Data:
- Teacher Email: teacher.test@example.com
- Student Email: student.test@example.com
- Admin Email: admin.test@example.com
- Test Approach: Validate system behavior with actual teacher availability data

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected: Both servers start successfully
Screenshot: 01_servers_started.png

Step 2: Discover Teacher Availability
Commands:
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
  from accounts.models import CustomUser
  from scheduler.models import TeacherAvailability

  teacher = CustomUser.objects.get(email='teacher.test@example.com')
  availability = TeacherAvailability.objects.filter(teacher=teacher.teacher_profile, is_active=True).order_by('day_of_week', 'start_time')

  available_days = []
  unavailable_days = []
  days_of_week = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']

  for day in days_of_week:
      day_availability = availability.filter(day_of_week=day)
      if day_availability.exists():
          for avail in day_availability:
              available_days.append({
                  'day': day,
                  'display': avail.get_day_of_week_display(),
                  'start': str(avail.start_time),
                  'end': str(avail.end_time)
              })
      else:
          unavailable_days.append(day)

  print('AVAILABLE_DAYS:', available_days)
  print('UNAVAILABLE_DAYS:', unavailable_days)
  "

Expected: Teacher availability data discovered
Screenshot: 02_availability_discovered.png

Step 3: Test Available Day Time Slots (First Available Day)
1. Login as student: student.test@example.com
2. Navigate to book class
3. Select the teacher
4. Select first available day from discovered data
5. Verify time slots appear:
   - Slots within discovered availability window
   - 1-hour intervals
   - All slots initially available (no conflicts)
6. Count number of slots generated

Expected: Time slots generated correctly for first available day
Screenshot: 03_first_available_day_slots.png

Step 4: Test Different Day Availability (Second Available Day)
1. Change date to second available day (if exists)
2. Verify time slots appear:
   - Slots within that day's availability window
   - Different from first day if availability differs
   - Correct time intervals
3. Compare slot count with first day

Expected: Time slots respect different daily availability
Screenshot: 04_second_available_day_slots.png

Step 5: Test Unavailable Day
1. Change date to first unavailable day from discovered data
2. Verify no time slots appear
3. Verify appropriate message shown ("No available time slots")
4. Confirm no booking possible

Expected: No time slots on unavailable days
Screenshot: 05_unavailable_day.png

Step 6: Test API Response Accuracy
Commands:
  # Test API for available day
  curl -s "http://localhost:8000/api/scheduler/api/schedules/available_slots/?teacher_id=1&date=2024-12-30" | jq .

  # Test API for unavailable day
  curl -s "http://localhost:8000/api/scheduler/api/schedules/available_slots/?teacher_id=1&date=2024-12-26" | jq .

Expected: API returns correct slot data matching UI
Screenshot: 06_api_verification.png

Step 7: Test Conflict Prevention
1. Book a class on first available day at middle time slot
2. Go back to booking form
3. Select same teacher and same day
4. Verify booked time slot is NOT available
5. Verify other slots still available
6. Count remaining available slots

Expected: Booked time slots are removed from available slots
Screenshot: 07_conflict_prevention.png

Step 8: Test Adjacent Slot Handling
1. Book class at early time slot
2. Check availability for adjacent slots
3. Verify adjacent slots are still available
4. Verify no overlap issues

Expected: Adjacent slots work correctly without conflicts
Screenshot: 08_adjacent_slots.png

Step 9: Test Multiple Day Booking
1. Book class on first available day
2. Check second available day slots
3. Verify second day not affected
4. Book class on second day
5. Verify both bookings exist independently

Expected: Each day's availability is independent
Screenshot: 09_multiple_day_booking.png

Step 10: Test Availability Boundary Cases
1. Try to book at exact start time of availability
2. Try to book at exact end time of availability
3. Verify system handles boundaries correctly
4. Test edge cases within availability window

Expected: Boundary cases handled correctly
Screenshot: 10_boundary_cases.png

Step 11: Backend Data Verification
Commands:
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
  from scheduler.models import TeacherAvailability, ClassSchedule
  from accounts.models import CustomUser

  teacher = CustomUser.objects.get(email='teacher.test@example.com')
  availability = TeacherAvailability.objects.filter(teacher=teacher.teacher_profile)
  classes = ClassSchedule.objects.filter(teacher=teacher.teacher_profile)

  print('=== Teacher Availability ===')
  for avail in availability:
      print(f'{avail.get_day_of_week_display()}: {avail.start_time}-{avail.end_time} (Active: {avail.is_active})')

  print('\n=== Booked Classes ===')
  for cls in classes:
      print(f'{cls.scheduled_date} ({cls.scheduled_date.strftime(\"%A\")}): {cls.start_time}-{cls.end_time} - Status: {cls.status}')

  print(f'\nTotal availability records: {availability.count()}')
  print(f'Total booked classes: {classes.count()}')
  "

Expected: Backend confirms availability and bookings match test actions
Screenshot: 11_backend_verification.png

Step 12: Test System Consistency
1. Refresh booking page
2. Verify previously booked slots still unavailable
3. Check that availability data persists
4. Verify no phantom slots appear
5. Test across browser refresh

Expected: System maintains consistent state
Screenshot: 12_system_consistency.png

=== PASS/FAIL CRITERIA ===

PASS:
- Time slots generated correctly for ALL available days
- NO time slots generated for unavailable days
- Booked slots properly removed from availability
- Adjacent slots remain functional
- Boundary cases handled correctly
- Backend data matches frontend behavior
- System maintains consistency across refreshes

FAIL:
- Time slots incorrect for any available day
- Time slots appear on unavailable days
- Conflicts not prevented
- Adjacent slots malfunction
- Boundary cases cause errors
- Backend/frontend data mismatch
- System state inconsistency

Overall Result: PASS only if ALL validation points pass, FAIL if ANY validation fails

=== SPECIAL CONSIDERATIONS ===

Data-Driven Testing:
- Test adapts to actual teacher availability
- No hardcoded time expectations
- Validates system behavior vs. arbitrary data
- Flexible for different availability setups

Teacher Availability Management:
- Weekly recurring availability
- Day-specific availability settings
- Unavailability periods
- Availability modifications

Time Slot Generation:
- Based on actual teacher availability
- Respect existing bookings
- Prevent double-booking
- Appropriate time intervals

Conflict Prevention:
- Check existing bookings
- Block unavailable slots
- Maintain data integrity
- Clear error messages

System Integration:
- Availability affects booking
- Real-time slot updates
- Cross-user consistency
- Database integrity maintained
