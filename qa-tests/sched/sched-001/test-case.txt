QA Test Case: Student Calendar and Class Scheduling

Test ID: SCHED-001
Test Name: Student Calendar and Class Scheduling
Purpose: Verify that students can view their calendar, see scheduled classes, and schedule new classes for themselves
Expected Result: Student successfully accesses calendar, views existing classes, and completes class scheduling process

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Calendar Feature: Student role can view calendar and schedule classes
- Teacher Availability: System shows available time slots based on teacher availability
- Cross-User Visibility: Teachers see student bookings in their calendars

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Student Email: student.test@example.com
- Teacher Email: teacher.test@example.com
- Admin Email: admin.test@example.com
- School Name: "Test School"
- Test Class Details:
  - Title: "Mathematics Tutoring"
  - Description: "Basic algebra and geometry review"
  - Duration: 60 minutes
  - Class Type: individual

Database Setup Commands:
```bash
cd /Users/anapmc/Code/aprendecomigo/backend
python manage.py shell -c "
from accounts.models import CustomUser, TeacherProfile, School, SchoolMembership
from scheduler.models import TeacherAvailability, ClassSchedule
from django.utils import timezone
from datetime import datetime, timedelta

# Create test school
school, _ = School.objects.get_or_create(
    name='Test School',
    defaults={'description': 'Test school for QA'}
)

# Create student user
student, _ = CustomUser.objects.get_or_create(
    email='student.test@example.com',
    defaults={
        'name': 'Test Student',
        'user_type': 'student',
        'is_admin': False,
        'is_active': True
    }
)

# Create teacher user
teacher_user, _ = CustomUser.objects.get_or_create(
    email='teacher.test@example.com',
    defaults={
        'name': 'Test Teacher',
        'user_type': 'teacher',
        'is_admin': False,
        'is_active': True
    }
)

# Create teacher profile
teacher_profile, _ = TeacherProfile.objects.get_or_create(
    user=teacher_user,
    defaults={
        'bio': 'Experienced math teacher',
        'specialty': 'Mathematics',
        'education': 'Masters in Mathematics',
        'hourly_rate': 25.00,
        'availability': 'Weekdays 9-17',
        'phone_number': '+351912345678'
    }
)

# Create school memberships
SchoolMembership.objects.get_or_create(
    user=student,
    school=school,
    defaults={'role': 'student', 'is_active': True}
)

SchoolMembership.objects.get_or_create(
    user=teacher_user,
    school=school,
    defaults={'role': 'teacher', 'is_active': True}
)

# Create teacher availability
TeacherAvailability.objects.get_or_create(
    teacher=teacher_profile,
    school=school,
    day_of_week='monday',
    defaults={
        'start_time': '09:00',
        'end_time': '17:00',
        'is_active': True
    }
)

print('Test data created successfully')
print(f'Student: {student.email}')
print(f'Teacher: {teacher_user.email}')
print(f'School: {school.name}')
"
```

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected: Both servers start successfully
Screenshot: 01_servers_started.png

Step 2: Student Login
1. Open browser to http://localhost:8081
2. Navigate to sign-in page
3. Enter student email: student.test@example.com
4. Click "Send Code" button
5. Check backend logs for verification code
6. Enter verification code and complete login

Expected: Student successfully logs in and reaches dashboard
Screenshot: 02_student_login_success.png

Step 3: Navigate to Calendar
1. Look for calendar/schedule navigation option
2. Click on "Calendar" or "Schedule" menu item
3. Wait for calendar interface to load
4. Verify calendar view displays

Expected: Calendar interface loads showing student's calendar view
Screenshot: 03_calendar_interface_loaded.png

Step 4: Verify Calendar View Options
1. Check for view mode options (List, Week, Month if available)
2. Test switching between different views
3. Verify navigation controls (Previous, Next, Today)
4. Check current date highlighting

Expected: Calendar view options work correctly and show proper navigation
Screenshot: 04_calendar_view_options.png

Step 5: Verify Existing Classes Display
1. Check if any existing classes are shown
2. For each class, verify display shows:
   - Class title and description
   - Teacher name
   - Date and time
   - Duration
   - Status (Scheduled, Confirmed, Completed)
3. Verify class cards are clickable

Expected: Existing classes display with complete information
Screenshot: 05_existing_classes_display.png

Step 6: Verify Book Class Button Visibility
1. Look for "Book Class" or "Schedule Class" button
2. Verify button is visible and enabled for student
3. Check button styling and accessibility

Expected: Book Class button is visible and accessible to student
Screenshot: 06_book_class_button_visible.png

Step 7: Start Class Booking Process
1. Click "Book Class" button
2. Wait for booking page/modal to load
3. Verify booking form elements:
   - Teacher selection dropdown
   - Date picker
   - Time slot selection
   - Duration options
   - Class type selection
   - Title and description fields

Expected: Booking form loads with all required elements
Screenshot: 07_booking_form_loaded.png

Step 8: Select Teacher
1. Click on teacher selection dropdown
2. Verify available teachers are listed
3. Select "Test Teacher" from the list
4. Verify teacher selection is confirmed

Expected: Teacher selection works and shows available teachers
Screenshot: 08_teacher_selected.png

Step 9: Select Date
1. Click on date picker
2. Select a future date (e.g., next Monday)
3. Verify date selection is confirmed
4. Wait for available time slots to load

Expected: Date selection works and triggers time slot loading
Screenshot: 09_date_selected.png

Step 10: Verify Available Time Slots
1. Check that time slots load based on teacher availability
2. Verify time slots show:
   - Available time ranges
   - Duration options
   - Booking status (available/booked)
3. Verify slots are clickable

Expected: Available time slots display correctly based on teacher availability
Screenshot: 10_available_time_slots.png

Step 11: Select Time Slot
1. Click on an available time slot
2. Verify time slot selection is highlighted
3. Check that form updates with selected time

Expected: Time slot selection works and updates form
Screenshot: 11_time_slot_selected.png

Step 12: Fill Class Details
1. Enter class title: "Mathematics Tutoring"
2. Enter description: "Basic algebra and geometry review"
3. Select duration: 60 minutes
4. Select class type: Individual
5. Verify all fields are properly filled

Expected: Class details form accepts input correctly
Screenshot: 12_class_details_filled.png

Step 13: Verify Student Field (Read-only)
1. Check student field in the form
2. Verify it shows current student's name
3. Verify field is read-only (student cannot change it)
4. Confirm student can only book for themselves

Expected: Student field is read-only and shows current student
Screenshot: 13_student_field_readonly.png

Step 14: Submit Booking
1. Click "Book Class" or "Submit" button
2. Verify loading state appears
3. Wait for submission to complete
4. Check for success message

Expected: Booking submits successfully with loading feedback
Screenshot: 14_booking_submitted.png

Step 15: Verify Booking Success
1. Check for success message/notification
2. Verify redirect to calendar view
3. Look for newly created class in calendar
4. Verify class shows correct details

Expected: New class appears in calendar with correct information
Screenshot: 15_booking_success.png

Step 16: Verify Class Details
1. Click on the newly created class
2. Verify class detail view shows:
   - Correct title: "Mathematics Tutoring"
   - Correct description: "Basic algebra and geometry review"
   - Correct teacher: "Test Teacher"
   - Correct date and time
   - Status: "Scheduled"
   - Student actions available

Expected: Class details display correctly
Screenshot: 16_class_details_correct.png

Step 17: Test Calendar Navigation
1. Navigate to previous/next week or month
2. Verify navigation works correctly
3. Navigate back to today
4. Verify newly created class is still visible

Expected: Calendar navigation works and maintains class data
Screenshot: 17_calendar_navigation.png

Step 18: Test Page Refresh
1. Refresh the browser page
2. Verify student remains logged in
3. Navigate back to calendar
4. Verify scheduled class persists

Expected: Class data persists after page refresh
Screenshot: 18_data_persistence.png

Step 19: Backend Verification
Commands:
  cd /Users/anapmc/Code/aprendecomigo/backend
  python manage.py shell -c "
  from scheduler.models import ClassSchedule
  from accounts.models import CustomUser
  student = CustomUser.objects.get(email='student.test@example.com')
  classes = ClassSchedule.objects.filter(student=student)
  for cls in classes:
      print(f'Class: {cls.title}')
      print(f'Teacher: {cls.teacher.user.name}')
      print(f'Date: {cls.scheduled_date}')
      print(f'Time: {cls.start_time} - {cls.end_time}')
      print(f'Status: {cls.status}')
      print('---')
  "

Expected: Backend confirms class was created correctly
Screenshot: 19_backend_verification.png

Step 20: Test Error Handling
1. Try to book another class at the same time slot
2. Verify appropriate error message
3. Try to book a class in the past
4. Verify validation error

Expected: Error handling works correctly with clear messages
Screenshot: 20_error_handling.png

=== PASS/FAIL CRITERIA ===

PASS: Student successfully logs in AND accesses calendar interface AND views existing classes AND completes class booking process AND new class appears in calendar AND class details are correct AND all form validations work AND error handling is appropriate

FAIL: Student cannot access calendar OR booking process fails OR class doesn't appear in calendar OR class details incorrect OR form validation missing OR poor error handling

Individual Step Criteria:
- Step 1: PASS if both servers start without errors, FAIL if either server fails
- Step 2: PASS if student login succeeds, FAIL if authentication fails
- Step 3: PASS if calendar interface loads, FAIL if navigation or loading fails
- Step 4: PASS if calendar view options work, FAIL if views broken or missing
- Step 5: PASS if existing classes display correctly, FAIL if classes missing or incorrect
- Step 6: PASS if Book Class button visible and accessible, FAIL if button missing
- Step 7: PASS if booking form loads with all elements, FAIL if form incomplete
- Step 8: PASS if teacher selection works, FAIL if dropdown broken
- Step 9: PASS if date selection works, FAIL if date picker broken
- Step 10: PASS if time slots load correctly, FAIL if slots missing or incorrect
- Step 11: PASS if time slot selection works, FAIL if selection broken
- Step 12: PASS if class details form works, FAIL if form inputs broken
- Step 13: PASS if student field is read-only, FAIL if student can change it
- Step 14: PASS if booking submits successfully, FAIL if submission fails
- Step 15: PASS if booking success confirmed, FAIL if no success feedback
- Step 16: PASS if class details correct, FAIL if details wrong or missing
- Step 17: PASS if calendar navigation works, FAIL if navigation broken
- Step 18: PASS if data persists after refresh, FAIL if data lost
- Step 19: PASS if backend confirms class creation, FAIL if backend inconsistent
- Step 20: PASS if error handling works, FAIL if errors not handled

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== SPECIAL CONSIDERATIONS ===

Student Role Permissions:
- Student can view their own calendar
- Student can schedule classes for themselves only
- Student cannot schedule classes for others
- Student cannot see other students' calendars

Teacher Availability Integration:
- Time slots based on teacher availability records
- Unavailable times should not appear as options
- Double-booking prevention

Cross-User Visibility:
- Teacher should see student's booking in their calendar
- Admin should see all bookings

Error Handling:
- Clear validation messages
- Graceful handling of network issues
- Prevention of double-booking
- Appropriate timezone handling

UX/Behavioral Requirements:
- Booking form should be intuitive
- Loading states during API calls
- Success/error feedback clear
- Calendar navigation smooth
- Mobile-responsive design (if applicable)

Data Persistence:
- Classes persist across sessions
- Proper database transactions
- Data integrity maintained

Multi-Platform Considerations:
- Test works on both web and mobile if applicable
- Responsive design considerations
- Touch-friendly interface on mobile
