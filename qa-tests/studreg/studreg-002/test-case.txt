QA Test Case: Payment Method Management with Stripe Integration

Test ID: STUDREG-002
Test Name: Payment Method Management Testing
Purpose: Verify that students can add, manage, and remove payment methods with Stripe integration
Expected Result: Students can successfully manage payment methods with proper security, validation, and Stripe integration

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Platform
- Architecture: Django REST Framework backend + React Native frontend + Stripe integration
- Target APIs: /api/student-balance/payment-methods/, POST/DELETE endpoints, /set-default/

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo
2. Python Virtual Environment: .venv/ in project root
3. Start servers: make dev
4. Stripe Configuration: Ensure test Stripe keys are configured
5. View logs: make logs

Test Data:
- Test Student Email: student.test@aprendecomigo.com
- User Role: student
- Test Card Numbers (Stripe test cards):
  - Valid: 4242424242424242 (Visa)
  - Valid: 5555555555554444 (Mastercard)
  - Declined: 4000000000000002
  - Expired: 4000000000000069
- Test CVV: 123
- Test Expiry: 12/25 (future date)

Security Requirements:
- Payment data should never be stored locally
- All payment operations must use Stripe secure tokens
- Card numbers should be masked in UI displays

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Login
1. Start development servers with 'make dev'
2. Navigate to http://localhost:8081
3. Login as student user (student.test@aprendecomigo.com)
4. Verify successful authentication and student dashboard loads
Commands:
  make dev
  # Wait for servers to start
Expected: Application loads, login successful, student dashboard visible
Screenshot: 01_student_dashboard_payment_access.png
Debug: Check 'make logs' for any Stripe configuration issues

Step 2: Navigate to Payment Methods Section
1. From student dashboard, locate payment methods or billing section
2. Click on "Payment Methods" or "Billing" menu item
3. Verify payment methods page loads
4. Check initial state (empty or existing payment methods)
Expected: Payment methods page displays with option to add new payment method
Screenshot: 02_payment_methods_page_loaded.png

Step 3: Test Payment Methods List API
1. Open browser developer tools (F12)
2. Navigate to Network tab
3. Refresh payment methods page
4. Verify API call to GET /api/student-balance/payment-methods/
5. Check response contains payment method data with masked card numbers
Expected: API returns 200 status with payment methods list, card numbers properly masked (****1234)
Screenshot: 03_payment_methods_api_response.png

Step 4: Test Add New Payment Method - Valid Card
1. Click "Add Payment Method" or "Add Card" button
2. Verify Stripe payment form loads (should be Stripe Elements)
3. Enter valid test card details:
   - Card Number: 4242424242424242
   - Expiry: 12/25
   - CVV: 123
   - Name: Test Student
4. Click "Save Payment Method"
5. Verify API call to POST /api/student-balance/payment-methods/
Expected: Payment method adds successfully, appears in list with masked number, success feedback shown
Screenshot: 04_add_payment_method_success.png

Step 5: Test Stripe Elements Security
1. During payment method addition, check browser developer tools
2. Verify no raw card data appears in network requests
3. Confirm only Stripe tokens are transmitted
4. Check that form uses Stripe Elements (iframe-based secure inputs)
Expected: All payment data handled securely by Stripe, no raw card data in requests
Screenshot: 05_stripe_security_validation.png

Step 6: Test Add Multiple Payment Methods
1. Add second payment method using different test card (5555555555554444)
2. Verify both payment methods appear in list
3. Check that each method shows correct masked card number and type
4. Verify proper visual indicators for card brands (Visa, Mastercard icons)
Expected: Multiple payment methods managed correctly, proper card brand detection
Screenshot: 06_multiple_payment_methods.png

Step 7: Test Set Default Payment Method
1. If multiple payment methods exist, click "Set as Default" on one
2. Verify API call to POST /api/student-balance/payment-methods/{id}/set-default/
3. Check that default status updates in UI with visual indicator
4. Verify only one method can be default at a time
Expected: Default payment method functionality works, proper visual indicators, API updates correctly
Screenshot: 07_set_default_payment_method.png

Step 8: Test Invalid Card Handling
1. Try to add payment method with invalid card (4000000000000002)
2. Verify Stripe validation catches declined card
3. Check that appropriate error message displays
4. Confirm payment method is not added to list
Expected: Invalid card properly rejected by Stripe, user receives clear error message
Screenshot: 08_invalid_card_error_handling.png

Step 9: Test Expired Card Handling
1. Try to add payment method with expired card (4000000000000069)
2. Verify Stripe validation catches expired card
3. Check that appropriate error message displays
4. Test with past expiry date as well (01/20)
Expected: Expired cards properly rejected, clear error messages provided
Screenshot: 09_expired_card_validation.png

Step 10: Test Remove Payment Method
1. Click "Remove" or "Delete" on a payment method
2. Verify confirmation dialog appears
3. Confirm removal
4. Verify API call to DELETE /api/student-balance/payment-methods/{id}/
5. Check that payment method disappears from list
Expected: Payment method removal works with confirmation, proper API calls, UI updates correctly
Screenshot: 10_remove_payment_method.png

Step 11: Test Cannot Remove Default Method Being Used
1. If default payment method has active subscriptions/pending charges
2. Try to remove the default payment method
3. Verify appropriate warning/prevention message
4. Check that removal is blocked or user is warned about consequences
Expected: System prevents problematic removal of active payment methods
Screenshot: 11_prevent_remove_active_method.png

Step 12: Test Mobile Responsive Payment Forms
1. Switch to mobile view (DevTools responsive mode)
2. Test adding payment method on mobile layout
3. Verify Stripe Elements work properly on mobile
4. Check that payment method list displays well on mobile
Expected: Mobile experience works seamlessly, Stripe forms are responsive
Screenshot: 12_mobile_payment_methods.png

=== PASS/FAIL CRITERIA ===

PASS: All payment method operations work correctly AND Stripe integration is secure AND error handling is appropriate AND mobile compatibility is maintained

FAIL: Any payment method operation fails OR security issues with payment data OR poor error handling OR Stripe integration problems

Individual Step Criteria:
- Step 1: PASS if authentication works and dashboard loads, FAIL if login issues
- Step 2: PASS if payment methods page loads correctly, FAIL if navigation or loading issues
- Step 3: PASS if API returns proper payment data with masked numbers, FAIL if API errors or data exposure
- Step 4: PASS if valid card addition works with proper API calls, FAIL if addition fails or errors
- Step 5: PASS if Stripe security is maintained (no raw card data), FAIL if security vulnerabilities
- Step 6: PASS if multiple payment methods are managed correctly, FAIL if conflicts or display issues
- Step 7: PASS if default payment method functionality works, FAIL if default logic fails
- Step 8: PASS if invalid cards are properly rejected with clear errors, FAIL if invalid cards accepted
- Step 9: PASS if expired cards are caught and rejected, FAIL if expired cards accepted
- Step 10: PASS if payment method removal works with confirmation, FAIL if removal fails or no confirmation
- Step 11: PASS if system prevents problematic removals, FAIL if active methods can be removed unsafely
- Step 12: PASS if mobile experience works properly, FAIL if mobile compatibility issues

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== BUSINESS REQUIREMENTS VALIDATION ===

This test validates GitHub Issue #105 acceptance criteria:
- Adding new payment methods with Stripe integration
- Payment method listing with masked card numbers
- Setting default payment methods
- Payment method removal with confirmation
- Expired card handling and validation
- Secure payment data handling (PCI compliance)
- Mobile-responsive payment forms

Revenue Impact: Ensures students can manage payment methods securely, supporting subscription renewals and purchase transactions