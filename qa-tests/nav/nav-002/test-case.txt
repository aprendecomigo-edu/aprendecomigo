QA Test Case: Main Navigation Links Functionality

Test ID: NAV-002
Test Name: Main Navigation Links Functionality
Purpose: Verify that all main navigation links work correctly and navigate to the expected pages
Expected Result: All navigation links are clickable and lead to the correct routes without errors

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend with web support
- Authentication: Passwordless email verification with Knox tokens
- Navigation: Side navigation (desktop) and bottom tabs (mobile)

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Test Email: anapmc.carvalho@gmail.com
- User Role: school_owner
- Expected Routes: /home, /calendar, /chat, /users, /settings

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Expected: Django development server starts successfully on port 8000
Screenshot: 01_backend_server_started.png

Step 2: Start Frontend Development Server
Commands:
Screenshot: 02_frontend_server_started.png

Step 3: Navigate to Web Application (Desktop View)
1. Open browser to http://localhost:8081
2. Resize browser window to desktop size (1200px+ width)
3. Verify login page loads correctly
4. If already logged in, proceed to Step 5

Expected: Login page displays with email input field in desktop layout
Screenshot: 03_login_page_desktop.png

Step 4: Authenticate User (if needed)
1. Enter test email: anapmc.carvalho@gmail.com
2. Click "Enviar c√≥digo" button
3. Check backend logs for verification code
4. Enter 6-digit verification code
5. Click verify button

Expected: User successfully authenticates and reaches dashboard
Screenshot: 04_authentication_successful.png

Step 5: Verify Desktop Side Navigation Layout
1. Check that side navigation is visible on the left
2. Verify all navigation icons are displayed:
   - Home icon
   - Calendar icon
   - Chat/Messages icon
   - Users icon
   - Settings icon
3. Verify sidebar has proper styling and width

Expected: Side navigation visible with all 5 icons properly displayed
Screenshot: 05_desktop_side_navigation.png

Step 6: Test Home Navigation Link
1. Click on Home icon in side navigation
2. Verify URL changes to /home
3. Wait for page to load completely
4. Check that page content loads without errors
5. Verify no console errors appear

Expected: Home page loads successfully with /home route
Screenshot: 06_home_page_loaded.png

Step 7: Test Calendar Navigation Link
1. Click on Calendar icon in side navigation
2. Verify URL changes to /calendar
3. Wait for page to load completely
4. Check that calendar interface loads
5. Verify no console errors appear

Expected: Calendar page loads successfully with /calendar route
Screenshot: 07_calendar_page_loaded.png

Step 8: Test Chat Navigation Link
1. Click on Chat/Messages icon in side navigation
2. Verify URL changes to /chat
3. Wait for page to load completely
4. Check that chat interface loads
5. Verify no console errors appear

Expected: Chat page loads successfully with /chat route
Screenshot: 08_chat_page_loaded.png

Step 9: Test Users Navigation Link
1. Click on Users icon in side navigation
2. Verify URL changes to /users
3. Wait for page to load completely
4. Check that users interface loads
5. Verify no console errors appear

Expected: Users page loads successfully with /users route
Screenshot: 09_users_page_loaded.png

Step 10: Test Settings Navigation Link
1. Click on Settings icon in side navigation
2. Verify URL changes to /settings
3. Wait for page to load completely
4. Check that settings interface loads
5. Verify no console errors appear

Expected: Settings page loads successfully with /settings route
Screenshot: 10_settings_page_loaded.png

Step 11: Test Navigation Link Reliability
1. Navigate between different pages multiple times
2. Test clicking navigation links in rapid succession
3. Verify each navigation works consistently
4. Check that browser back/forward buttons work correctly
5. Verify no broken navigation states occur

Expected: All navigation links work reliably without breaking
Screenshot: 11_navigation_reliability_test.png

Step 12: Test Deep Linking
1. Manually type each route in browser address bar:
   - http://localhost:8081/home
   - http://localhost:8081/calendar
   - http://localhost:8081/chat
   - http://localhost:8081/users
   - http://localhost:8081/settings
2. Verify each page loads directly
3. Check that navigation state updates correctly

Expected: All routes accessible via direct URL entry
Screenshot: 12_deep_linking_test.png

Step 13: Test Navigation Error Handling
1. Navigate to a non-existent route (e.g., /nonexistent)
2. Verify 404 or error page displays appropriately
3. Check that navigation remains functional
4. Verify user can navigate back to valid routes

Expected: Error handling works without breaking navigation
Screenshot: 13_error_handling_test.png

=== PASS/FAIL CRITERIA ===

PASS: All navigation links work correctly AND all pages load successfully AND no console errors occur AND deep linking works
FAIL: Any navigation link fails OR pages don't load OR console errors occur OR deep linking doesn't work

Individual Step Criteria:
- Step 1-2: PASS if servers start without errors, FAIL if startup fails
- Step 3-4: PASS if authentication works, FAIL if login fails
- Step 5: PASS if side navigation visible with all icons, FAIL if navigation missing/broken
- Step 6: PASS if home page loads via navigation, FAIL if navigation fails or page errors
- Step 7: PASS if calendar page loads via navigation, FAIL if navigation fails or page errors
- Step 8: PASS if chat page loads via navigation, FAIL if navigation fails or page errors
- Step 9: PASS if users page loads via navigation, FAIL if navigation fails or page errors
- Step 10: PASS if settings page loads via navigation, FAIL if navigation fails or page errors
- Step 11: PASS if navigation works reliably, FAIL if navigation becomes unreliable
- Step 12: PASS if deep linking works for all routes, FAIL if any route fails
- Step 13: PASS if error handling works properly, FAIL if errors break navigation

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

Notes:
- This test validates that the core navigation system works correctly
- Focus on functional navigation rather than UI appearance
- All main routes should be accessible and functional
- Error handling should be graceful and not break the navigation system
