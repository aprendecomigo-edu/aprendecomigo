QA Test Case: Task Completion and Status Management

Test ID: TASK-004
Test Name: Task Completion and Status Management
Purpose: Verify that task status transitions work correctly and completion tracking is accurate
Expected Result: Tasks can be moved through all status states with proper timestamp tracking and UI updates

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Task Status: Pending → In Progress → Completed (with ability to reopen)
- Backend: Task model with automatic completion timestamp tracking
- Frontend: Status toggle buttons and visual status indicators

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Test User: anapmc.carvalho@gmail.com (school_owner role)
- Test Tasks: Tasks with different statuses for comprehensive testing

Database Prerequisites:
- User account with proper authentication
- Existing tasks or ability to create test tasks
- Clean state for status testing

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend
  python manage.py runserver --settings=aprendecomigo.settings.development

Open new terminal:
  cd /Users/anapmc/Code/aprendecomigo/frontend-ui
  npm start

Expected: Both servers start successfully
Screenshot: 01_servers_started.png

Step 2: Navigate to Application and Login
1. Open browser to http://localhost:8081
2. Complete login process with test email
3. Navigate to dashboard and task management section

Expected: User successfully authenticated and can access tasks
Screenshot: 02_tasks_interface_loaded.png

Step 3: Create Test Tasks for Status Testing
1. Create the following test tasks:
   - Task 1: "Status Test - Pending", Status: Pending
   - Task 2: "Status Test - In Progress", Status: In Progress
   - Task 3: "Status Test - Completion", Status: Pending
2. Verify all tasks appear in task list

Expected: Test tasks created with different initial statuses
Screenshot: 03_test_tasks_created.png

Step 4: Test Pending to In Progress Transition
1. Locate "Status Test - Pending" task
2. Find status change button/dropdown
3. Change status from "Pending" to "In Progress"
4. Verify status change is reflected in UI
5. Check that task appearance changes (colors, icons, etc.)

Expected: Task status changes to In Progress with visual updates
Screenshot: 04_pending_to_in_progress.png

Step 5: Test In Progress to Completed Transition
1. Locate "Status Test - In Progress" task
2. Change status from "In Progress" to "Completed"
3. Verify completion timestamp is automatically set
4. Check that task moves to completed section or changes appearance

Expected: Task marked as completed with timestamp recorded
Screenshot: 05_in_progress_to_completed.png

Step 6: Test Direct Pending to Completed Transition
1. Locate "Status Test - Completion" task
2. Change status directly from "Pending" to "Completed"
3. Verify this transition is allowed
4. Check completion timestamp is set

Expected: Direct pending to completed transition works
Screenshot: 06_pending_to_completed.png

Step 7: Verify Completion Timestamp Accuracy
1. Note the exact time when completing a task
2. Check that "completed_at" timestamp matches current time
3. Verify timestamp format and timezone
4. Check timestamp display in UI

Expected: Completion timestamp accurate and properly formatted
Screenshot: 07_completion_timestamp.png

Step 8: Test Task Reopening
1. Select a completed task
2. Find option to reopen/uncomplete task
3. Change status back to "Pending" or "In Progress"
4. Verify completion timestamp is cleared

Expected: Task can be reopened and completion timestamp removed
Screenshot: 08_task_reopened.png

Step 9: Test Status Toggle Buttons
1. If toggle buttons exist for completion
2. Click toggle to complete task
3. Click toggle again to uncomplete task
4. Verify smooth toggling between states

Expected: Status toggle buttons work smoothly
Screenshot: 09_status_toggle.png

Step 10: Test Bulk Status Changes
1. Select multiple tasks (if bulk operations available)
2. Change status of multiple tasks at once
3. Verify all selected tasks change status
4. Check that timestamps are set correctly for all

Expected: Bulk status changes work correctly
Screenshot: 10_bulk_status_changes.png

Step 11: Test Status Filtering
1. Create tasks with different statuses
2. Use status filter to show only "Pending" tasks
3. Switch filter to show only "Completed" tasks
4. Test "In Progress" and "All" filters

Expected: Status filtering works correctly
Screenshot: 11_status_filtering.png

Step 12: Test Status Sorting
1. Create tasks with different completion times
2. Sort tasks by status
3. Sort by completion date
4. Verify sorting order is correct

Expected: Status-based sorting works correctly
Screenshot: 12_status_sorting.png

Step 13: Test API Status Updates
1. Open browser developer tools
2. Change task status while monitoring network requests
3. Verify API calls are made to correct endpoints
4. Check request/response data for status changes

Expected: API calls properly handle status updates
Screenshot: 13_api_status_updates.png

Step 14: Test Status Persistence
1. Change task status
2. Refresh the page
3. Verify status changes persist
4. Check that timestamps are maintained

Expected: Status changes persist across page refreshes
Screenshot: 14_status_persistence.png

Step 15: Test Status with Different Task Types
1. Create tasks of different types (onboarding, personal, system)
2. Test status changes for each type
3. Verify system tasks can be completed but not deleted
4. Check that onboarding tasks behave correctly

Expected: All task types support status changes appropriately
Screenshot: 15_status_by_task_type.png

Step 16: Test Status Change Validation
1. Attempt invalid status transitions (if any restrictions exist)
2. Verify appropriate error messages
3. Check that invalid changes are prevented
4. Test edge cases in status transitions

Expected: Status change validation works correctly
Screenshot: 16_status_validation.png

Step 17: Test Status Visual Indicators
1. Verify pending tasks have appropriate visual styling
2. Check in-progress tasks have distinct appearance
3. Verify completed tasks are visually different (strikethrough, grayed out)
4. Test urgent task visual indicators

Expected: Each status has clear visual indicators
Screenshot: 17_status_visual_indicators.png

Step 18: Test Status Change Notifications
1. Change task status
2. Check for user feedback (toasts, notifications)
3. Verify success/error messages appear
4. Test notification behavior for different status changes

Expected: User receives appropriate feedback for status changes
Screenshot: 18_status_notifications.png

=== PASS/FAIL CRITERIA ===

PASS: All task status transitions work correctly with proper timestamp tracking and UI updates

FAIL: Any of the following conditions occur:
- Status changes don't save or persist
- Completion timestamps not set or incorrect
- Task reopening doesn't clear completion timestamp
- Status changes don't reflect in UI
- Invalid status transitions are allowed
- API calls fail for status updates
- Status filtering/sorting doesn't work
- Visual indicators missing or incorrect
- Bulk status changes fail
- System tasks can't be completed appropriately

Individual Step Criteria:
- Step 1-2: PASS if servers start and user can access tasks
- Step 3: PASS if test tasks created successfully
- Step 4: PASS if pending to in-progress transition works
- Step 5: PASS if in-progress to completed transition works with timestamp
- Step 6: PASS if direct pending to completed transition works
- Step 7: PASS if completion timestamps are accurate
- Step 8: PASS if task reopening works and clears timestamp
- Step 9: PASS if status toggle buttons work smoothly
- Step 10: PASS if bulk status changes work (if available)
- Step 11: PASS if status filtering works correctly
- Step 12: PASS if status sorting works correctly
- Step 13: PASS if API calls handle status updates properly
- Step 14: PASS if status changes persist across refreshes
- Step 15: PASS if different task types support status changes
- Step 16: PASS if status change validation works
- Step 17: PASS if visual indicators are clear and distinct
- Step 18: PASS if status change notifications work

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails
