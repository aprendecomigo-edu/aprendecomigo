QA Test Case: Task Deadline and Overdue Functionality

Test ID: TASK-005
Test Name: Task Deadline and Overdue Functionality
Purpose: Verify that due date validation, overdue detection, and deadline-related features work correctly
Expected Result: Tasks with due dates are properly validated, overdue tasks are identified and displayed appropriately

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Due Date Features: Validation, overdue detection, "days until due" calculation
- Backend: Task model with is_overdue and days_until_due computed properties
- Frontend: Due date display, overdue warnings, date validation

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data:
- Test User: anapmc.carvalho@gmail.com (school_owner role)
- Current Date: 2025-07-06 (for date calculations)
- Test Due Dates: Past, present, and future dates

Database Prerequisites:
- User account with proper authentication
- Ability to create tasks with different due dates
- Clean state for deadline testing

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  make dev

Screenshot: 01_servers_started.png

Step 2: Navigate to Application and Login
1. Open browser to http://localhost:8081
2. Complete login process with test email
3. Navigate to dashboard and task management section

Expected: User successfully authenticated and can access tasks
Screenshot: 02_tasks_interface_loaded.png

Step 3: Test Due Date Validation - Past Date
1. Create new task with title "Due Date Test - Past"
2. Set due date to 2025-07-05 (yesterday)
3. Attempt to save task
4. Verify validation error appears
5. Check error message is clear and helpful

Expected: Past due date rejected with clear error message
Screenshot: 03_past_date_validation.png

Step 4: Test Due Date Validation - Today
1. Create new task with title "Due Date Test - Today"
2. Set due date to 2025-07-06 (today)
3. Save task
4. Verify task is created successfully

Expected: Today's date accepted as valid due date
Screenshot: 04_today_date_accepted.png

Step 5: Test Due Date Validation - Future Date
1. Create new task with title "Due Date Test - Future"
2. Set due date to 2025-07-10 (4 days from now)
3. Save task
4. Verify task is created successfully

Expected: Future date accepted as valid due date
Screenshot: 05_future_date_accepted.png

Step 6: Create Tasks with Different Due Dates
1. Create the following test tasks:
   - Task 1: "Overdue Task", Due: 2025-07-04 (2 days ago) - if validation allows
   - Task 2: "Due Today", Due: 2025-07-06 (today)
   - Task 3: "Due Tomorrow", Due: 2025-07-07 (tomorrow)
   - Task 4: "Due Next Week", Due: 2025-07-13 (7 days from now)
2. Use backend admin or API to create overdue task if frontend validation prevents it

Expected: Tasks with various due dates created for testing
Screenshot: 06_various_due_dates.png

Step 7: Test Overdue Task Detection
1. Verify overdue task appears in task list
2. Check that overdue task has special visual indicator (red color, warning icon)
3. Verify overdue task is marked as "overdue" in UI
4. Check that overdue task shows "X days overdue" message

Expected: Overdue tasks clearly identified with visual warnings
Screenshot: 07_overdue_task_detection.png

Step 8: Test Due Today Task Display
1. Locate task due today
2. Verify it shows "Due today" or "0 days until due"
3. Check for special styling (orange color, today indicator)
4. Verify task is prioritized or highlighted

Expected: Tasks due today have appropriate styling and messaging
Screenshot: 08_due_today_display.png

Step 9: Test Days Until Due Calculation
1. Check "Due Tomorrow" task shows "1 day until due"
2. Check "Due Next Week" task shows "7 days until due"
3. Verify calculations are accurate
4. Check that calculations update daily

Expected: "Days until due" calculations are accurate
Screenshot: 09_days_until_due.png

Step 10: Test Overdue Task Filtering
1. Look for overdue task filter option
2. Apply overdue filter
3. Verify only overdue tasks are displayed
4. Check that filter works correctly

Expected: Overdue filter shows only overdue tasks
Screenshot: 10_overdue_filtering.png

Step 11: Test Due Date Sorting
1. Sort tasks by due date (ascending)
2. Verify overdue tasks appear first
3. Check that today's tasks come next
4. Verify future tasks are in correct order

Expected: Due date sorting works correctly
Screenshot: 11_due_date_sorting.png

Step 12: Test Due Date Editing
1. Edit a task with future due date
2. Try to change due date to past date
3. Verify validation prevents saving
4. Change to valid future date and save

Expected: Due date editing validates correctly
Screenshot: 12_due_date_editing.png

Step 13: Test Overdue Task Completion
1. Complete an overdue task
2. Verify task can be completed despite being overdue
3. Check that completion timestamp is recorded
4. Verify task moves to completed section

Expected: Overdue tasks can be completed normally
Screenshot: 13_overdue_completion.png

Step 14: Test Due Date API Responses
1. Open browser developer tools
2. Check API responses for tasks with due dates
3. Verify is_overdue field is correctly calculated
4. Check days_until_due field is accurate

Expected: API returns correct due date calculations
Screenshot: 14_api_due_date_responses.png

Step 15: Test Due Date Display Formats
1. Verify due dates are displayed in consistent format
2. Check date formatting for different locales
3. Verify relative dates ("today", "tomorrow", "in 3 days")
4. Check absolute dates for distant future

Expected: Due dates displayed in user-friendly format
Screenshot: 15_due_date_formats.png

Step 16: Test Urgent Task with Due Date
1. Create urgent task with due date
2. Verify urgent indicator appears alongside due date
3. Check that urgent overdue tasks have special styling
4. Verify priority ordering considers both urgency and due date

Expected: Urgent tasks with due dates properly prioritized
Screenshot: 16_urgent_due_date.png

Step 17: Test Due Date in Calendar View
1. Navigate to calendar view
2. Verify tasks appear on their due dates
3. Check that overdue tasks appear on past dates
4. Verify calendar shows due date, not creation date

Expected: Calendar shows tasks on their due dates
Screenshot: 17_calendar_due_dates.png

Step 18: Test Due Date Edge Cases
1. Create task due at end of day
2. Test task due at beginning of day
3. Test timezone handling for due dates
4. Test leap year date handling (if applicable)

Expected: Edge cases handled correctly
Screenshot: 18_due_date_edge_cases.png

=== PASS/FAIL CRITERIA ===

PASS: Due date validation, overdue detection, and deadline features work correctly

FAIL: Any of the following conditions occur:
- Past due dates are accepted when they shouldn't be
- Overdue tasks not detected or displayed correctly
- "Days until due" calculations are incorrect
- Due date sorting doesn't work properly
- Overdue tasks can't be completed
- Due date validation fails during editing
- API responses don't include correct due date calculations
- Calendar doesn't show tasks on correct due dates
- Date formatting is inconsistent or confusing
- Edge cases cause errors or incorrect behavior

Individual Step Criteria:
- Step 1-2: PASS if servers start and user can access tasks
- Step 3: PASS if past due date validation works
- Step 4: PASS if today's date accepted as valid
- Step 5: PASS if future dates accepted as valid
- Step 6: PASS if tasks with various due dates created
- Step 7: PASS if overdue tasks properly identified and styled
- Step 8: PASS if tasks due today have appropriate display
- Step 9: PASS if "days until due" calculations are accurate
- Step 10: PASS if overdue filtering works correctly
- Step 11: PASS if due date sorting works properly
- Step 12: PASS if due date editing validates correctly
- Step 13: PASS if overdue tasks can be completed
- Step 14: PASS if API returns correct due date calculations
- Step 15: PASS if due dates displayed in user-friendly format
- Step 16: PASS if urgent tasks with due dates prioritized correctly
- Step 17: PASS if calendar shows tasks on due dates
- Step 18: PASS if edge cases handled correctly

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails
