QA Test Case: Admin API Endpoints and Security

Test ID: EXPIRY-003
Test Name: Admin API Endpoints for Package Expiration Management and Security Validation
Purpose: Verify that admin-only API endpoints for package expiration management work correctly, enforce proper security permissions, and handle all operations accurately
Expected Result: All admin API endpoints function correctly with proper authentication and authorization

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - Educational platform
- Architecture: Django REST backend + React Native frontend
- Feature: Package Expiration Admin APIs (GitHub Issue #33)
- Security: IsAdminUser permission required for all endpoints

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/
2. Python Virtual Environment: .venv/ in project root (NOT in backend folder)
3. Environment Variables:
   - DJANGO_ENV=development
   - EXPO_PUBLIC_ENV=development

Test Data Required:
- Admin User: anapmc.carvalho@gmail.com (has admin permissions)
- Regular User: for security testing
- Multiple test packages with various expiration states

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Authentication
Commands:
  cd /Users/anapmc/Code/aprendecomigo
  source .venv/bin/activate
  cd backend
  python manage.py migrate
  make dev

Expected: Both services start successfully
- Backend: http://localhost:8000 responds with 401 for /api/
- Frontend: http://localhost:8081 shows loading screen

Step 2: Obtain Admin Authentication Token
Navigate to frontend and authenticate as admin:
1. Open browser to http://localhost:8081
2. Navigate to login page
3. Enter email: anapmc.carvalho@gmail.com
4. Request verification code
5. Extract code from server logs: `tail -20 logs/backend.log`
6. Complete authentication

Extract JWT token from browser developer tools:
1. Open Developer Tools (F12)
2. Go to Application/Storage tab
3. Find AsyncStorage or LocalStorage
4. Locate 'authToken' or similar key
5. Copy the JWT token value

Expected: Admin user successfully authenticated with JWT token obtained
Screenshot: 01_admin_authenticated.png

Step 3: Create Test Data for API Testing
Commands:
  python manage.py shell

Python Shell Commands:
```python
from django.contrib.auth import get_user_model
from finances.models import PurchaseTransaction, StudentAccountBalance, HourConsumption, TransactionType, TransactionPaymentStatus
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta

User = get_user_model()

# Create test student
student, created = User.objects.get_or_create(
    email='student.api.test@example.com',
    defaults={
        'name': 'API Test Student',
        'role': 'student'
    }
)

# Create student balance
StudentAccountBalance.objects.get_or_create(
    student=student,
    defaults={
        'hours_purchased': Decimal('25.00'),
        'balance_amount': Decimal('375.00')
    }
)

# Create regular user for security testing
regular_user, created = User.objects.get_or_create(
    email='regular.user.test@example.com',
    defaults={
        'name': 'Regular User Test',
        'role': 'teacher'
    }
)

# Create various packages for testing
expired_package = PurchaseTransaction.objects.create(
    student=student,
    transaction_type=TransactionType.PACKAGE,
    payment_status=TransactionPaymentStatus.COMPLETED,
    amount=Decimal('100.00'),
    expires_at=timezone.now() - timedelta(days=3),
    metadata={'hours_included': 8.0}
)

grace_period_package = PurchaseTransaction.objects.create(
    student=student,
    transaction_type=TransactionType.PACKAGE,
    payment_status=TransactionPaymentStatus.COMPLETED,
    amount=Decimal('75.00'),
    expires_at=timezone.now() - timedelta(hours=12),
    metadata={'hours_included': 6.0}
)

expiring_soon_package = PurchaseTransaction.objects.create(
    student=student,
    transaction_type=TransactionType.PACKAGE,
    payment_status=TransactionPaymentStatus.COMPLETED,
    amount=Decimal('120.00'),
    expires_at=timezone.now() + timedelta(days=5),
    metadata={'hours_included': 10.0}
)

# Add consumption to one package
HourConsumption.objects.create(
    student=student,
    purchase_transaction=expired_package,
    hours_consumed=Decimal('2.0'),
    session_date=timezone.now() - timedelta(days=5)
)

print(f"Created test data:")
print(f"- Test student: {student.email}")
print(f"- Regular user: {regular_user.email}")
print(f"- Expired package ID: {expired_package.id}")
print(f"- Grace period package ID: {grace_period_package.id}")
print(f"- Expiring soon package ID: {expiring_soon_package.id}")
print(f"- Package with consumption: {expired_package.id} (2h consumed)")
```

Expected: Test data created successfully with package IDs displayed
Screenshot: 02_api_test_data_created.png

Step 4: Test GET /api/finances/admin/expired-packages/ Endpoint
Using curl or API testing tool:

Commands:
```bash
# Test with admin token (replace YOUR_ADMIN_TOKEN with actual token)
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"

# Test with grace hours parameter
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/?grace_hours=48" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"

# Test with student email filter
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/?student_email=student.api.test@example.com" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"
```

Expected Response Structure:
```json
{
  "expired_packages": [
    {
      "id": "package_id",
      "student": "student_id",
      "amount": "100.00",
      "expires_at": "timestamp",
      "metadata": {"hours_included": 8.0}
    }
  ],
  "count": 1,
  "grace_hours": 24
}
```

Expected Results:
- Status 200 OK
- Expired packages returned correctly
- Grace hours parameter works
- Student email filter works
- Count field is accurate

Screenshot: 03_get_expired_packages_api.png

Step 5: Test Security - Unauthorized Access
Commands:
```bash
# Test without authentication token
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/" \
  -H "Content-Type: application/json"

# Test with invalid token
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/" \
  -H "Authorization: Bearer invalid_token_here" \
  -H "Content-Type: application/json"
```

Expected Results:
- Status 401 Unauthorized for missing token
- Status 401 Unauthorized for invalid token
- Error messages indicating authentication required

Commands for non-admin user test:
1. Authenticate regular user through frontend
2. Extract their JWT token
3. Test API access:

```bash
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/" \
  -H "Authorization: Bearer REGULAR_USER_TOKEN" \
  -H "Content-Type: application/json"
```

Expected Result:
- Status 403 Forbidden (admin permission required)

Screenshot: 04_security_unauthorized_access.png

Step 6: Test POST /api/finances/admin/process-expired-packages/ Endpoint
Commands:
```bash
# Test dry run
curl -X POST "http://localhost:8000/api/finances/admin/process-expired-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "grace_hours": 24,
    "dry_run": true
  }'

# Test actual processing
curl -X POST "http://localhost:8000/api/finances/admin/process-expired-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "grace_hours": 24,
    "dry_run": false
  }'
```

Expected Dry Run Response:
```json
{
  "dry_run": true,
  "packages_to_process": 1,
  "total_hours_to_expire": "6.00",
  "grace_hours": 24
}
```

Expected Actual Processing Response:
```json
{
  "processed_count": 1,
  "failed_count": 0,
  "total_hours_expired": "6.00",
  "grace_hours": 24,
  "results": [
    {
      "package_id": "package_id",
      "student_id": "student_id",
      "hours_expired": "6.00",
      "success": true,
      "error_message": ""
    }
  ]
}
```

Verification Commands:
```python
python manage.py shell
from finances.models import StudentAccountBalance
from django.contrib.auth import get_user_model

User = get_user_model()
student = User.objects.get(email='student.api.test@example.com')
balance = StudentAccountBalance.objects.get(student=student)
print(f"Student balance after API processing: {balance.hours_purchased} hours")
# Should be 25.00 - 6.00 = 19.00 hours (8h package - 2h consumed = 6h expired)
```

Expected Results:
- Dry run returns accurate preview without changes
- Actual processing updates database correctly
- Balance verification matches expected calculation

Screenshot: 05_process_expired_packages_api.png

Step 7: Test POST /api/finances/admin/extend-package/{package_id}/ Endpoint
Commands:
```bash
# Test package extension (use grace_period_package ID from test data)
curl -X POST "http://localhost:8000/api/finances/admin/extend-package/GRACE_PERIOD_PACKAGE_ID/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "extension_days": 30,
    "reason": "Customer service extension",
    "extend_from_now": false
  }'

# Test extend from now
curl -X POST "http://localhost:8000/api/finances/admin/extend-package/GRACE_PERIOD_PACKAGE_ID/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "extension_days": 15,
    "reason": "Extend from current time",
    "extend_from_now": true
  }'
```

Expected Response:
```json
{
  "success": true,
  "package_id": "package_id",
  "original_expiry": "original_timestamp",
  "new_expiry": "new_timestamp",
  "extension_days": 30,
  "audit_log": "Package X extended by 30 days..."
}
```

Test Error Cases:
```bash
# Test missing extension_days
curl -X POST "http://localhost:8000/api/finances/admin/extend-package/PACKAGE_ID/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "reason": "Test missing days"
  }'

# Test non-existent package
curl -X POST "http://localhost:8000/api/finances/admin/extend-package/99999/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "extension_days": 30
  }'
```

Expected Error Responses:
- Status 400 for missing extension_days
- Status 404 for non-existent package

Screenshot: 06_extend_package_api.png

Step 8: Test GET /api/finances/admin/expiration-analytics/ Endpoint
Commands:
```bash
# Test default analytics
curl -X GET "http://localhost:8000/api/finances/admin/expiration-analytics/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"

# Test with custom period
curl -X GET "http://localhost:8000/api/finances/admin/expiration-analytics/?period_days=60" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"
```

Expected Response Structure:
```json
{
  "period_days": 30,
  "metrics": {
    "expiration_rate": 0.5,
    "average_package_lifetime": 45.2,
    "hours_lost_to_expiration": "12.00",
    "revenue_impact": "180.00"
  },
  "summary": {
    "total_packages": 10,
    "expired_packages": 5,
    "expiring_soon": 2,
    "hours_expired": "30.00",
    "students_affected": 3
  },
  "at_risk_students": [
    {
      "student_id": "student_id",
      "expired_packages_count": 2,
      "risk_score": 0.4
    }
  ],
  "generated_at": "timestamp"
}
```

Expected Results:
- Status 200 OK
- Comprehensive analytics data returned
- Period_days parameter works correctly
- All metrics calculated accurately

Screenshot: 07_expiration_analytics_api.png

Step 9: Test POST /api/finances/admin/send-expiration-notifications/ Endpoint
Commands:
```bash
# Test notification sending
curl -X POST "http://localhost:8000/api/finances/admin/send-expiration-notifications/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "days_ahead": 7
  }'

# Test with specific student
curl -X POST "http://localhost:8000/api/finances/admin/send-expiration-notifications/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "days_ahead": 7,
    "student_email": "student.api.test@example.com"
  }'
```

Expected Response:
```json
{
  "notifications_sent": 1,
  "failed_notifications": 0,
  "days_ahead": 7,
  "results": [
    {
      "recipient": "student.api.test@example.com",
      "success": true,
      "message": "Expiration warning sent successfully",
      "sent_at": "timestamp"
    }
  ]
}
```

Verification - Check Server Logs:
Commands:
  tail -30 logs/backend.log | grep -A 5 -B 5 "Package Expiring Soon"

Expected Log Content:
- Email notification logged
- Subject: "Package Expiring Soon - 5 Days Remaining" (or similar)
- Recipient email address correct

Screenshot: 08_send_notifications_api.png

Step 10: Test GET /api/finances/admin/packages-expiring-soon/ Endpoint
Commands:
```bash
# Test default days ahead
curl -X GET "http://localhost:8000/api/finances/admin/packages-expiring-soon/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"

# Test with custom days ahead
curl -X GET "http://localhost:8000/api/finances/admin/packages-expiring-soon/?days_ahead=14" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"
```

Expected Response:
```json
{
  "expiring_packages": [
    {
      "id": "package_id",
      "student": "student_id",
      "amount": "120.00",
      "expires_at": "timestamp",
      "metadata": {"hours_included": 10.0}
    }
  ],
  "count": 1,
  "days_ahead": 7
}
```

Expected Results:
- Status 200 OK
- Packages expiring within timeframe returned
- Days_ahead parameter works correctly
- Count field accurate

Screenshot: 09_packages_expiring_soon_api.png

Step 11: Test POST /api/finances/admin/bulk-extend-packages/ Endpoint
Commands:
```bash
# Test bulk extension
curl -X POST "http://localhost:8000/api/finances/admin/bulk-extend-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "package_ids": ["PACKAGE_ID_1", "PACKAGE_ID_2"],
    "extension_days": 45,
    "reason": "Bulk extension for system maintenance"
  }'
```

Expected Response:
```json
{
  "extended_count": 2,
  "failed_count": 0,
  "extension_days": 45,
  "results": [
    {
      "package_id": "package_id_1",
      "success": true,
      "original_expiry": "timestamp1",
      "new_expiry": "timestamp1_plus_45_days",
      "error_message": ""
    },
    {
      "package_id": "package_id_2",
      "success": true,
      "original_expiry": "timestamp2",
      "new_expiry": "timestamp2_plus_45_days",
      "error_message": ""
    }
  ]
}
```

Test Error Cases:
```bash
# Test missing package_ids
curl -X POST "http://localhost:8000/api/finances/admin/bulk-extend-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "extension_days": 30
  }'

# Test missing extension_days
curl -X POST "http://localhost:8000/api/finances/admin/bulk-extend-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "package_ids": ["123"]
  }'
```

Expected Error Responses:
- Status 400 for missing required fields
- Appropriate error messages

Screenshot: 10_bulk_extend_packages_api.png

Step 12: Test API Rate Limiting and Performance
Commands:
```bash
# Test multiple rapid requests to check rate limiting
for i in {1..10}; do
  curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/" \
    -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
    -H "Content-Type: application/json" &
done
wait

# Test with large dataset
python manage.py shell
```

Python Commands for Performance Test:
```python
# Create larger dataset
from django.contrib.auth import get_user_model
from finances.models import PurchaseTransaction, StudentAccountBalance, TransactionType, TransactionPaymentStatus
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta

User = get_user_model()

# Create 20 students with 5 packages each (100 packages total)
for i in range(20):
    student, created = User.objects.get_or_create(
        email=f'perf.api.student{i}@example.com',
        defaults={
            'name': f'Performance Student {i}',
            'role': 'student'
        }
    )
    
    StudentAccountBalance.objects.get_or_create(
        student=student,
        defaults={
            'hours_purchased': Decimal('30.00'),
            'balance_amount': Decimal('450.00')
        }
    )
    
    for j in range(5):
        PurchaseTransaction.objects.create(
            student=student,
            transaction_type=TransactionType.PACKAGE,
            payment_status=TransactionPaymentStatus.COMPLETED,
            amount=Decimal('80.00'),
            expires_at=timezone.now() - timedelta(days=j+1),
            metadata={'hours_included': 6.0}
        )

print("Created performance test data: 20 students, 100 packages")
```

Commands:
```bash
# Test API performance with large dataset
time curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"
```

Expected Results:
- API handles rapid requests appropriately
- Response time reasonable for large datasets (< 5 seconds)
- No server errors or crashes

Screenshot: 11_performance_testing.png

Step 13: Test API Documentation and Error Messages
Commands:
```bash
# Test invalid HTTP methods
curl -X PUT "http://localhost:8000/api/finances/admin/expired-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"

# Test malformed JSON
curl -X POST "http://localhost:8000/api/finances/admin/process-expired-packages/" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"invalid_json": true, "malformed": }'

# Test invalid parameters
curl -X GET "http://localhost:8000/api/finances/admin/expired-packages/?grace_hours=invalid" \
  -H "Authorization: Bearer YOUR_ADMIN_TOKEN" \
  -H "Content-Type: application/json"
```

Expected Results:
- Status 405 Method Not Allowed for invalid HTTP methods
- Status 400 Bad Request for malformed JSON
- Status 400 Bad Request for invalid parameters
- Clear error messages explaining the issues

Screenshot: 12_api_error_handling.png

Step 14: Clean Up Test Data
Commands:
```python
python manage.py shell
from django.contrib.auth import get_user_model
from finances.models import PurchaseTransaction, StudentAccountBalance, HourConsumption

User = get_user_model()

# Clean up API test data
test_emails = [
    'student.api.test@example.com',
    'regular.user.test@example.com'
]

# Add performance test emails
performance_emails = [f'perf.api.student{i}@example.com' for i in range(20)]
all_test_emails = test_emails + performance_emails

for email in all_test_emails:
    try:
        user = User.objects.get(email=email)
        PurchaseTransaction.objects.filter(student=user).delete()
        HourConsumption.objects.filter(student=user).delete()
        StudentAccountBalance.objects.filter(student=user).delete()
        user.delete()
        print(f"Cleaned up: {email}")
    except User.DoesNotExist:
        pass

print("All API test data cleaned up successfully")
```

Expected: All test data removed cleanly
Screenshot: 13_api_cleanup_completed.png

=== PASS/FAIL CRITERIA ===

PASS: All API endpoints work correctly with proper security enforcement
FAIL: Any endpoint fails OR security vulnerabilities exist

Individual Step Criteria:
- Step 1: PASS if services start, FAIL if startup fails
- Step 2: PASS if admin authentication works, FAIL if authentication fails
- Step 3: PASS if test data created, FAIL if creation fails
- Step 4: PASS if GET expired packages works correctly, FAIL if endpoint fails
- Step 5: PASS if security blocks unauthorized access, FAIL if security bypassed
- Step 6: PASS if process expired packages API works, FAIL if processing API fails
- Step 7: PASS if extend package API works, FAIL if extension API fails
- Step 8: PASS if analytics API returns correct data, FAIL if analytics are wrong
- Step 9: PASS if notification API works, FAIL if notifications fail
- Step 10: PASS if expiring soon API works, FAIL if data incorrect
- Step 11: PASS if bulk extend API works, FAIL if bulk operations fail
- Step 12: PASS if performance is acceptable, FAIL if APIs are too slow
- Step 13: PASS if error handling is robust, FAIL if poor error messages
- Step 14: PASS if cleanup works, FAIL if cleanup fails

Critical Requirements for PASS:
1. All endpoints enforce IsAdminUser permission correctly
2. API responses match documented schemas
3. Database operations are accurate and atomic
4. Error handling provides clear, helpful messages
5. Performance is acceptable for production use
6. Security blocks all unauthorized access attempts
7. All CRUD operations work correctly
8. Bulk operations handle multiple items properly

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails