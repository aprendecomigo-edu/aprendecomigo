# Generated by Django 5.2.5 on 2025-08-29 16:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('finances', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable name for the sequence', max_length=200, verbose_name='sequence name')),
                ('description', models.TextField(blank=True, help_text='Description of what this sequence does', null=True, verbose_name='description')),
                ('trigger_event', models.CharField(choices=[('invitation_sent', 'Invitation Sent'), ('invitation_viewed', 'Invitation Viewed'), ('invitation_accepted', 'Invitation Accepted'), ('profile_incomplete', 'Profile Incomplete'), ('profile_completed', 'Profile Completed')], help_text='Event that triggers this sequence', max_length=50, verbose_name='trigger event')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this sequence is active', verbose_name='is active')),
                ('max_emails', models.PositiveIntegerField(default=5, help_text='Maximum number of emails to send in this sequence', verbose_name='maximum emails')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(help_text='School this sequence belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='email_sequences', to='accounts.school')),
            ],
            options={
                'verbose_name': 'Email Sequence',
                'verbose_name_plural': 'Email Sequences',
                'ordering': ['school', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('low_balance', 'Low Balance'), ('package_expiring', 'Package Expiring'), ('balance_depleted', 'Balance Depleted')], help_text='Type of notification', max_length=20, verbose_name='notification type')),
                ('title', models.CharField(help_text='Notification title', max_length=200, verbose_name='title')),
                ('message', models.TextField(help_text='Notification message content', verbose_name='message')),
                ('is_read', models.BooleanField(default=False, help_text='Whether the notification has been read', verbose_name='is read')),
                ('read_at', models.DateTimeField(blank=True, help_text='Timestamp when notification was read', null=True, verbose_name='read at')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional notification data in JSON format', verbose_name='metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('related_transaction', models.ForeignKey(blank=True, help_text='Purchase transaction related to this notification (for package expiration)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='finances.purchasetransaction', verbose_name='related transaction')),
                ('user', models.ForeignKey(help_text='User who will receive this notification', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SchoolEmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_type', models.CharField(choices=[('invitation', 'Invitation'), ('reminder', 'Reminder'), ('welcome', 'Welcome'), ('profile_reminder', 'Profile Reminder'), ('completion_celebration', 'Completion Celebration'), ('ongoing_support', 'Ongoing Support'), ('low_balance_alert', 'Low Balance Alert'), ('package_expiring_alert', 'Package Expiring Alert')], help_text='Type of email template', max_length=50, verbose_name='template type')),
                ('name', models.CharField(help_text='Human-readable name for the template', max_length=200, verbose_name='template name')),
                ('subject_template', models.CharField(help_text='Email subject with template variables like {{teacher_name}}', max_length=300, verbose_name='subject template')),
                ('html_content', models.TextField(help_text='HTML email content with template variables', verbose_name='HTML content')),
                ('text_content', models.TextField(help_text='Plain text email content with template variables', verbose_name='text content')),
                ('use_school_branding', models.BooleanField(default=True, help_text='Apply school colors and logo to template', verbose_name='use school branding')),
                ('custom_css', models.TextField(blank=True, help_text='Additional CSS for template customization', null=True, verbose_name='custom CSS')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is active and can be used', verbose_name='is active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default template for this type', verbose_name='is default')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this template', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_email_templates', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='School this template belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='messaging_email_templates', to='accounts.school')),
            ],
            options={
                'verbose_name': 'School Email Template',
                'verbose_name_plural': 'School Email Templates',
                'ordering': ['school', 'template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailSequenceStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_number', models.PositiveIntegerField(help_text='Order of this step in the sequence', verbose_name='step number')),
                ('delay_hours', models.PositiveIntegerField(default=24, help_text='Hours to wait before sending this email', verbose_name='delay hours')),
                ('send_condition', models.CharField(choices=[('always', 'Always Send'), ('if_no_response', 'If No Response'), ('if_not_accepted', 'If Not Accepted'), ('if_profile_incomplete', 'If Profile Incomplete')], default='always', help_text='Condition that must be met to send this email', max_length=50, verbose_name='send condition')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this step is active', verbose_name='is active')),
                ('sequence', models.ForeignKey(help_text='Email sequence this step belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='messaging.emailsequence')),
                ('template', models.ForeignKey(help_text='Email template to use for this step', on_delete=django.db.models.deletion.CASCADE, related_name='sequence_steps', to='messaging.schoolemailtemplate')),
            ],
            options={
                'verbose_name': 'Email Sequence Step',
                'verbose_name_plural': 'Email Sequence Steps',
                'ordering': ['sequence', 'step_number'],
            },
        ),
        migrations.CreateModel(
            name='EmailCommunication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_email', models.EmailField(help_text='Email address of the recipient', max_length=254, verbose_name='recipient email')),
                ('template_type', models.CharField(choices=[('invitation', 'Invitation'), ('reminder', 'Reminder'), ('welcome', 'Welcome'), ('profile_reminder', 'Profile Reminder'), ('completion_celebration', 'Completion Celebration'), ('ongoing_support', 'Ongoing Support'), ('low_balance_alert', 'Low Balance Alert'), ('package_expiring_alert', 'Package Expiring Alert')], help_text='Type of email template used', max_length=50, verbose_name='template type')),
                ('subject', models.CharField(help_text='Rendered email subject', max_length=300, verbose_name='email subject')),
                ('communication_type', models.CharField(choices=[('manual', 'Manual'), ('automated', 'Automated'), ('sequence', 'Sequence')], default='manual', help_text='Type of communication', max_length=20, verbose_name='communication type')),
                ('delivery_status', models.CharField(choices=[('not_sent', 'Not Sent'), ('queued', 'Queued'), ('sending', 'Sending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('failed', 'Failed'), ('bounced', 'Bounced'), ('spam', 'Marked as Spam')], default='queued', help_text='Current delivery status', max_length=20, verbose_name='delivery status')),
                ('queued_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True, help_text='Reason for delivery failure', null=True, verbose_name='failure reason')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of delivery attempts', verbose_name='retry count')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum number of retry attempts', verbose_name='maximum retries')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who initiated this communication', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_email_communications', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(blank=True, help_text='User who received the email (if registered)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_emails', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(help_text='School that sent the email', on_delete=django.db.models.deletion.CASCADE, related_name='sent_emails', to='accounts.school')),
                ('teacher_invitation', models.ForeignKey(blank=True, help_text='Related teacher invitation (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_communications', to='accounts.teacherinvitation')),
                ('sequence', models.ForeignKey(blank=True, help_text='Email sequence this belongs to (if automated)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_emails', to='messaging.emailsequence')),
                ('sequence_step', models.ForeignKey(blank=True, help_text='Sequence step this email represents', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_emails', to='messaging.emailsequencestep')),
                ('template', models.ForeignKey(blank=True, help_text='Template used for this email', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_emails', to='messaging.schoolemailtemplate')),
            ],
            options={
                'verbose_name': 'Email Communication',
                'verbose_name_plural': 'Email Communications',
                'ordering': ['-queued_at'],
            },
        ),
        migrations.AddIndex(
            model_name='emailsequence',
            index=models.Index(fields=['school', 'trigger_event', 'is_active'], name='messaging_e_school__689758_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read'], name='messaging_n_user_id_bd7d88_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'created_at'], name='messaging_n_user_id_ccde73_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='messaging_n_notific_98cedd_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='messaging_n_created_a9b879_idx'),
        ),
        migrations.AddIndex(
            model_name='schoolemailtemplate',
            index=models.Index(fields=['school', 'template_type', 'is_active'], name='messaging_s_school__972290_idx'),
        ),
        migrations.AddIndex(
            model_name='schoolemailtemplate',
            index=models.Index(fields=['template_type', 'is_default'], name='messaging_s_templat_70f354_idx'),
        ),
        migrations.AddConstraint(
            model_name='schoolemailtemplate',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('school', 'template_type'), name='messaging_unique_default_template_per_school_type'),
        ),
        migrations.AddIndex(
            model_name='emailsequencestep',
            index=models.Index(fields=['sequence', 'step_number', 'is_active'], name='messaging_e_sequenc_05f657_idx'),
        ),
        migrations.AddConstraint(
            model_name='emailsequencestep',
            constraint=models.UniqueConstraint(fields=('sequence', 'step_number'), name='unique_step_number_per_sequence'),
        ),
        migrations.AddIndex(
            model_name='emailcommunication',
            index=models.Index(fields=['school', 'delivery_status', '-queued_at'], name='messaging_e_school__3ac19b_idx'),
        ),
        migrations.AddIndex(
            model_name='emailcommunication',
            index=models.Index(fields=['recipient_email', 'template_type', '-queued_at'], name='messaging_e_recipie_43c483_idx'),
        ),
        migrations.AddIndex(
            model_name='emailcommunication',
            index=models.Index(fields=['sequence', 'delivery_status', '-queued_at'], name='messaging_e_sequenc_f393cf_idx'),
        ),
        migrations.AddIndex(
            model_name='emailcommunication',
            index=models.Index(fields=['teacher_invitation', '-queued_at'], name='messaging_e_teacher_0c3bb8_idx'),
        ),
        migrations.AddIndex(
            model_name='emailcommunication',
            index=models.Index(fields=['delivery_status', 'retry_count', '-queued_at'], name='messaging_e_deliver_8cc75b_idx'),
        ),
    ]
