# Generated by Django 5.2.5 on 2025-09-14 08:00

from django.db import migrations
from django.utils.translation import gettext_lazy as _


def create_system_tasks_for_existing_users(apps, schema_editor):
    """
    Create system tasks for all existing users based on their boolean field values.

    This migration converts the existing boolean fields:
    - email_verified -> EMAIL_VERIFICATION task (completed if True)
    - phone_verified -> PHONE_VERIFICATION task (completed if True)
    - first_student_added -> FIRST_STUDENT_ADDED task (completed if True)
    """
    User = apps.get_model('accounts', 'CustomUser')
    Task = apps.get_model('tasks', 'Task')

    # System task definitions
    system_tasks_data = [
        {
            'system_code': 'EMAIL_VERIFICATION',
            'title': 'Verify your email address',
            'description': 'Click the verification link sent to your email',
            'priority': 'high',
            'boolean_field': 'email_verified',
        },
        {
            'system_code': 'PHONE_VERIFICATION',
            'title': 'Verify your phone number',
            'description': 'Enter the SMS code to verify your phone',
            'priority': 'high',
            'boolean_field': 'phone_verified',
        },
        {
            'system_code': 'FIRST_STUDENT_ADDED',
            'title': 'Add your first student',
            'description': 'Add a student to start using the platform',
            'priority': 'medium',
            'boolean_field': 'first_student_added',
        },
    ]

    users = User.objects.all()
    created_count = 0

    for user in users:
        for task_data in system_tasks_data:
            # Check if boolean field is True to determine if task should be completed
            is_completed = getattr(user, task_data['boolean_field'], False)

            task, created = Task.objects.get_or_create(
                user=user,
                system_code=task_data['system_code'],
                task_type='system',
                defaults={
                    'title': task_data['title'],
                    'description': task_data['description'],
                    'priority': task_data['priority'],
                    'is_system_generated': True,
                    'status': 'completed' if is_completed else 'pending'
                }
            )

            if created:
                created_count += 1

    print(f"Created {created_count} system tasks for {users.count()} users")


def reverse_system_tasks_to_boolean_fields(apps, schema_editor):
    """
    Reverse migration: Delete all system tasks and restore boolean field values.

    Note: This assumes the boolean fields still exist. If they've been removed,
    this reverse operation will fail.
    """
    User = apps.get_model('accounts', 'CustomUser')
    Task = apps.get_model('tasks', 'Task')

    # Get all system tasks before deletion to restore boolean values
    system_tasks = Task.objects.filter(task_type='system', is_system_generated=True)

    # Update boolean fields based on task completion status
    for task in system_tasks:
        user = task.user
        is_completed = task.status == 'completed'

        if task.system_code == 'EMAIL_VERIFICATION':
            user.email_verified = is_completed
        elif task.system_code == 'PHONE_VERIFICATION':
            user.phone_verified = is_completed
        elif task.system_code == 'FIRST_STUDENT_ADDED':
            user.first_student_added = is_completed

        user.save()

    # Delete all system tasks
    deleted_count = system_tasks.count()
    system_tasks.delete()

    print(f"Deleted {deleted_count} system tasks and restored boolean field values")


class Migration(migrations.Migration):

    dependencies = [
        ("tasks", "0002_task_system_code_task_tasks_task_user_id_848099_idx_and_more"),
        ("accounts", "0004_set_first_student_added_for_existing_users"),  # Latest accounts migration
    ]

    operations = [
        migrations.RunPython(
            create_system_tasks_for_existing_users,
            reverse_system_tasks_to_boolean_fields,
        ),
    ]
