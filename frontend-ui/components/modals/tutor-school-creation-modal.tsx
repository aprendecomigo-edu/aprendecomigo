import { zodResolver } from '@hookform/resolvers/zod';
import { AlertTriangle, GraduationCap, X } from 'lucide-react-native';
import React, { useState } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { z } from 'zod';

import { Box } from '@/components/ui/box';
import { Button, ButtonText, ButtonIcon } from '@/components/ui/button';
import {
  FormControl,
  FormControlError,
  FormControlErrorIcon,
  FormControlErrorText,
  FormControlLabel,
  FormControlLabelText,
  FormControlHelper,
  FormControlHelperText,
} from '@/components/ui/form-control';
import { Heading } from '@/components/ui/heading';
import { HStack } from '@/components/ui/hstack';
import { Icon } from '@/components/ui/icon';
import { Input, InputField } from '@/components/ui/input';
import {
  Modal,
  ModalBackdrop,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
} from '@/components/ui/modal';
import { Pressable } from '@/components/ui/pressable';
import { Spinner } from '@/components/ui/spinner';
import { Text } from '@/components/ui/text';
import { VStack } from '@/components/ui/vstack';

// Schema for the tutor school creation form
const tutorSchoolSchema = z.object({
  schoolName: z
    .string()
    .min(1, 'Practice name is required')
    .max(150, 'Practice name must be 150 characters or less')
    .refine(val => val.trim().length > 0, 'Practice name cannot be empty'),
  description: z.string().max(500, 'Description must be 500 characters or less').optional(),
  website: z
    .string()
    .url('Please enter a valid website URL')
    .max(200, 'Website URL must be 200 characters or less')
    .optional()
    .or(z.literal('')),
});

type TutorSchoolFormData = z.infer<typeof tutorSchoolSchema>;

interface TutorSchoolCreationModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: TutorSchoolFormData) => Promise<void>;
  userName?: string;
  isLoading?: boolean;
}

// Generate auto school name for tutors
const generateAutoSchoolName = (userName: string): string => {
  if (!userName?.trim()) return '';

  try {
    const cleanName = userName.trim();
    return `${cleanName}'s Tutoring Practice`;
  } catch (error) {
    console.warn('Error generating school name:', error);
    return 'My Tutoring Practice';
  }
};

export const TutorSchoolCreationModal: React.FC<TutorSchoolCreationModalProps> = ({
  isOpen,
  onClose,
  onSubmit,
  userName = '',
  isLoading = false,
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const autoGeneratedName = generateAutoSchoolName(userName);

  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
    watch,
  } = useForm<TutorSchoolFormData>({
    resolver: zodResolver(tutorSchoolSchema),
    defaultValues: {
      schoolName: autoGeneratedName,
      description: '',
      website: '',
    },
    mode: 'onChange',
  });

  const schoolName = watch('schoolName');

  // Reset form when modal opens/closes
  React.useEffect(() => {
    if (isOpen) {
      reset({
        schoolName: autoGeneratedName,
        description: '',
        website: '',
      });
    }
  }, [isOpen, autoGeneratedName, reset]);

  // Update school name when userName changes
  React.useEffect(() => {
    if (autoGeneratedName && (!schoolName || schoolName.includes("'s Tutoring Practice"))) {
      setValue('schoolName', autoGeneratedName);
    }
  }, [autoGeneratedName, schoolName, setValue]);

  const handleFormSubmit = async (data: TutorSchoolFormData) => {
    try {
      setIsSubmitting(true);

      // Clean the data
      const cleanData = {
        schoolName: data.schoolName.trim(),
        description: data.description?.trim() || undefined,
        website: data.website?.trim() || undefined,
      };

      // Validate the cleaned data
      if (!cleanData.schoolName) {
        throw new Error('Practice name is required');
      }

      await onSubmit(cleanData);
    } catch (error) {
      console.error('Error creating tutor school:', error);
      throw error; // Re-throw to let parent component handle
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    if (!isSubmitting && !isLoading) {
      reset();
      onClose();
    }
  };

  const isFormDisabled = isSubmitting || isLoading;

  return (
    <Modal isOpen={isOpen} onClose={handleClose} size="lg">
      <ModalBackdrop />
      <ModalContent className="max-w-2xl">
        <ModalHeader className="border-b border-gray-200">
          <HStack className="items-center justify-between w-full">
            <HStack space="md" className="items-center">
              <Box className="w-10 h-10 rounded-full bg-blue-100 items-center justify-center">
                <Icon as={GraduationCap} className="text-blue-600" size="lg" />
              </Box>
              <VStack>
                <Heading size="lg" className="text-gray-900">
                  Set Up Your Tutoring Practice
                </Heading>
                <Text className="text-gray-600 text-sm">
                  Create your professional tutoring business profile
                </Text>
              </VStack>
            </HStack>

            <ModalCloseButton onPress={handleClose} disabled={isFormDisabled}>
              <Icon as={X} className="text-gray-500" />
            </ModalCloseButton>
          </HStack>
        </ModalHeader>

        <ModalBody className="p-6">
          <VStack space="lg">
            {/* Information Banner */}
            <Box className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
              <VStack space="sm">
                <Text className="text-blue-900 font-medium">Quick Setup for Individual Tutors</Text>
                <Text className="text-blue-700 text-sm leading-relaxed">
                  We'll create a simple practice profile for you. You can always customize these
                  details later in your settings. This helps organize your tutoring business and
                  makes it easier for students to find you.
                </Text>
              </VStack>
            </Box>

            {/* Practice Name Field */}
            <FormControl isInvalid={!!errors.schoolName} isRequired>
              <FormControlLabel>
                <FormControlLabelText className="font-medium">Practice Name</FormControlLabelText>
              </FormControlLabel>
              <Controller
                name="schoolName"
                control={control}
                render={({ field: { onChange, onBlur, value } }) => (
                  <Input>
                    <InputField
                      placeholder="Your tutoring practice name"
                      value={value}
                      onChangeText={onChange}
                      onBlur={onBlur}
                      returnKeyType="next"
                      editable={!isFormDisabled}
                      className={isFormDisabled ? 'bg-gray-50 text-gray-500' : ''}
                    />
                  </Input>
                )}
              />
              <FormControlError>
                <FormControlErrorIcon as={AlertTriangle} />
                <FormControlErrorText>{errors.schoolName?.message}</FormControlErrorText>
              </FormControlError>
              <FormControlHelper>
                <FormControlHelperText>
                  This will be the public name of your tutoring practice
                </FormControlHelperText>
              </FormControlHelper>
            </FormControl>

            {/* Description Field (Optional) */}
            <FormControl isInvalid={!!errors.description}>
              <FormControlLabel>
                <FormControlLabelText className="font-medium">
                  Brief Description (Optional)
                </FormControlLabelText>
              </FormControlLabel>
              <Controller
                name="description"
                control={control}
                render={({ field: { onChange, onBlur, value } }) => (
                  <Input>
                    <InputField
                      placeholder="Brief description of your tutoring practice"
                      value={value}
                      onChangeText={onChange}
                      onBlur={onBlur}
                      returnKeyType="next"
                      multiline
                      numberOfLines={3}
                      editable={!isFormDisabled}
                      className={isFormDisabled ? 'bg-gray-50 text-gray-500' : ''}
                    />
                  </Input>
                )}
              />
              <FormControlError>
                <FormControlErrorIcon as={AlertTriangle} />
                <FormControlErrorText>{errors.description?.message}</FormControlErrorText>
              </FormControlError>
              <FormControlHelper>
                <FormControlHelperText>
                  A short description helps students understand your teaching approach
                </FormControlHelperText>
              </FormControlHelper>
            </FormControl>

            {/* Website Field (Optional) */}
            <FormControl isInvalid={!!errors.website}>
              <FormControlLabel>
                <FormControlLabelText className="font-medium">
                  Website (Optional)
                </FormControlLabelText>
              </FormControlLabel>
              <Controller
                name="website"
                control={control}
                render={({ field: { onChange, onBlur, value } }) => (
                  <Input>
                    <InputField
                      placeholder="https://yourwebsite.com"
                      value={value}
                      onChangeText={onChange}
                      onBlur={onBlur}
                      keyboardType="url"
                      returnKeyType="done"
                      autoCapitalize="none"
                      editable={!isFormDisabled}
                      className={isFormDisabled ? 'bg-gray-50 text-gray-500' : ''}
                    />
                  </Input>
                )}
              />
              <FormControlError>
                <FormControlErrorIcon as={AlertTriangle} />
                <FormControlErrorText>{errors.website?.message}</FormControlErrorText>
              </FormControlError>
              <FormControlHelper>
                <FormControlHelperText>
                  Link to your personal website or professional portfolio
                </FormControlHelperText>
              </FormControlHelper>
            </FormControl>
          </VStack>
        </ModalBody>

        <ModalFooter className="border-t border-gray-200 p-4">
          <HStack space="sm" className="w-full justify-end">
            <Button
              variant="outline"
              onPress={handleClose}
              disabled={isFormDisabled}
              className="px-6"
            >
              <ButtonText className="text-gray-700">Cancel</ButtonText>
            </Button>

            <Button
              onPress={handleSubmit(handleFormSubmit)}
              disabled={isFormDisabled}
              className="bg-blue-600 hover:bg-blue-700 px-6"
            >
              {isSubmitting || isLoading ? (
                <>
                  <Spinner size="small" className="text-white mr-2" />
                  <ButtonText className="text-white">Creating...</ButtonText>
                </>
              ) : (
                <ButtonText className="text-white">Create Practice</ButtonText>
              )}
            </Button>
          </HStack>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};
