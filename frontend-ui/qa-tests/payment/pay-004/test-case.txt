QA Test Case: Admin Authentication and Security

Test ID: PAY-004
Test Name: Admin Authentication and Security
Purpose: Verify admin-only access controls, two-factor authentication, and security measures for payment monitoring system per GitHub issue #59
Expected Result: Payment monitoring system properly enforces admin security with comprehensive access controls

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform - Payment Security
- Architecture: Django REST Framework backend + React Native Expo frontend
- Security: Admin-only permissions with 2FA for sensitive operations
- Database: PostgreSQL with user role and permission data

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/frontend-ui
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: make dev-open
4. Backend: http://localhost:8000
5. Frontend: http://localhost:8081

Test Data:
- Admin User: admin@test.com (superuser with payment monitoring access)
- Regular User: student@test.com (standard user without admin access)
- Teacher User: teacher@test.com (teacher role without payment admin access)
- School Owner: school@test.com (school owner without payment admin access)

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Admin Authentication Verification
1. Navigate to payment monitoring areas as admin:
   - /admin/payments/dashboard
   - /admin/payments/transactions
   - /admin/payments/refunds
2. Verify successful admin access
3. Check admin role enforcement
4. Verify payment admin permissions

Expected: Admin user accesses all payment monitoring areas successfully
Screenshot: 01-admin-authentication.png
PASS if: Admin can access all payment admin areas
FAIL if: Admin access denied or authentication issues

Step 2: Non-Admin Access Denial Testing
1. Logout admin user
2. Login as regular student user (student@test.com)
3. Attempt to access payment admin areas:
   - Navigate to /admin/payments/dashboard
   - Try direct URL access to /admin/payments/transactions
   - Attempt API calls to admin endpoints
4. Verify access is properly denied
5. Check error messages are appropriate

Expected: Non-admin users are properly denied access to payment admin areas
Screenshot: 02-non-admin-denial.png
PASS if: Access properly denied with clear error messages
FAIL if: Non-admin gains access or unclear error messages

Step 3: Teacher Role Access Testing
1. Login as teacher user (teacher@test.com)
2. Attempt to access payment admin areas
3. Verify teacher role permissions
4. Check that teachers cannot access payment administration
5. Test teacher access to student payment data (should be limited)

Expected: Teachers are denied access to payment administration
Screenshot: 03-teacher-role-testing.png
PASS if: Teachers properly restricted from payment admin areas
FAIL if: Teachers gain unauthorized access to payment administration

Step 4: School Owner Role Testing
1. Login as school owner (school@test.com)
2. Attempt to access payment admin areas
3. Verify school owner can see school-specific payment data
4. Check that school owners cannot access global payment administration
5. Test school-scoped payment permissions

Expected: School owners have limited, school-scoped payment access
Screenshot: 04-school-owner-testing.png
PASS if: School owners have appropriate limited access
FAIL if: School owners gain global admin access or insufficient access

Step 5: API Endpoint Security Testing
1. Test admin API endpoints without authentication:
   - GET /api/admin/payments/metrics/
   - GET /api/admin/payments/transactions/
   - POST /api/admin/payments/refunds/
2. Test with non-admin authentication
3. Verify proper HTTP status codes (401, 403)
4. Check that sensitive data is not exposed
5. Test API permission validation

Expected: API endpoints properly secured with appropriate responses
Screenshot: 05-api-security-testing.png
PASS if: APIs return proper security responses
FAIL if: APIs expose data to unauthorized users

Step 6: Two-Factor Authentication for Sensitive Operations
1. As admin, attempt high-value refund operation
2. Verify 2FA challenge is triggered
3. Test 2FA authentication flow:
   - Enter correct 2FA code
   - Test incorrect 2FA code
   - Test 2FA timeout
4. Verify operation completes only after successful 2FA
5. Test 2FA bypass attempts

Expected: 2FA properly secures sensitive payment operations
Screenshot: 06-two-factor-authentication.png
PASS if: 2FA required and functions correctly for sensitive operations
FAIL if: 2FA can be bypassed or doesn't function properly

Step 7: Session Management and Timeout
1. Login as admin and access payment dashboard
2. Let session sit idle for extended period
3. Attempt to perform payment operations after timeout
4. Verify session timeout redirects to login
5. Test session refresh mechanisms
6. Check secure session handling

Expected: Session management properly handles timeouts and security
Screenshot: 07-session-management.png
PASS if: Session timeout and refresh work securely
FAIL if: Session issues or security vulnerabilities

Step 8: PII and Financial Data Protection
1. Verify payment data masking in admin interface:
   - Credit card numbers properly masked
   - Bank account details protected
   - Student PII appropriately handled
2. Test data export security:
   - Check exported data contains only necessary information
   - Verify sensitive data redaction
3. Check payment method display security
4. Verify compliance with data protection requirements

Expected: Sensitive financial and personal data properly protected
Screenshot: 08-data-protection.png
PASS if: All sensitive data properly masked and protected
FAIL if: Sensitive data exposed or insufficient protection

Step 9: Audit Trail Security
1. Verify audit trail captures all admin actions:
   - Login/logout events
   - Payment operations
   - Data access attempts
2. Test audit trail access controls:
   - Only admins can view audit trails
   - Audit data cannot be modified
   - Historical audit data preserved
3. Check audit trail completeness and accuracy

Expected: Audit trail comprehensively and securely tracks admin activity
Screenshot: 09-audit-trail-security.png
PASS if: Audit trail secure and comprehensive
FAIL if: Audit trail incomplete, modifiable, or insecure

Step 10: Password and Account Security
1. Test admin password requirements:
   - Minimum length enforcement
   - Complexity requirements
   - Password history validation
2. Test account lockout policies:
   - Failed login attempt limits
   - Account lockout duration
   - Unlock procedures
3. Verify secure password reset procedures
4. Test password change security

Expected: Strong password and account security policies enforced
Screenshot: 10-password-security.png
PASS if: Password and account security robust
FAIL if: Weak password policies or account security issues

Step 11: HTTPS and Secure Communication
1. Verify all payment admin areas use HTTPS
2. Check secure cookie handling
3. Test CSP (Content Security Policy) implementation
4. Verify secure headers are present
5. Check for mixed content issues
6. Test secure WebSocket connections

Expected: All communication properly secured with HTTPS and security headers
Screenshot: 11-secure-communication.png
PASS if: All communication channels properly secured
FAIL if: Insecure communication or missing security headers

Step 12: Penetration Testing and Vulnerability Assessment
1. Test for common web vulnerabilities:
   - SQL injection attempts
   - XSS (Cross-Site Scripting) tests
   - CSRF (Cross-Site Request Forgery) protection
   - Directory traversal attempts
2. Test input validation and sanitization
3. Check for information disclosure vulnerabilities
4. Test for privilege escalation vulnerabilities

Expected: System resistant to common web security vulnerabilities
Screenshot: 12-vulnerability-testing.png
PASS if: System properly protected against common vulnerabilities
FAIL if: Security vulnerabilities found or insufficient protection

=== PASS/FAIL CRITERIA ===

PASS: Admin authentication works properly, non-admin access is denied, API security is enforced, 2FA functions correctly, data is protected, and system is secure against common vulnerabilities

FAIL: Any step fails, authentication bypassed, unauthorized access granted, API security issues, 2FA problems, data exposure, or security vulnerabilities found

Individual Step Criteria:
- Step 1: PASS if admin authentication and access works, FAIL if admin access issues
- Step 2: PASS if non-admin access properly denied, FAIL if unauthorized access
- Step 3: PASS if teacher access appropriately restricted, FAIL if teacher access issues
- Step 4: PASS if school owner access properly scoped, FAIL if access scope issues
- Step 5: PASS if API security proper, FAIL if API security vulnerabilities
- Step 6: PASS if 2FA functions correctly, FAIL if 2FA bypass or malfunction
- Step 7: PASS if session management secure, FAIL if session security issues
- Step 8: PASS if data protection comprehensive, FAIL if data exposure
- Step 9: PASS if audit trail secure and complete, FAIL if audit issues
- Step 10: PASS if password security robust, FAIL if password policy weaknesses
- Step 11: PASS if communication properly secured, FAIL if insecure communication
- Step 12: PASS if protected against vulnerabilities, FAIL if security vulnerabilities found

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails

=== GITHUB ISSUE #59 ACCEPTANCE CRITERIA MAPPING ===

This test verifies:
✓ Admin-only authentication and access controls
✓ Two-factor authentication for sensitive operations
✓ Secure handling of financial and personal data
✓ Comprehensive audit trail and activity logging
✓ Protection against common security vulnerabilities