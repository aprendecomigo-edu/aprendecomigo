QA Test Case: Student Account Dashboard Overview and Navigation

Test ID: DASHBOARD-001
Test Name: Main Dashboard Overview and Navigation
Purpose: Verify complete dashboard functionality including account overview, navigation flows, and core dashboard features
Expected Result: Student successfully accesses dashboard with all components loaded and navigation working correctly

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo Educational Platform
- Architecture: Django REST Framework backend + React Native Expo frontend
- Database: PostgreSQL with test student data

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/frontend-ui
2. Python Virtual Environment: .venv/ in project root
3. Start development servers: make dev-open
4. Backend: http://localhost:8000
5. Frontend: http://localhost:8081

Test Data:
- Test Student Email: student@test.com
- Student Role: student with active account
- Required Data: Active student account with purchase history and transactions
- School Association: Must be enrolled in at least one school
- Account Balance: Should have positive balance and transaction history
- Purchase History: At least 2-3 package purchases with different consumption levels

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo/frontend-ui
  source ../.venv/bin/activate
  make dev-open

Expected: Both Django and Expo servers start successfully, browser opens to localhost:8081
Screenshot: 01-servers-started.png
Debug: Use 'make logs' if servers fail to start

Step 2: Navigate to Application and Authentication
1. Verify application loads at http://localhost:8081
2. Navigate to login/authentication page
3. Enter test student email: student@test.com
4. Complete email verification process
5. Verify successful authentication

Expected: Login page loads, email verification works, user is authenticated
Screenshot: 02-login-success.png
PASS if: Authentication completes and user is redirected to dashboard
FAIL if: Login fails, verification code issues, or redirect doesn't work

Step 3: Dashboard Landing and Initial Load
1. Verify dashboard page loads automatically after login
2. Check page title shows "Student Dashboard" or similar
3. Verify loading states complete within 3 seconds
4. Check for any error messages or broken components

Expected: Dashboard loads completely without errors
Screenshot: 03-dashboard-landing.png
PASS if: Dashboard loads with all components visible, no error messages
FAIL if: Page doesn't load, shows errors, or takes longer than 5 seconds

Step 4: Account Overview Section Verification
1. Locate account overview/summary section
2. Verify account balance is displayed correctly
3. Check that balance shows proper currency formatting
4. Verify account status (active/inactive) is shown
5. Check expiration dates for active packages
6. Verify student name and profile information display

Expected: Account overview shows correct balance, status, and profile info
Screenshot: 04-account-overview.png
PASS if: All account information displays correctly with proper formatting
FAIL if: Balance incorrect, missing information, or display errors

Step 5: Navigation Menu Testing
1. Identify main navigation menu (sidebar, tabs, or header)
2. Verify all expected menu items are present:
   - Dashboard/Home
   - Transaction History
   - Purchase History
   - Account Settings
   - Profile/My Account
3. Test clicking each navigation item
4. Verify each navigation item loads the correct page
5. Test browser back/forward navigation

Expected: All navigation items work and load correct pages
Screenshot: 05-navigation-menu.png
PASS if: All menu items present and functional, navigation works smoothly
FAIL if: Missing menu items, broken links, or navigation errors

Step 6: Dashboard Widgets and Components
1. Identify all dashboard widgets/cards:
   - Account balance widget
   - Recent transactions summary
   - Active packages/subscriptions
   - Quick actions (if any)
   - Upcoming classes (if applicable)
2. Verify each widget displays appropriate data
3. Test any interactive elements within widgets
4. Verify widgets are properly sized and aligned

Expected: All widgets display correct data and are properly formatted
Screenshot: 06-dashboard-widgets.png
PASS if: All widgets show relevant data, good visual layout
FAIL if: Widgets missing data, broken layout, or display errors

Step 7: Quick Actions and Shortcuts
1. Identify any quick action buttons or shortcuts
2. Test common actions like:
   - View transaction history
   - Purchase new packages
   - Update profile settings
   - Contact support (if available)
3. Verify quick actions navigate to correct pages
4. Test any modal dialogs or inline actions

Expected: Quick actions work correctly and provide easy access to key features
Screenshot: 07-quick-actions.png
PASS if: All quick actions functional and navigate correctly
FAIL if: Actions don't work, wrong destinations, or broken functionality

Step 8: Data Refresh and Real-time Updates
1. Note current account balance and transaction count
2. Refresh the page (F5 or browser refresh)
3. Verify data loads correctly after refresh
4. Check if any auto-refresh mechanisms work
5. Verify loading states during data refresh

Expected: Data refreshes correctly and loading states work properly
Screenshot: 08-data-refresh.png
PASS if: Data refreshes correctly, no loading issues
FAIL if: Data doesn't refresh, loading states broken, or errors occur

Step 9: Responsive Design Testing
1. Test dashboard on different screen sizes:
   - Desktop (1920x1080)
   - Tablet (768x1024)
   - Mobile (375x667)
2. Verify layout adapts properly to each size
3. Check that all elements remain accessible
4. Test navigation menu on mobile (hamburger menu, etc.)
5. Verify text readability at all sizes

Expected: Dashboard is fully responsive and usable on all screen sizes
Screenshot: 09-responsive-design.png
PASS if: Layout works well on all tested screen sizes
FAIL if: Layout breaks, elements inaccessible, or poor mobile experience

Step 10: Error Handling and Edge Cases
1. Disconnect internet briefly and test dashboard behavior
2. Test with slow network conditions
3. Verify error messages are user-friendly
4. Test browser back button from different dashboard sections
5. Verify dashboard handles empty states (no transactions, etc.)

Expected: Dashboard handles errors gracefully with appropriate user feedback
Screenshot: 10-error-handling.png
PASS if: Error handling works well, good user feedback
FAIL if: Poor error messages, crashes, or confusing user experience

=== PASS/FAIL CRITERIA ===

PASS: Dashboard loads completely, all navigation works, account information displays correctly, responsive design functions properly, and error handling is appropriate

FAIL: Any step fails, dashboard doesn't load, navigation broken, missing data, layout issues, or poor error handling

Individual Step Criteria:
- Step 1: PASS if servers start successfully, FAIL if startup errors
- Step 2: PASS if authentication completes, FAIL if login issues
- Step 3: PASS if dashboard loads within 5 seconds, FAIL if errors or slow loading
- Step 4: PASS if account overview displays correctly, FAIL if missing/incorrect data
- Step 5: PASS if all navigation items work, FAIL if broken navigation
- Step 6: PASS if all widgets display properly, FAIL if missing or broken widgets
- Step 7: PASS if quick actions function correctly, FAIL if actions don't work
- Step 8: PASS if data refreshes properly, FAIL if refresh issues
- Step 9: PASS if responsive on all tested sizes, FAIL if layout breaks
- Step 10: PASS if error handling is appropriate, FAIL if poor error handling

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails