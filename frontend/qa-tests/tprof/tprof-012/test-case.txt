QA Test Case: Form Validation and Error Handling

Test ID: TPROF-012
Test Name: Form Validation and Error Handling
Purpose: Verify comprehensive form validation, error display, and recovery mechanisms across all wizard steps
Expected Result: All form validation works correctly with clear error messages and proper user guidance

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo - EdTech Platform
- Architecture: Django REST API backend + React Native Expo frontend
- Frontend Route: /accept-invitation/profile-wizard or /onboarding/teacher-profile
- Validation: Client-side validation with server-side backup

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/frontend-ui
2. Development servers: make dev
3. Browser developer console access for error monitoring

Test Data:
- Test Email: validation.test@aprendecomigo.com
- User Role: teacher/school_owner
- Invalid test data: Various edge cases and boundary values
- Valid test data: Known good values for recovery testing

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Environment Setup and Server Start
Commands:
  cd /Users/anapmc/Code/aprendecomigo/frontend-ui
  make dev

Wait for both servers to start completely.
Open browser developer console to monitor errors.

Expected: Servers start without errors, console is clean
Screenshot: 01_servers_started.png

Step 2: Step 1 Validation Testing (Basic Information)
1. Navigate to profile wizard Step 1
2. Test required field validation:
   - Leave introduction field empty
   - Try to proceed to next step
   - Verify error message appears: "Uma breve introdução é obrigatória"
3. Test minimum length validation:
   - Enter very short text: "Hi"
   - Verify appropriate validation message
4. Test maximum length validation:
   - Enter text exceeding character limit (if any)
   - Verify validation prevents submission
5. Test valid input recovery:
   - Enter valid introduction (50+ characters)
   - Verify error message disappears
   - Verify next button becomes enabled

Expected: All validation rules work with clear error messages
Screenshot: 02_step1_validation.png

Step 3: Step 2 Validation Testing (Teaching Subjects)
1. Navigate to Step 2 (Teaching Subjects)
2. Test required subject validation:
   - Try to proceed without selecting any subjects
   - Verify error: "Selecione pelo menos uma matéria de ensino"
3. Test custom subject validation:
   - Add custom subject with empty name
   - Verify validation prevents empty subjects
4. Test subject duplication:
   - Add same subject twice (if prevented)
   - Verify appropriate handling
5. Test valid subject selection:
   - Select "Matemática" and add custom "Advanced Calculus"
   - Verify validation passes and next step is accessible

Expected: Subject selection validation works with clear feedback
Screenshot: 03_step2_validation.png

Step 4: Step 3 Validation Testing (Grade Levels)
1. Navigate to Step 3 (Grade Level Preferences)
2. Test required grade level validation:
   - Try to proceed without selecting any grade levels
   - Verify appropriate error message
3. Test grade level selection:
   - Select multiple valid grade levels
   - Verify validation passes
4. Test edge cases:
   - Select all available grade levels
   - Verify no conflicts or issues

Expected: Grade level validation works correctly
Screenshot: 04_step3_validation.png

Step 5: Step 4 Validation Testing (Availability)
1. Navigate to Step 4 (Availability)
2. Test timezone validation:
   - Select invalid or empty timezone (if possible)
   - Verify validation prevents submission
3. Test schedule validation:
   - Add overlapping time slots for same day
   - Verify conflict detection and error message
4. Test time format validation:
   - Enter invalid time formats (if manual entry allowed)
   - Verify proper format enforcement
5. Test valid schedule:
   - Add non-overlapping time slots across multiple days
   - Verify validation passes

Expected: Schedule validation prevents conflicts and enforces valid times
Screenshot: 05_step4_validation.png

Step 6: Step 5 Validation Testing (Rates & Compensation)
1. Navigate to Step 5 (Rates & Compensation)
2. Test hourly rate validation:
   - Enter negative rate: -10
   - Verify error message prevents negative values
3. Test excessive rate validation:
   - Enter unrealistic rate: 9999
   - Verify appropriate warning or validation
4. Test rate format validation:
   - Enter non-numeric values: "twenty euros"
   - Verify numeric validation
5. Test decimal precision:
   - Enter rates with many decimal places: 25.123456
   - Verify proper rounding or precision handling
6. Test valid rates:
   - Enter reasonable rate: 25.50
   - Verify validation passes

Expected: Rate validation enforces reasonable numeric values
Screenshot: 06_step5_validation.png

Step 7: Step 6 Validation Testing (Credentials)
1. Navigate to Step 6 (Credentials)
2. Test education entry validation:
   - Add education with empty degree field
   - Verify required field validation
3. Test graduation year validation:
   - Enter future year: 2030
   - Verify validation prevents future years
4. Test unrealistic graduation year:
   - Enter very old year: 1950
   - Verify reasonable year range enforcement
5. Test experience validation:
   - Add experience with invalid date ranges
   - Verify start date before end date validation
6. Test file upload validation (if applicable):
   - Upload invalid file type
   - Upload file exceeding size limit
   - Verify appropriate error messages

Expected: Credential validation ensures data integrity and realistic values
Screenshot: 07_step6_validation.png

Step 8: Step 7 Validation Testing (Profile Marketing)
1. Navigate to Step 7 (Profile Marketing)
2. Test teaching philosophy validation:
   - Enter text exceeding maximum word count (if limited)
   - Verify character/word count enforcement
3. Test teaching approach validation:
   - Leave required fields empty (if any)
   - Verify appropriate validation
4. Test specializations validation:
   - Add duplicate specializations
   - Verify handling of duplicates
5. Test achievements validation:
   - Enter overly long achievement descriptions
   - Verify length limitations

Expected: Marketing section validation maintains quality and length limits
Screenshot: 08_step7_validation.png

Step 9: Cross-Step Validation Testing
1. Navigate back to previous steps with Next/Previous buttons
2. Verify validation errors persist when returning to problematic steps
3. Test step completion status:
   - Verify incomplete steps are marked correctly in step indicator
   - Verify completed steps maintain their status
4. Test final submission validation:
   - Reach Step 8 (Preview) with some invalid data in earlier steps
   - Verify comprehensive validation prevents submission
   - Verify clear indication of which steps need attention

Expected: Cross-step validation maintains integrity throughout wizard
Screenshot: 09_cross_step_validation.png

Step 10: Error Recovery Testing
1. Create validation errors in multiple steps
2. Fix errors one by one:
   - Fix Step 1 introduction
   - Fix Step 2 subject selection
   - Fix Step 5 rate values
3. Verify error messages disappear when issues are resolved
4. Verify step completion status updates correctly
5. Verify wizard allows progression after all errors are fixed

Expected: Error recovery works smoothly with real-time validation updates
Screenshot: 10_error_recovery.png

Step 11: Network Error Handling
1. Disconnect network or block API calls (using dev tools)
2. Try to submit profile data
3. Verify appropriate network error handling:
   - Clear error message to user
   - No data loss during network failure
   - Retry mechanism or manual retry option
4. Reconnect network and verify successful submission

Expected: Network errors are handled gracefully without data loss
Screenshot: 11_network_error_handling.png

Step 12: Server Validation Testing
1. With valid client-side data, test server-side validation:
   - Submit profile with data that might fail server validation
   - Test with potentially malicious input (script tags, etc.)
   - Verify server errors are properly displayed to user
2. Test validation error display:
   - Verify server errors are mapped to correct form fields
   - Verify error messages are user-friendly, not technical

Expected: Server-side validation provides additional security and clear feedback
Screenshot: 12_server_validation.png

Step 13: Accessibility Validation Testing
1. Test validation with screen reader simulation:
   - Verify error messages are announced properly
   - Verify error associations with form fields
2. Test keyboard navigation with validation:
   - Tab through form with errors
   - Verify error fields receive focus appropriately
3. Test validation color contrast:
   - Verify error text meets accessibility standards
   - Test with high contrast mode

Expected: Validation meets accessibility requirements
Screenshot: 13_accessibility_validation.png

=== PASS/FAIL CRITERIA ===

PASS: ALL of the following conditions must be met:
- All required fields properly validated with clear error messages
- Numeric validation prevents invalid values (negative, excessive, non-numeric)
- Date validation ensures realistic and logical date ranges
- Text validation enforces appropriate length limits
- Cross-step validation maintains integrity throughout wizard
- Error messages are clear, specific, and actionable
- Error recovery works smoothly with real-time updates
- Network errors are handled gracefully without data loss
- Server-side validation provides additional security layer
- Accessibility requirements are met for error handling
- No client-side crashes due to validation errors
- Performance remains good during validation operations

FAIL: ANY of the following conditions occur:
- Required fields accept empty values
- Invalid numeric values are accepted
- Unrealistic dates or ranges are allowed
- Error messages are unclear, generic, or missing
- Validation state becomes inconsistent across steps
- Error recovery doesn't work or causes data loss
- Network errors crash the application or lose data
- Server errors are not properly displayed to users
- Accessibility standards are not met
- Application crashes during validation
- Validation significantly impacts performance

Individual Validation Categories:
- Required Fields: PASS if all mandatory fields properly validated
- Data Types: PASS if numeric, date, and text validation works correctly
- Business Rules: PASS if domain-specific rules (rates, schedules) are enforced
- Error Display: PASS if all errors are clearly communicated to users
- Recovery: PASS if users can easily fix errors and continue

Overall Result: PASS only if comprehensive validation protects data integrity while maintaining excellent user experience
Performance Criteria: Validation checks should complete within 100ms for responsive user feedback