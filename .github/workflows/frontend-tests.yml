name: Frontend Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18]

    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run typecheck:ci || echo "TypeScript errors found but continuing..."
      continue-on-error: true

    - name: Run linting
      run: npm run lint || echo "Linting warnings found but continuing..."

    - name: Run tests
      run: npm run test:ci
      env:
        NODE_ENV: test

    - name: Upload coverage reports to Codecov
      if: success()
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage to artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: frontend/coverage/
        retention-days: 30

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const lcovPath = path.join('frontend', 'coverage', 'lcov.info');
            if (fs.existsSync(lcovPath)) {
              const lcov = fs.readFileSync(lcovPath, 'utf8');
              const lines = lcov.split('\n');
              const summary = {};
              
              let currentFile = '';
              for (const line of lines) {
                if (line.startsWith('SF:')) {
                  currentFile = line.substring(3);
                } else if (line.startsWith('LF:')) {
                  if (!summary.totalLines) summary.totalLines = 0;
                  summary.totalLines += parseInt(line.substring(3));
                } else if (line.startsWith('LH:')) {
                  if (!summary.coveredLines) summary.coveredLines = 0;
                  summary.coveredLines += parseInt(line.substring(3));
                } else if (line.startsWith('BRF:')) {
                  if (!summary.totalBranches) summary.totalBranches = 0;
                  summary.totalBranches += parseInt(line.substring(4));
                } else if (line.startsWith('BRH:')) {
                  if (!summary.coveredBranches) summary.coveredBranches = 0;
                  summary.coveredBranches += parseInt(line.substring(4));
                } else if (line.startsWith('FNF:')) {
                  if (!summary.totalFunctions) summary.totalFunctions = 0;
                  summary.totalFunctions += parseInt(line.substring(4));
                } else if (line.startsWith('FNH:')) {
                  if (!summary.coveredFunctions) summary.coveredFunctions = 0;
                  summary.coveredFunctions += parseInt(line.substring(4));
                }
              }
              
              const linePercent = summary.totalLines > 0 ? (summary.coveredLines / summary.totalLines * 100).toFixed(2) : 0;
              const branchPercent = summary.totalBranches > 0 ? (summary.coveredBranches / summary.totalBranches * 100).toFixed(2) : 0;
              const functionPercent = summary.totalFunctions > 0 ? (summary.coveredFunctions / summary.totalFunctions * 100).toFixed(2) : 0;
              
              const comment = '## ðŸ§ª Frontend Test Coverage Report\n\n' +
                '| Metric | Coverage | Target |\n' +
                '|--------|----------|--------|\n' +
                `| **Lines** | ${linePercent}% (${summary.coveredLines}/${summary.totalLines}) | 85% |\n` +
                `| **Branches** | ${branchPercent}% (${summary.coveredBranches}/${summary.totalBranches}) | 80% |\n` +
                `| **Functions** | ${functionPercent}% (${summary.coveredFunctions}/${summary.totalFunctions}) | 90% |\n\n` +
                'Coverage reports uploaded to [Codecov](https://codecov.io/gh/${{ github.repository }}) ðŸ“Š\n\n' +
                '---\n' +
                '*Generated by frontend-tests.yml workflow*';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not generate coverage comment:', error.message);
          }