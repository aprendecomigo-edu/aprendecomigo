# Generated by Django 5.2.5 on 2025-09-12 09:33

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('finances', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ShoppingList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title for this shopping list', max_length=200, verbose_name='title')),
                ('month_year', models.DateField(help_text='Month and year this shopping list is for', verbose_name='month and year')),
                ('estimated_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Estimated total cost for this shopping list', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='estimated total')),
                ('actual_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Actual total spent on this shopping list', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='actual total')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this shopping list', verbose_name='notes')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether this shopping list has been completed', verbose_name='is completed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('family_budget_control', models.ForeignKey(help_text='Budget control this shopping list belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='shopping_lists', to='finances.familybudgetcontrol', verbose_name='family budget control')),
            ],
            options={
                'verbose_name': 'Shopping List',
                'verbose_name_plural': 'Shopping Lists',
                'ordering': ['-month_year', '-created_at'],
                'unique_together': {('family_budget_control', 'month_year')},
            },
        ),
        migrations.CreateModel(
            name='ShoppingListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the shopping item', max_length=200, verbose_name='item name')),
                ('category', models.CharField(choices=[('fruits_vegetables', 'Frutas e Vegetais'), ('proteins', 'Proteínas'), ('dairy', 'Lacticínios'), ('grains_cereals', 'Cereais e Grãos'), ('healthy_snacks', 'Snacks Saudáveis'), ('beverages', 'Bebidas'), ('herbs_spices', 'Ervas e Especiarias'), ('pantry_staples', 'Despensa Básica')], default='fruits_vegetables', help_text='Category of this shopping item', max_length=20, verbose_name='category')),
                ('quantity', models.CharField(help_text="Quantity needed (e.g., '2 kg', '1 liter', '6 units')", max_length=50, verbose_name='quantity')),
                ('estimated_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Estimated price for this item', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='estimated price')),
                ('actual_price', models.DecimalField(blank=True, decimal_places=2, help_text='Actual price paid for this item', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='actual price')),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('purchased', 'Comprado'), ('skipped', 'Ignorado')], default='pending', help_text='Current status of this item', max_length=20, verbose_name='status')),
                ('health_benefits', models.TextField(blank=True, help_text='Health benefits of this item (optional educational content)', verbose_name='health benefits')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this item', verbose_name='notes')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of this item in the shopping list', verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('shopping_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='finances.shoppinglist', verbose_name='shopping list')),
            ],
            options={
                'verbose_name': 'Shopping List Item',
                'verbose_name_plural': 'Shopping List Items',
                'ordering': ['order', 'category', 'name'],
                'unique_together': {('shopping_list', 'name')},
            },
        ),
    ]
