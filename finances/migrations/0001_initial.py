# Generated by Django 5.2.5 on 2025-09-12 11:47

import datetime
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ClassSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="date")),
                ("start_time", models.TimeField(verbose_name="start time")),
                ("end_time", models.TimeField(verbose_name="end time")),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual Session"),
                            ("group", "Group Session"),
                        ],
                        max_length=20,
                        verbose_name="session type",
                    ),
                ),
                (
                    "grade_level",
                    models.CharField(
                        help_text="Grade level of the session (e.g., '7', '10', 'mixed')",
                        max_length=10,
                        verbose_name="grade level",
                    ),
                ),
                (
                    "student_count",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Number of students in this session",
                        verbose_name="student count",
                    ),
                ),
                (
                    "is_trial",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a trial session",
                        verbose_name="is trial",
                    ),
                ),
                (
                    "is_makeup",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a makeup session",
                        verbose_name="is makeup",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                        ],
                        default="scheduled",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "actual_duration_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual duration in hours when session was completed",
                        max_digits=4,
                        null=True,
                        verbose_name="actual duration hours",
                    ),
                ),
                (
                    "booking_confirmed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the session booking was confirmed",
                        null=True,
                        verbose_name="booking confirmed at",
                    ),
                ),
                (
                    "cancelled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the session was cancelled",
                        null=True,
                        verbose_name="cancelled at",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this session",
                        verbose_name="notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sessions",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Students who attended this session",
                        related_name="attended_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sessions",
                        to="accounts.teacherprofile",
                        verbose_name="teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Session",
                "verbose_name_plural": "Class Sessions",
                "ordering": ["-date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="PricingPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the pricing plan",
                        max_length=100,
                        verbose_name="plan name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of what the plan includes",
                        verbose_name="description",
                    ),
                ),
                (
                    "plan_type",
                    models.CharField(
                        choices=[
                            ("package", "Package"),
                            ("subscription", "Subscription"),
                        ],
                        help_text="Type of plan: package (expires) or subscription (recurring)",
                        max_length=20,
                        verbose_name="plan type",
                    ),
                ),
                (
                    "hours_included",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Number of tutoring hours included in this plan",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="hours included",
                    ),
                ),
                (
                    "price_eur",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price of the plan in euros",
                        max_digits=6,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="price (EUR)",
                    ),
                ),
                (
                    "validity_days",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of days the plan is valid (null for subscriptions)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="validity days",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Order in which plans should be displayed (lower numbers first)",
                        verbose_name="display order",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this plan should be highlighted as featured/recommended",
                        verbose_name="is featured",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this plan is currently available for purchase",
                        verbose_name="is active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Pricing Plan",
                "verbose_name_plural": "Pricing Plans",
                "ordering": ["display_order", "name"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "display_order"],
                        name="finances_pr_is_acti_d5e588_idx",
                    ),
                    models.Index(
                        fields=["plan_type", "is_active"],
                        name="finances_pr_plan_ty_be4255_idx",
                    ),
                    models.Index(
                        fields=["is_featured", "is_active"],
                        name="finances_pr_is_feat_dab09e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PurchaseApprovalRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of the purchase request",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="amount",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what the student wants to purchase",
                        verbose_name="description",
                    ),
                ),
                (
                    "request_type",
                    models.CharField(
                        choices=[
                            ("hours", "Hour Package"),
                            ("session", "Individual Session"),
                            ("subscription", "Subscription"),
                        ],
                        help_text="Type of purchase being requested",
                        max_length=20,
                        verbose_name="request type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                            ("expired", "Expired"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Current status of the approval request",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "request_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data about the purchase request",
                        verbose_name="request metadata",
                    ),
                ),
                (
                    "requested_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the request was made",
                        verbose_name="requested at",
                    ),
                ),
                (
                    "responded_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the guardian responded to the request",
                        null=True,
                        verbose_name="responded at",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When this request expires if not responded to",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "guardian_notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes from the guardian about their decision",
                        verbose_name="guardian notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "class_session",
                    models.ForeignKey(
                        blank=True,
                        help_text="Class session being requested (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approval_requests",
                        to="finances.classsession",
                        verbose_name="class session",
                    ),
                ),
                (
                    "guardian",
                    models.ForeignKey(
                        help_text="Guardian who needs to approve the purchase",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pending_approvals",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="guardian",
                    ),
                ),
                (
                    "guardian_student_relationship",
                    models.ForeignKey(
                        help_text="The guardian-student relationship this request is under",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchase_requests",
                        to="accounts.guardianstudentrelationship",
                        verbose_name="guardian-student relationship",
                    ),
                ),
                (
                    "pricing_plan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Pricing plan being requested (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approval_requests",
                        to="finances.pricingplan",
                        verbose_name="pricing plan",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student requesting the purchase",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchase_requests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Approval Request",
                "verbose_name_plural": "Purchase Approval Requests",
                "ordering": ["-requested_at"],
            },
        ),
        migrations.CreateModel(
            name="PurchaseTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("package", "Package"),
                            ("subscription", "Subscription"),
                        ],
                        help_text="Type of transaction (package or subscription)",
                        max_length=20,
                        verbose_name="transaction type",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Transaction amount in euros",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="amount",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        help_text="Current payment status",
                        max_length=20,
                        verbose_name="payment status",
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe PaymentIntent ID for this transaction",
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Stripe payment intent ID",
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Customer ID associated with this transaction",
                        max_length=255,
                        null=True,
                        verbose_name="Stripe customer ID",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Expiration date for packages (null for subscriptions)",
                        null=True,
                        verbose_name="expires at",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional transaction data in JSON format",
                        verbose_name="metadata",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "approval_request",
                    models.ForeignKey(
                        blank=True,
                        help_text="Approval request that authorized this transaction (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="purchase_transactions",
                        to="finances.purchaseapprovalrequest",
                        verbose_name="approval request",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student who made this purchase",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="purchase_transactions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Purchase Transaction",
                "verbose_name_plural": "Purchase Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentDispute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_dispute_id",
                    models.CharField(
                        help_text="Unique Stripe dispute identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe dispute ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount being disputed in euros",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="dispute amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="eur",
                        help_text="Currency of the disputed amount",
                        max_length=3,
                        verbose_name="currency",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("duplicate", "Duplicate"),
                            ("fraudulent", "Fraudulent"),
                            ("subscription_canceled", "Subscription Canceled"),
                            ("product_unacceptable", "Product Unacceptable"),
                            ("product_not_received", "Product Not Received"),
                            ("unrecognized", "Unrecognized"),
                            ("credit_not_processed", "Credit Not Processed"),
                            ("general", "General"),
                        ],
                        help_text="Reason for the dispute",
                        max_length=50,
                        verbose_name="dispute reason",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("warning_needs_response", "Warning - Needs Response"),
                            ("warning_under_review", "Warning - Under Review"),
                            ("warning_closed", "Warning - Closed"),
                            ("needs_response", "Needs Response"),
                            ("under_review", "Under Review"),
                            ("charge_refunded", "Charge Refunded"),
                            ("won", "Won"),
                            ("lost", "Lost"),
                        ],
                        help_text="Current status of the dispute",
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "evidence_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Evidence details and documentation",
                        verbose_name="evidence details",
                    ),
                ),
                (
                    "evidence_due_by",
                    models.DateTimeField(
                        blank=True,
                        help_text="Deadline for submitting evidence",
                        null=True,
                        verbose_name="evidence due by",
                    ),
                ),
                (
                    "is_responded",
                    models.BooleanField(
                        default=False,
                        help_text="Whether we have responded to this dispute",
                        verbose_name="is responded",
                    ),
                ),
                (
                    "response_submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When our response was submitted",
                        null=True,
                        verbose_name="response submitted at",
                    ),
                ),
                (
                    "internal_notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this dispute",
                        verbose_name="internal notes",
                    ),
                ),
                (
                    "stripe_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complete metadata from Stripe dispute object",
                        verbose_name="Stripe metadata",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "purchase_transaction",
                    models.ForeignKey(
                        help_text="The purchase transaction being disputed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disputes",
                        to="finances.purchasetransaction",
                        verbose_name="purchase transaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Dispute",
                "verbose_name_plural": "Payment Disputes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FraudAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_id",
                    models.CharField(
                        help_text="Unique identifier for this fraud alert",
                        max_length=50,
                        unique=True,
                        verbose_name="alert ID",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        help_text="Severity level of the fraud alert",
                        max_length=20,
                        verbose_name="severity",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                        ],
                        default="active",
                        help_text="Current status of the fraud alert",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        help_text="Type of fraud pattern detected",
                        max_length=100,
                        verbose_name="alert type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the suspicious activity",
                        verbose_name="description",
                    ),
                ),
                (
                    "detection_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Data used to detect this fraud pattern",
                        verbose_name="detection data",
                    ),
                ),
                (
                    "risk_score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Risk assessment score (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="risk score",
                    ),
                ),
                (
                    "investigated_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the alert was investigated",
                        null=True,
                        verbose_name="investigated at",
                    ),
                ),
                (
                    "resolution_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about how this alert was resolved",
                        verbose_name="resolution notes",
                    ),
                ),
                (
                    "actions_taken",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of actions taken in response to this alert",
                        verbose_name="actions taken",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Administrator assigned to investigate this alert",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_fraud_alerts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="assigned to",
                    ),
                ),
                (
                    "target_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User associated with this fraud alert",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fraud_alerts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="target user",
                    ),
                ),
                (
                    "related_transactions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Transactions that triggered this alert",
                        related_name="fraud_alerts",
                        to="finances.purchasetransaction",
                        verbose_name="related transactions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fraud Alert",
                "verbose_name_plural": "Fraud Alerts",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AdminAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("refund_created", "Refund Created"),
                            ("refund_failed", "Refund Failed"),
                            ("dispute_response", "Dispute Response"),
                            ("fraud_alert", "Fraud Alert"),
                            ("payment_retry", "Payment Retry"),
                            ("user_account_action", "User Account Action"),
                            ("system_override", "System Override"),
                        ],
                        help_text="Type of administrative action performed",
                        max_length=50,
                        verbose_name="action type",
                    ),
                ),
                (
                    "action_description",
                    models.TextField(
                        help_text="Detailed description of the action performed",
                        verbose_name="action description",
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        help_text="Whether the action was successful",
                        verbose_name="success",
                    ),
                ),
                (
                    "result_message",
                    models.TextField(
                        blank=True,
                        help_text="Result message or error details",
                        verbose_name="result message",
                    ),
                ),
                (
                    "amount_impacted",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Financial amount impacted by this action",
                        max_digits=10,
                        null=True,
                        verbose_name="amount impacted",
                    ),
                ),
                (
                    "action_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detailed data about the action performed",
                        verbose_name="action data",
                    ),
                ),
                (
                    "stripe_reference_id",
                    models.CharField(
                        blank=True,
                        help_text="Related Stripe object ID (if applicable)",
                        max_length=255,
                        verbose_name="Stripe reference ID",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address from which the action was performed",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent of the client that performed the action",
                        verbose_name="user agent",
                    ),
                ),
                (
                    "two_factor_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether two-factor authentication was verified",
                        verbose_name="two factor verified",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "admin_user",
                    models.ForeignKey(
                        help_text="Administrator who performed this action",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="admin_actions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="admin user",
                    ),
                ),
                (
                    "target_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User affected by this action (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_actions_targeting_me",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="target user",
                    ),
                ),
                (
                    "target_dispute",
                    models.ForeignKey(
                        blank=True,
                        help_text="Dispute affected by this action (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_actions",
                        to="finances.paymentdispute",
                        verbose_name="target dispute",
                    ),
                ),
                (
                    "target_transaction",
                    models.ForeignKey(
                        blank=True,
                        help_text="Transaction affected by this action (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_actions",
                        to="finances.purchasetransaction",
                        verbose_name="target transaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Admin Action",
                "verbose_name_plural": "Admin Actions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Receipt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "receipt_number",
                    models.CharField(
                        blank=True,
                        help_text="Unique receipt identifier",
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="receipt number",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Receipt amount in euros",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="amount",
                    ),
                ),
                (
                    "generated_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the receipt was generated",
                        verbose_name="generated at",
                    ),
                ),
                (
                    "pdf_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF receipt file",
                        null=True,
                        upload_to="receipts/%Y/%m/",
                        verbose_name="PDF file",
                    ),
                ),
                (
                    "is_valid",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this receipt is still valid",
                        verbose_name="is valid",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional receipt data in JSON format",
                        verbose_name="metadata",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student who received this receipt",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="student",
                    ),
                ),
                (
                    "transaction",
                    models.ForeignKey(
                        help_text="Purchase transaction this receipt is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="receipts",
                        to="finances.purchasetransaction",
                        verbose_name="transaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Receipt",
                "verbose_name_plural": "Receipts",
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="SchoolBillingSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "trial_cost_absorption",
                    models.CharField(
                        choices=[
                            ("school", "School Absorbs Cost"),
                            ("teacher", "Teacher Absorbs Cost"),
                            ("split", "Split Cost 50/50"),
                        ],
                        default="school",
                        help_text="Who absorbs the cost of trial classes",
                        max_length=20,
                        verbose_name="trial cost absorption",
                    ),
                ),
                (
                    "teacher_payment_frequency",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="monthly",
                        help_text="How frequently teachers are paid",
                        max_length=20,
                        verbose_name="teacher payment frequency",
                    ),
                ),
                (
                    "payment_day_of_month",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Day of the month when teachers are paid (1-28)",
                        verbose_name="payment day of month",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="billing_settings",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
            ],
            options={
                "verbose_name": "School Billing Settings",
                "verbose_name_plural": "School Billing Settings",
            },
        ),
        migrations.CreateModel(
            name="StoredPaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_payment_method_id",
                    models.CharField(
                        help_text="Stripe PaymentMethod ID for secure storage",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe payment method ID",
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Customer ID associated with this payment method",
                        max_length=255,
                        null=True,
                        verbose_name="Stripe customer ID",
                    ),
                ),
                (
                    "card_brand",
                    models.CharField(
                        blank=True,
                        help_text="Card brand (e.g., visa, mastercard)",
                        max_length=20,
                        verbose_name="card brand",
                    ),
                ),
                (
                    "card_last4",
                    models.CharField(
                        blank=True,
                        help_text="Last 4 digits of the card for display",
                        max_length=4,
                        verbose_name="card last 4 digits",
                    ),
                ),
                (
                    "card_exp_month",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Card expiration month (1-12)",
                        null=True,
                        verbose_name="card expiration month",
                    ),
                ),
                (
                    "card_exp_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Card expiration year",
                        null=True,
                        verbose_name="card expiration year",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the default payment method",
                        verbose_name="is default",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this payment method is active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student who owns this payment method",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stored_payment_methods",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stored Payment Method",
                "verbose_name_plural": "Stored Payment Methods",
                "ordering": ["-is_default", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StudentAccountBalance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hours_purchased",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total hours purchased by the student",
                        max_digits=5,
                        verbose_name="hours purchased",
                    ),
                ),
                (
                    "hours_consumed",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total hours consumed by the student",
                        max_digits=5,
                        verbose_name="hours consumed",
                    ),
                ),
                (
                    "balance_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Current account balance in euros",
                        max_digits=6,
                        verbose_name="balance amount",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "student",
                    models.OneToOneField(
                        help_text="Student who owns this account balance",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="account_balance",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Account Balance",
                "verbose_name_plural": "Student Account Balances",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="HourConsumption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hours_consumed",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Actual hours consumed during the session",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="hours consumed",
                    ),
                ),
                (
                    "hours_originally_reserved",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Hours originally reserved/scheduled for the session",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="hours originally reserved",
                    ),
                ),
                (
                    "consumed_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the consumption was recorded",
                        verbose_name="consumed at",
                    ),
                ),
                (
                    "is_refunded",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this consumption has been refunded",
                        verbose_name="is refunded",
                    ),
                ),
                (
                    "refund_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for the refund (if applicable)",
                        verbose_name="refund reason",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "class_session",
                    models.ForeignKey(
                        help_text="The class session for which hours were consumed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hour_consumptions",
                        to="finances.classsession",
                        verbose_name="class session",
                    ),
                ),
                (
                    "purchase_transaction",
                    models.ForeignKey(
                        help_text="Original purchase transaction from which hours were consumed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hour_consumptions",
                        to="finances.purchasetransaction",
                        verbose_name="purchase transaction",
                    ),
                ),
                (
                    "student_account",
                    models.ForeignKey(
                        help_text="Student account that this consumption is associated with",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hour_consumptions",
                        to="finances.studentaccountbalance",
                        verbose_name="student account",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hour Consumption",
                "verbose_name_plural": "Hour Consumptions",
                "ordering": ["-consumed_at"],
            },
        ),
        migrations.CreateModel(
            name="TeacherCompensationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("grade_specific", "Grade Specific Rate"),
                            ("group_class", "Group Class Rate"),
                            ("fixed_salary", "Fixed Monthly Salary"),
                            ("base_plus_bonus", "Base Salary Plus Bonus"),
                        ],
                        max_length=20,
                        verbose_name="rule type",
                    ),
                ),
                (
                    "grade_level",
                    models.CharField(
                        blank=True,
                        help_text="Grade level for grade-specific rules (e.g., '7', '10')",
                        max_length=10,
                        null=True,
                        verbose_name="grade level",
                    ),
                ),
                (
                    "rate_per_hour",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Hourly rate in euros",
                        max_digits=6,
                        null=True,
                        verbose_name="rate per hour",
                    ),
                ),
                (
                    "fixed_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Fixed monthly amount in euros",
                        max_digits=8,
                        null=True,
                        verbose_name="fixed amount",
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional conditions for this rule (JSON format)",
                        verbose_name="conditions",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "effective_from",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date from which this rule is effective",
                        verbose_name="effective from",
                    ),
                ),
                (
                    "effective_until",
                    models.DateField(
                        blank=True,
                        help_text="Date until which this rule is effective (optional)",
                        null=True,
                        verbose_name="effective until",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_compensation_rules",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compensation_rules",
                        to="accounts.teacherprofile",
                        verbose_name="teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Compensation Rule",
                "verbose_name_plural": "Teacher Compensation Rules",
            },
        ),
        migrations.CreateModel(
            name="TeacherPaymentEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "billing_period",
                    models.CharField(
                        help_text="Billing period in YYYY-MM format (e.g., '2024-01')",
                        max_length=7,
                        verbose_name="billing period",
                    ),
                ),
                (
                    "hours_taught",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Number of hours taught in this session",
                        max_digits=4,
                        verbose_name="hours taught",
                    ),
                ),
                (
                    "rate_applied",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Hourly rate applied for this session",
                        max_digits=6,
                        verbose_name="rate applied",
                    ),
                ),
                (
                    "amount_earned",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount earned for this session",
                        max_digits=8,
                        verbose_name="amount earned",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("calculated", "Calculated"),
                            ("paid", "Paid"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="payment status",
                    ),
                ),
                (
                    "calculation_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about how the payment was calculated",
                        verbose_name="calculation notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "compensation_rule",
                    models.ForeignKey(
                        blank=True,
                        help_text="The compensation rule used for this calculation",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="payment_entries",
                        to="finances.teachercompensationrule",
                        verbose_name="compensation rule",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_payment_entries",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_entry",
                        to="finances.classsession",
                        verbose_name="session",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_entries",
                        to="accounts.teacherprofile",
                        verbose_name="teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Payment Entry",
                "verbose_name_plural": "Teacher Payment Entries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WebhookEventLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "stripe_event_id",
                    models.CharField(
                        help_text="Unique Stripe event identifier",
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe event ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        help_text="Type of Stripe webhook event (e.g., payment_intent.succeeded)",
                        max_length=100,
                        verbose_name="event type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("received", "Received"),
                            ("processing", "Processing"),
                            ("processed", "Processed"),
                            ("failed", "Failed"),
                            ("retrying", "Retrying"),
                        ],
                        default="received",
                        help_text="Current processing status of the webhook event",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "payload",
                    models.JSONField(
                        help_text="Complete webhook event payload from Stripe",
                        verbose_name="payload",
                    ),
                ),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the event was successfully processed",
                        null=True,
                        verbose_name="processed at",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if processing failed",
                        verbose_name="error message",
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times processing has been retried",
                        verbose_name="retry count",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Webhook Event Log",
                "verbose_name_plural": "Webhook Event Logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["stripe_event_id"],
                        name="finances_we_stripe__eee95d_idx",
                    ),
                    models.Index(
                        fields=["event_type", "status"],
                        name="finances_we_event_t_6a4c2e_idx",
                    ),
                    models.Index(
                        fields=["status", "retry_count"],
                        name="finances_we_status_92d2ae_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="finances_we_created_f52b4d_idx"
                    ),
                    models.Index(
                        fields=["processed_at"], name="finances_we_process_3ad47e_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FamilyBudgetControl",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "monthly_budget_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum amount student can spend per month (null for no limit)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="monthly budget limit",
                    ),
                ),
                (
                    "weekly_budget_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum amount student can spend per week (null for no limit)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="weekly budget limit",
                    ),
                ),
                (
                    "auto_approval_threshold",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Maximum amount that can be automatically approved without guardian intervention",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="auto approval threshold",
                    ),
                ),
                (
                    "require_approval_for_sessions",
                    models.BooleanField(
                        default=True,
                        help_text="Whether guardian approval is required for booking individual sessions",
                        verbose_name="require approval for sessions",
                    ),
                ),
                (
                    "require_approval_for_packages",
                    models.BooleanField(
                        default=True,
                        help_text="Whether guardian approval is required for purchasing hour packages",
                        verbose_name="require approval for packages",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether budget controls are currently active",
                        verbose_name="is active",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "guardian_student_relationship",
                    models.OneToOneField(
                        help_text="The guardian-student relationship this budget control applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="budget_control",
                        to="accounts.guardianstudentrelationship",
                        verbose_name="guardian-student relationship",
                    ),
                ),
            ],
            options={
                "verbose_name": "Family Budget Control",
                "verbose_name_plural": "Family Budget Controls",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["guardian_student_relationship", "is_active"],
                        name="finances_fa_guardia_dad354_idx",
                    ),
                    models.Index(
                        fields=["auto_approval_threshold"],
                        name="finances_fa_auto_ap_4abf96_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="finances_fa_created_fc3e6b_idx"
                    ),
                    models.Index(
                        fields=["is_active", "-created_at"],
                        name="finances_fa_is_acti_8b7ad3_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="purchaseapprovalrequest",
            index=models.Index(
                fields=["student", "status", "-requested_at"],
                name="finances_pu_student_70e614_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseapprovalrequest",
            index=models.Index(
                fields=["guardian", "status", "-requested_at"],
                name="finances_pu_guardia_385cac_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseapprovalrequest",
            index=models.Index(
                fields=["guardian_student_relationship", "-requested_at"],
                name="finances_pu_guardia_d82767_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseapprovalrequest",
            index=models.Index(
                fields=["status", "expires_at"], name="finances_pu_status_42041c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchaseapprovalrequest",
            index=models.Index(
                fields=["request_type", "status"], name="finances_pu_request_9c1c86_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchasetransaction",
            index=models.Index(
                fields=["student", "payment_status"],
                name="finances_pu_student_7c93d8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchasetransaction",
            index=models.Index(
                fields=["payment_status"], name="finances_pu_payment_4c82c2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchasetransaction",
            index=models.Index(
                fields=["created_at"], name="finances_pu_created_2d08ff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="purchasetransaction",
            index=models.Index(
                fields=["stripe_payment_intent_id"],
                name="finances_pu_stripe__34a676_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="purchasetransaction",
            index=models.Index(
                fields=["expires_at"], name="finances_pu_expires_d94582_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentdispute",
            index=models.Index(
                fields=["stripe_dispute_id"], name="finances_pa_stripe__cd79b0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentdispute",
            index=models.Index(
                fields=["purchase_transaction"], name="finances_pa_purchas_b2b6a7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentdispute",
            index=models.Index(
                fields=["status", "evidence_due_by"],
                name="finances_pa_status_c70f58_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentdispute",
            index=models.Index(
                fields=["reason", "status"], name="finances_pa_reason_8cabec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentdispute",
            index=models.Index(
                fields=["is_responded", "evidence_due_by"],
                name="finances_pa_is_resp_d07fa0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="fraudalert",
            index=models.Index(
                fields=["alert_id"], name="finances_fr_alert_i_2d2bf0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fraudalert",
            index=models.Index(
                fields=["severity", "status", "-created_at"],
                name="finances_fr_severit_74a18d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="fraudalert",
            index=models.Index(
                fields=["target_user", "-created_at"],
                name="finances_fr_target__7bd6e2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="fraudalert",
            index=models.Index(
                fields=["assigned_to", "status"], name="finances_fr_assigne_da9e13_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fraudalert",
            index=models.Index(
                fields=["risk_score", "-created_at"],
                name="finances_fr_risk_sc_6bf5b5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="fraudalert",
            index=models.Index(
                fields=["alert_type", "status"], name="finances_fr_alert_t_c3d4a1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["admin_user", "-created_at"],
                name="finances_ad_admin_u_05cb16_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["action_type", "-created_at"],
                name="finances_ad_action__c2fba2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["target_user", "-created_at"],
                name="finances_ad_target__c9cfbb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["target_transaction"], name="finances_ad_target__7c9276_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["success", "-created_at"], name="finances_ad_success_a46359_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["stripe_reference_id"], name="finances_ad_stripe__de5a98_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="adminaction",
            index=models.Index(
                fields=["two_factor_verified", "-created_at"],
                name="finances_ad_two_fac_6d6680_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="receipt",
            index=models.Index(
                fields=["student", "generated_at"],
                name="finances_re_student_ad6876_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="receipt",
            index=models.Index(
                fields=["receipt_number"], name="finances_re_receipt_21cbaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="receipt",
            index=models.Index(
                fields=["transaction"], name="finances_re_transac_16f606_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="storedpaymentmethod",
            index=models.Index(
                fields=["student", "is_active"], name="finances_st_student_5a3cda_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="storedpaymentmethod",
            index=models.Index(
                fields=["stripe_payment_method_id"],
                name="finances_st_stripe__91a821_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="storedpaymentmethod",
            index=models.Index(
                fields=["stripe_customer_id"], name="finances_st_stripe__74170f_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="storedpaymentmethod",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("student",),
                name="unique_default_payment_method_per_student",
            ),
        ),
        migrations.AddIndex(
            model_name="hourconsumption",
            index=models.Index(
                fields=["student_account", "consumed_at"],
                name="finances_ho_student_a9dee8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="hourconsumption",
            index=models.Index(
                fields=["class_session"], name="finances_ho_class_s_5c7f2c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hourconsumption",
            index=models.Index(
                fields=["purchase_transaction"], name="finances_ho_purchas_1878ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="hourconsumption",
            index=models.Index(
                fields=["is_refunded"], name="finances_ho_is_refu_b228d2_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="hourconsumption",
            constraint=models.UniqueConstraint(
                fields=("student_account", "class_session"),
                name="unique_student_session_consumption",
            ),
        ),
        migrations.AddConstraint(
            model_name="teachercompensationrule",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("teacher", "school", "rule_type", "grade_level"),
                name="unique_active_teacher_rule",
            ),
        ),
    ]
