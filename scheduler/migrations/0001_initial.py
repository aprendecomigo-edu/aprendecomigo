# Generated by Django 5.2.5 on 2025-09-12 12:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RecurringClassSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "class_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual"),
                            ("group", "Group"),
                            ("trial", "Trial"),
                        ],
                        default="individual",
                        max_length=20,
                        verbose_name="class type",
                    ),
                ),
                (
                    "frequency_type",
                    models.CharField(
                        choices=[
                            ("WEEKLY", "Weekly"),
                            ("BIWEEKLY", "Biweekly"),
                            ("MONTHLY", "Monthly"),
                        ],
                        default="WEEKLY",
                        max_length=10,
                        verbose_name="frequency type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("PAUSED", "Paused"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="ACTIVE",
                        max_length=10,
                        verbose_name="status",
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of participants for group classes",
                        null=True,
                        verbose_name="maximum participants",
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("monday", "Monday"),
                            ("tuesday", "Tuesday"),
                            ("wednesday", "Wednesday"),
                            ("thursday", "Thursday"),
                            ("friday", "Friday"),
                            ("saturday", "Saturday"),
                            ("sunday", "Sunday"),
                        ],
                        max_length=10,
                        verbose_name="day of week",
                    ),
                ),
                ("start_time", models.TimeField(verbose_name="start time")),
                ("end_time", models.TimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(verbose_name="duration in minutes"),
                ),
                ("start_date", models.DateField(verbose_name="start date")),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="end date"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cancelled_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="cancelled at"
                    ),
                ),
                (
                    "paused_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="paused at"
                    ),
                ),
                (
                    "cancelled_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who cancelled this recurring series",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cancelled_recurring_schedules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_recurring_schedules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "paused_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who paused this recurring series",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="paused_recurring_schedules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recurring_schedules",
                        to="accounts.school",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        help_text="Students participating in this recurring class",
                        related_name="recurring_schedules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recurring_schedules",
                        to="accounts.teacherprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["day_of_week", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="ClassSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "class_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual"),
                            ("group", "Group"),
                            ("trial", "Trial"),
                        ],
                        default="individual",
                        max_length=20,
                        verbose_name="class type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("confirmed", "Confirmed"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                            ("rejected", "Rejected"),
                        ],
                        default="scheduled",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                ("scheduled_date", models.DateField(verbose_name="scheduled date")),
                ("start_time", models.TimeField(verbose_name="start time")),
                ("end_time", models.TimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(verbose_name="duration in minutes"),
                ),
                (
                    "booked_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="booked at"),
                ),
                (
                    "cancelled_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="cancelled at"
                    ),
                ),
                (
                    "cancellation_reason",
                    models.TextField(blank=True, verbose_name="cancellation reason"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="completed at"
                    ),
                ),
                (
                    "actual_duration_minutes",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="actual duration in minutes"
                    ),
                ),
                (
                    "completion_notes",
                    models.TextField(blank=True, verbose_name="completion notes"),
                ),
                (
                    "no_show_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="marked no-show at"
                    ),
                ),
                (
                    "no_show_reason",
                    models.TextField(blank=True, verbose_name="no-show reason"),
                ),
                (
                    "confirmed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="confirmed at"
                    ),
                ),
                (
                    "rejected_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="rejected at"
                    ),
                ),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of participants allowed for group classes",
                        null=True,
                        verbose_name="maximum participants",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional structured metadata for the class",
                        verbose_name="metadata",
                    ),
                ),
                (
                    "teacher_notes",
                    models.TextField(blank=True, verbose_name="teacher notes"),
                ),
                (
                    "student_notes",
                    models.TextField(blank=True, verbose_name="student notes"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "additional_students",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Additional students for group classes",
                        related_name="group_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "booked_by",
                    models.ForeignKey(
                        help_text="User who booked this class",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="booked_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cancelled_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who cancelled this class",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cancelled_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who marked this class as completed",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="completed_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "confirmed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who confirmed this class",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="confirmed_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "no_show_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who marked this class as no-show",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="no_show_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rejected_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who rejected this class",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rejected_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_schedules",
                        to="accounts.school",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student participating in this class",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scheduled_classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scheduled_classes",
                        to="accounts.teacherprofile",
                    ),
                ),
                (
                    "recurring_schedule",
                    models.ForeignKey(
                        blank=True,
                        help_text="Recurring schedule that generated this instance",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_instances",
                        to="scheduler.recurringclassschedule",
                    ),
                ),
            ],
            options={
                "ordering": ["scheduled_date", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="ReminderPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reminder_timing_hours",
                    models.JSONField(
                        default=list,
                        help_text="List of hours before class to send reminders (e.g., [24, 2, 0.5])",
                        verbose_name="reminder timing hours",
                    ),
                ),
                (
                    "communication_channels",
                    models.JSONField(
                        default=list,
                        help_text="List of preferred communication channels",
                        verbose_name="communication channels",
                    ),
                ),
                (
                    "timezone_preference",
                    models.CharField(
                        blank=True,
                        help_text="User's preferred timezone (e.g., 'America/New_York')",
                        max_length=50,
                        null=True,
                        verbose_name="timezone preference",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether reminders are enabled for this user",
                        verbose_name="is active",
                    ),
                ),
                (
                    "is_school_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the default preference template for the school",
                        verbose_name="is school default",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        help_text="School-specific preferences (null for global preferences)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reminder_preferences",
                        to="accounts.school",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reminder_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["user", "school"],
            },
        ),
        migrations.CreateModel(
            name="TeacherAvailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day_of_week",
                    models.CharField(
                        choices=[
                            ("monday", "Monday"),
                            ("tuesday", "Tuesday"),
                            ("wednesday", "Wednesday"),
                            ("thursday", "Thursday"),
                            ("friday", "Friday"),
                            ("saturday", "Saturday"),
                            ("sunday", "Sunday"),
                        ],
                        max_length=10,
                        verbose_name="day of week",
                    ),
                ),
                ("start_time", models.TimeField(verbose_name="start time")),
                ("end_time", models.TimeField(verbose_name="end time")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        help_text="School context for this availability",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_availabilities",
                        to="accounts.school",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="availabilities",
                        to="accounts.teacherprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["day_of_week", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="TeacherUnavailability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="date")),
                (
                    "start_time",
                    models.TimeField(blank=True, null=True, verbose_name="start time"),
                ),
                (
                    "end_time",
                    models.TimeField(blank=True, null=True, verbose_name="end time"),
                ),
                (
                    "reason",
                    models.CharField(blank=True, max_length=255, verbose_name="reason"),
                ),
                (
                    "is_all_day",
                    models.BooleanField(default=False, verbose_name="all day"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "school",
                    models.ForeignKey(
                        help_text="School context for this unavailability",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_unavailabilities",
                        to="accounts.school",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unavailabilities",
                        to="accounts.teacherprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["date", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="ClassReminder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reminder_type",
                    models.CharField(
                        choices=[
                            ("confirmation", "Confirmation"),
                            ("reminder_24h", "24 Hours Before"),
                            ("reminder_1h", "1 Hour Before"),
                            ("reminder_15min", "15 Minutes Before"),
                            ("cancellation", "Cancellation"),
                            ("change", "Schedule Change"),
                            ("custom", "Custom"),
                        ],
                        max_length=20,
                        verbose_name="reminder type",
                    ),
                ),
                (
                    "recipient_type",
                    models.CharField(
                        choices=[
                            ("teacher", "Teacher"),
                            ("student", "Student"),
                            ("parent", "Parent"),
                            ("admin", "Admin"),
                        ],
                        help_text="Role of the recipient in the class context",
                        max_length=20,
                        verbose_name="recipient type",
                    ),
                ),
                (
                    "communication_channel",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("push", "Push Notification"),
                            ("in_app", "In-App Notification"),
                        ],
                        help_text="Channel used to send this reminder",
                        max_length=20,
                        verbose_name="communication channel",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "scheduled_for",
                    models.DateTimeField(
                        help_text="When this reminder should be sent (UTC)",
                        verbose_name="scheduled for",
                    ),
                ),
                (
                    "sent_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this reminder was actually sent",
                        null=True,
                        verbose_name="sent at",
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True,
                        help_text="Email subject or notification title",
                        max_length=255,
                        verbose_name="subject",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        blank=True,
                        help_text="Reminder message content",
                        verbose_name="message",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if sending failed",
                        verbose_name="error message",
                    ),
                ),
                (
                    "retry_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times sending was retried",
                        verbose_name="retry count",
                    ),
                ),
                (
                    "max_retries",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum number of retry attempts",
                        verbose_name="max retries",
                    ),
                ),
                (
                    "external_message_id",
                    models.CharField(
                        blank=True,
                        help_text="ID from external communication service",
                        max_length=255,
                        verbose_name="external message ID",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data for the reminder",
                        verbose_name="metadata",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipient",
                    models.ForeignKey(
                        help_text="User who will receive this reminder",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_reminders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "class_schedule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reminders",
                        to="scheduler.classschedule",
                    ),
                ),
            ],
            options={
                "ordering": ["scheduled_for", "created_at"],
                "indexes": [
                    models.Index(
                        fields=["class_schedule", "reminder_type"],
                        name="scheduler_c_class_s_8ccb07_idx",
                    ),
                    models.Index(
                        fields=["recipient", "status"],
                        name="scheduler_c_recipie_51a6e1_idx",
                    ),
                    models.Index(
                        fields=["status", "scheduled_for"],
                        name="scheduler_c_status_84b883_idx",
                    ),
                    models.Index(
                        fields=["communication_channel", "status"],
                        name="scheduler_c_communi_a5eb99_idx",
                    ),
                    models.Index(
                        fields=["scheduled_for", "status"],
                        name="scheduler_c_schedul_67d562_idx",
                    ),
                ],
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("status__in", ["pending", "sent"])),
                        fields=(
                            "class_schedule",
                            "reminder_type",
                            "recipient",
                            "communication_channel",
                        ),
                        name="unique_reminder_per_recipient_channel",
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="recurringclassschedule",
            index=models.Index(
                fields=["teacher", "status", "start_date"],
                name="scheduler_r_teacher_6a63f5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="recurringclassschedule",
            index=models.Index(
                fields=["school", "status"], name="scheduler_r_school__51bfa4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recurringclassschedule",
            index=models.Index(
                fields=["frequency_type", "status"],
                name="scheduler_r_frequen_c570eb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classschedule",
            index=models.Index(
                fields=["teacher", "scheduled_date"],
                name="scheduler_c_teacher_cee4ca_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classschedule",
            index=models.Index(
                fields=["student", "scheduled_date"],
                name="scheduler_c_student_9557cb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classschedule",
            index=models.Index(
                fields=["school", "scheduled_date"],
                name="scheduler_c_school__7bc89b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classschedule",
            index=models.Index(
                fields=["status", "scheduled_date"],
                name="scheduler_c_status_9613a0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="reminderpreference",
            index=models.Index(
                fields=["user", "is_active"], name="scheduler_r_user_id_db210f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="reminderpreference",
            index=models.Index(
                fields=["school", "is_school_default"],
                name="scheduler_r_school__8d8371_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="reminderpreference",
            unique_together={("user", "school")},
        ),
        migrations.AlterUniqueTogether(
            name="teacheravailability",
            unique_together={("teacher", "school", "day_of_week", "start_time")},
        ),
        migrations.AlterUniqueTogether(
            name="teacherunavailability",
            unique_together={("teacher", "school", "date", "start_time")},
        ),
    ]
