QA Test Case: Performance Test

Test ID: DASH-010
Test Name: Dashboard Performance and Load Time Test
Purpose: Verify dashboard meets the <2 second load time requirement and performs well under normal conditions
Expected Result: Dashboard loads within 2 seconds with all components and API calls completing efficiently

=== CONTEXT (Pre-test Requirements) ===

System Information:
- Project: Aprende Comigo EdTech Platform
- Performance Requirement: Page load < 2 seconds
- API Response Requirement: < 500ms per API call

Required Environment Setup:
1. Project Location: /Users/anapmc/Code/aprendecomigo/backend
2. Development servers running: `make dev`
3. Authenticated user session
4. Clean browser cache for accurate timing

Test Data:
- Test Email: test.manager@example.com (authenticated)
- Target URL: http://localhost:8081/dashboard
- Performance Tools: Browser Developer Tools Performance tab

=== DETAILED STEP-BY-STEP INSTRUCTIONS ===

Step 1: Prepare Performance Testing
1. Open browser developer tools (F12)
2. Go to Performance tab
3. Clear browser cache (Hard refresh or clear storage)
4. Ensure authenticated session exists

Expected: Performance tools ready and clean environment
Screenshot: 01_performance_tools.png

Step 2: Measure Initial Dashboard Load
1. Start performance recording
2. Navigate to http://localhost:8081/dashboard
3. Wait for complete page load (all content visible)
4. Stop performance recording
5. Analyze timing results

Expected: Complete dashboard load within 2 seconds
Screenshot: 02_initial_load_timing.png

Step 3: Analyze API Response Times
1. Go to Network tab
2. Refresh dashboard page
3. Monitor all API calls:
   - /api/v1/schools/dashboard/metrics/
   - /api/v1/schools/dashboard/activities/
   - Any other dashboard APIs
4. Record response times for each

Expected: All API calls complete within 500ms each
Screenshot: 03_api_response_times.png

Step 4: Test Subsequent Loads
1. Navigate away from dashboard
2. Return to dashboard
3. Measure load time with cached resources
4. Compare with initial load time

Expected: Subsequent loads even faster due to caching
Screenshot: 04_cached_load_timing.png

Step 5: Test Component Rendering Performance
1. Monitor time to first contentful paint
2. Check time to interactive
3. Verify largest contentful paint timing
4. Ensure no layout shifts during load

Expected: Good Core Web Vitals scores, stable layout
Screenshot: 05_rendering_metrics.png

Step 6: Test Memory Usage
1. Monitor memory usage during dashboard operation
2. Check for memory leaks during navigation
3. Verify reasonable memory consumption
4. Test performance during typical usage patterns

Expected: Stable memory usage, no significant leaks
Screenshot: 06_memory_usage.png

Step 7: Test Under Load Conditions
1. Open multiple dashboard tabs
2. Refresh multiple times rapidly
3. Navigate between different sections quickly
4. Monitor performance degradation

Expected: Performance remains acceptable under normal load
Screenshot: 07_load_testing.png

=== PASS/FAIL CRITERIA ===

PASS: Dashboard loads < 2 seconds AND API calls < 500ms AND good rendering performance AND stable memory
FAIL: Load time > 2 seconds OR slow API calls OR poor rendering OR memory issues

Individual Step Criteria:
- Step 1: PASS if tools ready and environment clean, FAIL if setup issues
- Step 2: PASS if dashboard loads within 2 seconds, FAIL if exceeds time limit
- Step 3: PASS if all API calls under 500ms, FAIL if any API slow or fails
- Step 4: PASS if cached loads are faster, FAIL if caching not working
- Step 5: PASS if good rendering metrics, FAIL if poor Core Web Vitals
- Step 6: PASS if stable memory usage, FAIL if leaks or excessive consumption
- Step 7: PASS if performance stable under load, FAIL if significant degradation

Overall Result: PASS only if ALL steps pass, FAIL if ANY step fails