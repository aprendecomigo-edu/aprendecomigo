# Generated by Django 5.1.11 on 2025-08-01 23:20

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('finances', '0013_webhookeventlog'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentDispute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_dispute_id', models.CharField(help_text='Unique Stripe dispute identifier', max_length=255, unique=True, verbose_name='Stripe dispute ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount being disputed in euros', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='dispute amount')),
                ('currency', models.CharField(default='eur', help_text='Currency of the disputed amount', max_length=3, verbose_name='currency')),
                ('reason', models.CharField(choices=[('duplicate', 'Duplicate'), ('fraudulent', 'Fraudulent'), ('subscription_canceled', 'Subscription Canceled'), ('product_unacceptable', 'Product Unacceptable'), ('product_not_received', 'Product Not Received'), ('unrecognized', 'Unrecognized'), ('credit_not_processed', 'Credit Not Processed'), ('general', 'General')], help_text='Reason for the dispute', max_length=50, verbose_name='dispute reason')),
                ('status', models.CharField(choices=[('warning_needs_response', 'Warning - Needs Response'), ('warning_under_review', 'Warning - Under Review'), ('warning_closed', 'Warning - Closed'), ('needs_response', 'Needs Response'), ('under_review', 'Under Review'), ('charge_refunded', 'Charge Refunded'), ('won', 'Won'), ('lost', 'Lost')], help_text='Current status of the dispute', max_length=50, verbose_name='status')),
                ('evidence_details', models.JSONField(blank=True, default=dict, help_text='Evidence details and documentation', verbose_name='evidence details')),
                ('evidence_due_by', models.DateTimeField(blank=True, help_text='Deadline for submitting evidence', null=True, verbose_name='evidence due by')),
                ('is_responded', models.BooleanField(default=False, help_text='Whether we have responded to this dispute', verbose_name='is responded')),
                ('response_submitted_at', models.DateTimeField(blank=True, help_text='When our response was submitted', null=True, verbose_name='response submitted at')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes about this dispute', verbose_name='internal notes')),
                ('stripe_metadata', models.JSONField(blank=True, default=dict, help_text='Complete metadata from Stripe dispute object', verbose_name='Stripe metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('purchase_transaction', models.ForeignKey(help_text='The purchase transaction being disputed', on_delete=django.db.models.deletion.CASCADE, related_name='disputes', to='finances.purchasetransaction', verbose_name='purchase transaction')),
            ],
            options={
                'verbose_name': 'Payment Dispute',
                'verbose_name_plural': 'Payment Disputes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdminAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('refund_created', 'Refund Created'), ('refund_failed', 'Refund Failed'), ('dispute_response', 'Dispute Response'), ('fraud_alert', 'Fraud Alert'), ('payment_retry', 'Payment Retry'), ('user_account_action', 'User Account Action'), ('system_override', 'System Override')], help_text='Type of administrative action performed', max_length=50, verbose_name='action type')),
                ('action_description', models.TextField(help_text='Detailed description of the action performed', verbose_name='action description')),
                ('success', models.BooleanField(help_text='Whether the action was successful', verbose_name='success')),
                ('result_message', models.TextField(blank=True, help_text='Result message or error details', verbose_name='result message')),
                ('amount_impacted', models.DecimalField(blank=True, decimal_places=2, help_text='Financial amount impacted by this action', max_digits=10, null=True, verbose_name='amount impacted')),
                ('action_data', models.JSONField(blank=True, default=dict, help_text='Detailed data about the action performed', verbose_name='action data')),
                ('stripe_reference_id', models.CharField(blank=True, help_text='Related Stripe object ID (if applicable)', max_length=255, verbose_name='Stripe reference ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which the action was performed', null=True, verbose_name='IP address')),
                ('user_agent', models.TextField(blank=True, help_text='User agent of the client that performed the action', verbose_name='user agent')),
                ('two_factor_verified', models.BooleanField(default=False, help_text='Whether two-factor authentication was verified', verbose_name='two factor verified')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin_user', models.ForeignKey(help_text='Administrator who performed this action', on_delete=django.db.models.deletion.PROTECT, related_name='admin_actions', to=settings.AUTH_USER_MODEL, verbose_name='admin user')),
                ('target_transaction', models.ForeignKey(blank=True, help_text='Transaction affected by this action (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions', to='finances.purchasetransaction', verbose_name='target transaction')),
                ('target_user', models.ForeignKey(blank=True, help_text='User affected by this action (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions_targeting_me', to=settings.AUTH_USER_MODEL, verbose_name='target user')),
                ('target_dispute', models.ForeignKey(blank=True, help_text='Dispute affected by this action (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions', to='finances.paymentdispute', verbose_name='target dispute')),
            ],
            options={
                'verbose_name': 'Admin Action',
                'verbose_name_plural': 'Admin Actions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FraudAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.CharField(help_text='Unique identifier for this fraud alert', max_length=50, unique=True, verbose_name='alert ID')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], help_text='Severity level of the fraud alert', max_length=20, verbose_name='severity')),
                ('status', models.CharField(choices=[('active', 'Active'), ('investigating', 'Investigating'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='active', help_text='Current status of the fraud alert', max_length=20, verbose_name='status')),
                ('alert_type', models.CharField(help_text='Type of fraud pattern detected', max_length=100, verbose_name='alert type')),
                ('description', models.TextField(help_text='Detailed description of the suspicious activity', verbose_name='description')),
                ('detection_data', models.JSONField(blank=True, default=dict, help_text='Data used to detect this fraud pattern', verbose_name='detection data')),
                ('risk_score', models.DecimalField(decimal_places=2, help_text='Risk assessment score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='risk score')),
                ('investigated_at', models.DateTimeField(blank=True, help_text='When the alert was investigated', null=True, verbose_name='investigated at')),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how this alert was resolved', verbose_name='resolution notes')),
                ('actions_taken', models.JSONField(blank=True, default=list, help_text='List of actions taken in response to this alert', verbose_name='actions taken')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(blank=True, help_text='Administrator assigned to investigate this alert', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_fraud_alerts', to=settings.AUTH_USER_MODEL, verbose_name='assigned to')),
                ('related_transactions', models.ManyToManyField(blank=True, help_text='Transactions that triggered this alert', related_name='fraud_alerts', to='finances.purchasetransaction', verbose_name='related transactions')),
                ('target_user', models.ForeignKey(blank=True, help_text='User associated with this fraud alert', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fraud_alerts', to=settings.AUTH_USER_MODEL, verbose_name='target user')),
            ],
            options={
                'verbose_name': 'Fraud Alert',
                'verbose_name_plural': 'Fraud Alerts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['alert_id'], name='finances_fr_alert_i_2d2bf0_idx'), models.Index(fields=['severity', 'status', '-created_at'], name='finances_fr_severit_74a18d_idx'), models.Index(fields=['target_user', '-created_at'], name='finances_fr_target__7bd6e2_idx'), models.Index(fields=['assigned_to', 'status'], name='finances_fr_assigne_da9e13_idx'), models.Index(fields=['risk_score', '-created_at'], name='finances_fr_risk_sc_6bf5b5_idx'), models.Index(fields=['alert_type', 'status'], name='finances_fr_alert_t_c3d4a1_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['stripe_dispute_id'], name='finances_pa_stripe__cd79b0_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['purchase_transaction'], name='finances_pa_purchas_b2b6a7_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['status', 'evidence_due_by'], name='finances_pa_status_c70f58_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['reason', 'status'], name='finances_pa_reason_8cabec_idx'),
        ),
        migrations.AddIndex(
            model_name='paymentdispute',
            index=models.Index(fields=['is_responded', 'evidence_due_by'], name='finances_pa_is_resp_d07fa0_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['admin_user', '-created_at'], name='finances_ad_admin_u_05cb16_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['action_type', '-created_at'], name='finances_ad_action__c2fba2_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['target_user', '-created_at'], name='finances_ad_target__c9cfbb_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['target_transaction'], name='finances_ad_target__7c9276_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['success', '-created_at'], name='finances_ad_success_a46359_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['stripe_reference_id'], name='finances_ad_stripe__de5a98_idx'),
        ),
        migrations.AddIndex(
            model_name='adminaction',
            index=models.Index(fields=['two_factor_verified', '-created_at'], name='finances_ad_two_fac_6d6680_idx'),
        ),
    ]
