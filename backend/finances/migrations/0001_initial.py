# Generated by Django 5.2 on 2025-06-09 13:35

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0013_convert_to_enumeration_types"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ClassSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("date", models.DateField(verbose_name="date")),
                ("start_time", models.TimeField(verbose_name="start time")),
                ("end_time", models.TimeField(verbose_name="end time")),
                (
                    "session_type",
                    models.CharField(
                        choices=[("individual", "Individual Session"), ("group", "Group Session")],
                        max_length=20,
                        verbose_name="session type",
                    ),
                ),
                (
                    "grade_level",
                    models.CharField(
                        help_text="Grade level of the session (e.g., '7', '10', 'mixed')",
                        max_length=10,
                        verbose_name="grade level",
                    ),
                ),
                (
                    "student_count",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Number of students in this session",
                        verbose_name="student count",
                    ),
                ),
                (
                    "is_trial",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a trial session",
                        verbose_name="is trial",
                    ),
                ),
                (
                    "is_makeup",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a makeup session",
                        verbose_name="is makeup",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                        ],
                        default="scheduled",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this session",
                        verbose_name="notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sessions",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Students who attended this session",
                        related_name="attended_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sessions",
                        to="accounts.teacherprofile",
                        verbose_name="teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Session",
                "verbose_name_plural": "Class Sessions",
                "ordering": ["-date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="SchoolBillingSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "trial_cost_absorption",
                    models.CharField(
                        choices=[
                            ("school", "School Absorbs Cost"),
                            ("teacher", "Teacher Absorbs Cost"),
                            ("split", "Split Cost 50/50"),
                        ],
                        default="school",
                        help_text="Who absorbs the cost of trial classes",
                        max_length=20,
                        verbose_name="trial cost absorption",
                    ),
                ),
                (
                    "teacher_payment_frequency",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="monthly",
                        help_text="How frequently teachers are paid",
                        max_length=20,
                        verbose_name="teacher payment frequency",
                    ),
                ),
                (
                    "payment_day_of_month",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Day of the month when teachers are paid (1-28)",
                        verbose_name="payment day of month",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="billing_settings",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
            ],
            options={
                "verbose_name": "School Billing Settings",
                "verbose_name_plural": "School Billing Settings",
            },
        ),
        migrations.CreateModel(
            name="TeacherCompensationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("grade_specific", "Grade Specific Rate"),
                            ("group_class", "Group Class Rate"),
                            ("fixed_salary", "Fixed Monthly Salary"),
                            ("base_plus_bonus", "Base Salary Plus Bonus"),
                        ],
                        max_length=20,
                        verbose_name="rule type",
                    ),
                ),
                (
                    "grade_level",
                    models.CharField(
                        blank=True,
                        help_text="Grade level for grade-specific rules (e.g., '7', '10')",
                        max_length=10,
                        null=True,
                        verbose_name="grade level",
                    ),
                ),
                (
                    "rate_per_hour",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Hourly rate in euros",
                        max_digits=6,
                        null=True,
                        verbose_name="rate per hour",
                    ),
                ),
                (
                    "fixed_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Fixed monthly amount in euros",
                        max_digits=8,
                        null=True,
                        verbose_name="fixed amount",
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional conditions for this rule (JSON format)",
                        verbose_name="conditions",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="is active")),
                (
                    "effective_from",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date from which this rule is effective",
                        verbose_name="effective from",
                    ),
                ),
                (
                    "effective_until",
                    models.DateField(
                        blank=True,
                        help_text="Date until which this rule is effective (optional)",
                        null=True,
                        verbose_name="effective until",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_compensation_rules",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="compensation_rules",
                        to="accounts.teacherprofile",
                        verbose_name="teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Compensation Rule",
                "verbose_name_plural": "Teacher Compensation Rules",
            },
        ),
        migrations.CreateModel(
            name="TeacherPaymentEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "billing_period",
                    models.CharField(
                        help_text="Billing period in YYYY-MM format (e.g., '2024-01')",
                        max_length=7,
                        verbose_name="billing period",
                    ),
                ),
                (
                    "hours_taught",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Number of hours taught in this session",
                        max_digits=4,
                        verbose_name="hours taught",
                    ),
                ),
                (
                    "rate_applied",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Hourly rate applied for this session",
                        max_digits=6,
                        verbose_name="rate applied",
                    ),
                ),
                (
                    "amount_earned",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount earned for this session",
                        max_digits=8,
                        verbose_name="amount earned",
                    ),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("calculated", "Calculated"),
                            ("paid", "Paid"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="payment status",
                    ),
                ),
                (
                    "calculation_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about how the payment was calculated",
                        verbose_name="calculation notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "compensation_rule",
                    models.ForeignKey(
                        blank=True,
                        help_text="The compensation rule used for this calculation",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="payment_entries",
                        to="finances.teachercompensationrule",
                        verbose_name="compensation rule",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="teacher_payment_entries",
                        to="accounts.school",
                        verbose_name="school",
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_entry",
                        to="finances.classsession",
                        verbose_name="session",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_entries",
                        to="accounts.teacherprofile",
                        verbose_name="teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Payment Entry",
                "verbose_name_plural": "Teacher Payment Entries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddConstraint(
            model_name="teachercompensationrule",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("teacher", "school", "rule_type", "grade_level"),
                name="unique_active_teacher_rule",
            ),
        ),
    ]
