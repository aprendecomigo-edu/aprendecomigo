"""
Django settings for aprendecomigo project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path

from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-r0i5j27-gmjj&c6v@0mf5=mz$oi%e75o%iw8-i1ma6ej0m7=^q")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True") == "True"

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split(",") if os.getenv("ALLOWED_HOSTS") else ["localhost", "127.0.0.1", "testserver"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Required for site configuration
    # SSL Server for development
    "sslserver",
    # REST Framework
    "rest_framework",
    "corsheaders",
    "drf_yasg",  # for API documentation
    # Knox for token-based authentication
    "knox",
    # Field-level encryption
    "django_cryptography",
    # Channels for WebSocket support
    "channels",
    # PWA Migration packages
    "django_htmx",  # HTMX integration
    "sesame",       # Magic link authentication
    "django_otp",   # OTP authentication
    "django_otp.plugins.otp_totp",  # TOTP plugin
    "django_otp.plugins.otp_static", # Static tokens plugin
    "pwa",          # PWA support
    "webpush",      # Web push notifications
    # Custom apps
    "common",
    "accounts",
    "dashboard",  # Dashboard views with clean URLs
    "classroom",
    "finances",
    "scheduler",
    "tasks",
    "messaging",
    "pwa_views",  # PWA prototype views
    "education",  # Core educational features (Milestone 3)
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "common.middleware.performance.PerformanceMonitoringMiddleware",  # Performance monitoring
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_htmx.middleware.HtmxMiddleware",  # HTMX request detection
    "sesame.middleware.AuthenticationMiddleware",  # Magic link authentication
    # "common.logging_utils.setup_logging_context_middleware",  # Add logging context - disabled for now
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "common.middleware.performance.DatabaseQueryLoggingMiddleware",  # Query performance monitoring
]

ROOT_URLCONF = "aprendecomigo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aprendecomigo.wsgi.application"
ASGI_APPLICATION = "aprendecomigo.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Using SQLite for all environments
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

LANGUAGES = [
    ("en-gb", "English (UK)"),
    ("pt-pt", "PortuguÃªs (Portugal)"),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]

TIME_ZONE = "UTC"

USE_I18N = True
USE_TZ = True

# Static files - minimal configuration for Swagger/ReDoc UI only
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Additional static files directories (for PWA files)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR.parent, "static"),
]

# Media files for uploads (like student/teacher photos)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Cache configuration with fallback for development
try:
    import redis
    redis_client = redis.Redis.from_url(os.getenv('REDIS_URL', 'redis://127.0.0.1:6379'))
    redis_client.ping()
    
    # Redis is available - use Redis cache
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
            },
            'KEY_PREFIX': 'aprendecomigo',
            'VERSION': 1,
            'TIMEOUT': 60 * 15,  # 15 minutes default timeout
        },
        'sessions': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/2'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
            },
            'KEY_PREFIX': 'sessions',
            'TIMEOUT': 60 * 60 * 24,  # 24 hours for sessions
        },
        'template_fragments': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/3'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
            },
            'KEY_PREFIX': 'templates',
            'TIMEOUT': 60 * 30,  # 30 minutes for template fragments
        }
    }
except (ImportError, redis.ConnectionError, redis.RedisError):
    # Redis not available - use local memory cache for development
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'default-cache',
            'TIMEOUT': 60 * 15,
        },
        'sessions': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'sessions-cache',
            'TIMEOUT': 60 * 60 * 24,
        },
        'template_fragments': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'templates-cache',
            'TIMEOUT': 60 * 30,
        }
    }

# Use Redis for sessions
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = "accounts.CustomUser"

# Authentication Configuration
AUTHENTICATION_BACKENDS = [
    # Django default
    "django.contrib.auth.backends.ModelBackend",
    # Magic link authentication
    "sesame.backends.ModelBackend",
]

SITE_ID = 1

# Login URLs - Django web interface
LOGIN_URL = "/accounts/signin/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/accounts/signin/"

# Django-sesame settings for magic links
SESAME_MAX_AGE = 600  # 10 minutes
SESAME_ONE_TIME = True  # Magic links are single use

# Email backend
# During development, use the console backend to see emails in the console
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
DEFAULT_FROM_EMAIL = "noreply@aprendecomigo.com"

# For production, use SMTP
if not DEBUG:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = os.getenv("EMAIL_HOST", "")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
    EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")

# Security settings for cookies
SESSION_COOKIE_SECURE = True  # Ensures the cookie is sent only with HTTPS requests
CSRF_COOKIE_SECURE = True  # Ensures the CSRF cookie is sent only with HTTPS requests
SESSION_COOKIE_HTTPONLY = True  # Prevents JavaScript from accessing the session cookie
# For even more security in production:
if not DEBUG:
    # HTTP Strict Transport Security
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Other security settings
    SECURE_SSL_REDIRECT = True
    SECURE_REFERRER_POLICY = "same-origin"
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

# DRF Settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "knox.auth.TokenAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_PAGINATION_CLASS": "common.pagination.StandardResultsSetPagination",
    "PAGE_SIZE": 20,
    "EXCEPTION_HANDLER": "common.exceptions.custom_exception_handler",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    # Schema generation for API documentation
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    # Throttling settings for rate limiting
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "20/minute",
        "user": "100/minute",
        "auth_code_request": "5/hour",  # Limit code requests to 5 per hour per IP
        "auth_code_verify": "10/hour",  # Limit verification attempts to 10 per hour per IP
        "purchase_initiation": "10/hour",  # Limit purchase attempts to 10 per hour per IP
        "purchase_initiation_email": "5/hour",  # Limit purchase attempts to 5 per hour per email
        "profile_wizard": "10/min",  # Profile wizard rate limiting
        "file_upload": "5/min",  # File upload rate limiting
        "security_event": "3/min",  # Security event throttling
    },
}

# Swagger Settings
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}},
    "USE_SESSION_AUTH": False,
    "APIS_SORTER": "alpha",  # Sort endpoints alphabetically
    "OPERATIONS_SORTER": "method",  # Sort operations by HTTP method
    "VALIDATOR_URL": None,  # Disable validation
    "DEFAULT_MODEL_RENDERING": "model",  # More detailed model schema rendering
    "DEFAULT_MODEL_DEPTH": 3,  # Depth of related fields
    "DOC_EXPANSION": "list",  # Show operations expanded
}

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = True  # For development; set to False in production
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:19006",  # Expo web port
]

# Google API settings
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID", "")
GOOGLE_CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET", "")

# Knox Settings
KNOX = {
    "TOKEN_TTL": timedelta(hours=10),
    "AUTO_REFRESH": True,
    "USER_SERIALIZER": "accounts.serializers.UserSerializer",
}
# SMS settings
SMS_API_URL = os.getenv("SMS_API_URL", default="https://gatewayapi.com/rest/mtsms")
SMS_API_KEY = os.getenv("SMS_API_KEY", default="")
SMS_SENDER_ID = os.getenv("SMS_SENDER_ID", default="AprendeCoM")

# Stripe settings
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", "")
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY", "")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "")

# Channel Layers Configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# Logging Configuration
# Comprehensive logging setup for multi-tenant tutoring platform
LOGS_DIR = BASE_DIR.parent / "logs"
LOGS_DIR.mkdir(exist_ok=True)  # Ensure logs directory exists

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
        "json": {
            "()": "common.logging_utils.JSONFormatter",
        },
        "development": {
            "()": "common.logging_utils.DevelopmentFormatter",
            "format": "{asctime} {name} {levelname} {message}",
            "style": "{",
        },
        "security": {
            "()": "common.logging_utils.SecurityFormatter",
        },
    },
    "filters": {
        "sensitive_data": {
            "()": "common.logging_utils.SensitiveDataFilter",
        },
        "correlation": {
            "()": "common.logging_utils.CorrelationFilter",
        },
        "rate_limit": {
            "()": "common.logging_utils.RateLimitFilter",
            "rate_limit_seconds": 60,
        },
    },
    "handlers": {
        # General application logs
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "django.log",
            "maxBytes": 10 * 1024 * 1024,  # 10MB
            "backupCount": 5,
            "formatter": "verbose",
            "filters": ["sensitive_data", "correlation"],
        },
        # Error-only logs
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "django-error.log",
            "maxBytes": 5 * 1024 * 1024,  # 5MB
            "backupCount": 10,
            "formatter": "verbose",
            "filters": ["sensitive_data", "correlation"],
        },
        # Security events
        "security_file": {
            "level": "WARNING",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOGS_DIR / "security.log",
            "when": "D",
            "interval": 1,
            "backupCount": 90,  # Keep 90 days for security events
            "formatter": "security",
            "filters": ["correlation"],
        },
        # Business events and audit trail
        "business_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": LOGS_DIR / "business.log",
            "when": "D",
            "interval": 1,
            "backupCount": 30,
            "formatter": "json",
            "filters": ["sensitive_data", "correlation"],
        },
        # Performance monitoring
        "performance_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "performance.log",
            "maxBytes": 5 * 1024 * 1024,  # 5MB
            "backupCount": 5,
            "formatter": "json",
            "filters": ["correlation"],
        },
        # Console output
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "filters": ["sensitive_data", "rate_limit"],
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": "INFO",
    },
    "loggers": {
        # Django core loggers
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["error_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["performance_file"],
            "level": "WARNING",  # Only log slow queries
            "propagate": False,
        },
        "django.channels": {
            "handlers": ["performance_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        # Application-specific loggers
        "accounts": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "accounts.auth": {
            "handlers": ["security_file", "file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "accounts.security": {
            "handlers": ["security_file", "error_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "accounts.throttles": {
            "handlers": ["security_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        # Financial operations
        "finances": {
            "handlers": ["business_file", "file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "finances.payments": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "finances.stripe": {
            "handlers": ["business_file", "error_file"],
            "level": "INFO",
            "propagate": False,
        },
        "finances.fraud": {
            "handlers": ["security_file", "business_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "finances.audit": {
            "handlers": ["business_file"],
            "level": "INFO",
            "propagate": False,
        },
        "finances.webhooks": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # Scheduling system
        "scheduler": {
            "handlers": ["business_file", "file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "scheduler.bookings": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "scheduler.conflicts": {
            "handlers": ["business_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        "scheduler.availability": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "scheduler.reminders": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # Communication and messaging
        "messaging": {
            "handlers": ["business_file", "file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "messaging.email": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        "messaging.templates": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        "messaging.invitations": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # Multi-tenant operations
        "common": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "common.permissions": {
            "handlers": ["security_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        # Classroom and sessions
        "classroom": {
            "handlers": ["business_file", "file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "classroom.sessions": {
            "handlers": ["business_file", "file"],
            "level": "INFO",
            "propagate": False,
        },
        # Tasks and background jobs
        "tasks": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        # Business event loggers
        "business": {
            "handlers": ["business_file"],
            "level": "INFO",
            "propagate": False,
        },
        "business.payments": {
            "handlers": ["business_file"],
            "level": "INFO",
            "propagate": False,
        },
        "business.sessions": {
            "handlers": ["business_file"],
            "level": "INFO",
            "propagate": False,
        },
        "business.authentication": {
            "handlers": ["business_file", "security_file"],
            "level": "INFO",
            "propagate": False,
        },
        # Security event loggers
        "security": {
            "handlers": ["security_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "security.events": {
            "handlers": ["security_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "security.auth_failures": {
            "handlers": ["security_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "security.websocket": {
            "handlers": ["security_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
        # Performance monitoring
        "performance": {
            "handlers": ["performance_file"],
            "level": "INFO",
            "propagate": False,
        },
        # Third-party integrations
        "stripe": {
            "handlers": ["business_file", "error_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "knox": {
            "handlers": ["security_file", "console"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}

# PWA Configuration
PWA_APP_NAME = 'Aprende Comigo'
PWA_APP_DESCRIPTION = "Educational Platform - Connecting Teachers and Students"
PWA_APP_THEME_COLOR = '#3B82F6'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {
        'src': '/static/images/icon-192.png',
        'sizes': '192x192'
    },
    {
        'src': '/static/images/icon-512.png',
        'sizes': '512x512'
    }
]
PWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, 'static', 'js', 'service-worker.js')

# Sesame Configuration (Magic Links)
SESAME_MAX_AGE = 300  # 5 minutes for secure links
SESAME_ONE_TIME = True  # Tokens are single-use
SESAME_INVALIDATE_ON_PASSWORD_CHANGE = True  # Invalidate on password change

# Web Push Configuration (VAPID keys will be generated during setup)
WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": os.getenv("VAPID_PUBLIC_KEY", "BMOm-0mduZ953oV7A71Qvnrp7ovLiRewJhhHEhLPnWpcRKKBs7c9JhARV_K7DOQTTbXTqlqGcxnGYXgvBxkw9Hk"),
    "VAPID_PRIVATE_KEY": os.getenv("VAPID_PRIVATE_KEY", "E9NAys9Mhnb13Bm7jbb-EDMGfBtSO43DBirbSQeEyxk"),
    "VAPID_ADMIN_EMAIL": os.getenv("VAPID_ADMIN_EMAIL", "admin@aprendecomigo.com")
}
