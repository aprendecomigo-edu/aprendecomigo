# Generated by Django 5.2 on 2025-08-01 09:34

import datetime
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0026_add_declined_at_to_teacher_invitation'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProgressAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('quiz', 'Quiz'), ('test', 'Test'), ('homework', 'Homework'), ('project', 'Project'), ('oral_exam', 'Oral Exam'), ('practical', 'Practical Exercise'), ('presentation', 'Presentation'), ('other', 'Other')], help_text='Type of assessment conducted', max_length=20, verbose_name='assessment type')),
                ('title', models.CharField(help_text='Title or name of the assessment', max_length=200, verbose_name='assessment title')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the assessment', verbose_name='description')),
                ('score', models.DecimalField(decimal_places=2, help_text='Score achieved by the student', max_digits=6, verbose_name='score')),
                ('max_score', models.DecimalField(decimal_places=2, help_text='Maximum possible score for this assessment', max_digits=6, verbose_name='maximum score')),
                ('assessment_date', models.DateField(help_text='Date when the assessment was conducted', verbose_name='assessment date')),
                ('skills_assessed', models.JSONField(blank=True, default=list, help_text='List of specific skills that were assessed', verbose_name='skills assessed')),
                ('teacher_notes', models.TextField(blank=True, help_text="Teacher's observations and feedback", verbose_name='teacher notes')),
                ('is_graded', models.BooleanField(default=True, help_text='Whether this assessment contributes to grades', verbose_name='is graded')),
                ('improvement_areas', models.JSONField(blank=True, default=list, help_text='Areas where the student needs improvement', verbose_name='improvement areas')),
                ('strengths', models.JSONField(blank=True, default=list, help_text='Areas where the student performed well', verbose_name='strengths')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Progress Assessment',
                'verbose_name_plural': 'Progress Assessments',
                'ordering': ['-assessment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_level', models.CharField(choices=[('beginner', 'Beginner'), ('elementary', 'Elementary'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', help_text='Current learning level of the student', max_length=20, verbose_name='current level')),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage of course completed (0-100)', max_digits=5, verbose_name='completion percentage')),
                ('skills_mastered', models.JSONField(blank=True, default=list, help_text='List of skills the student has mastered', verbose_name='skills mastered')),
                ('current_topics', models.JSONField(blank=True, default=list, help_text='Topics currently being studied', verbose_name='current topics')),
                ('learning_goals', models.JSONField(blank=True, default=list, help_text='Specific learning goals for this student', verbose_name='learning goals')),
                ('notes', models.TextField(blank=True, help_text="Teacher's notes about student progress", verbose_name='progress notes')),
                ('last_assessment_date', models.DateField(blank=True, help_text='Date of the most recent assessment', null=True, verbose_name='last assessment date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Student Progress',
                'verbose_name_plural': 'Student Progress Records',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.RemoveConstraint(
            model_name='teacherinvitation',
            name='unique_active_teacher_invitation_per_school',
        ),
        migrations.AddConstraint(
            model_name='teacherinvitation',
            constraint=models.UniqueConstraint(condition=models.Q(('expires_at__gt', datetime.datetime(2025, 8, 1, 9, 34, 19, 101633, tzinfo=datetime.timezone.utc)), ('is_accepted', False), ('status__in', ['pending', 'sent', 'delivered', 'viewed'])), fields=('email', 'school'), name='unique_active_teacher_invitation_per_school'),
        ),
        migrations.AddField(
            model_name='studentprogress',
            name='course',
            field=models.ForeignKey(help_text='Course for which progress is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to='accounts.course', verbose_name='course'),
        ),
        migrations.AddField(
            model_name='studentprogress',
            name='school',
            field=models.ForeignKey(help_text='School where progress is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to='accounts.school', verbose_name='school'),
        ),
        migrations.AddField(
            model_name='studentprogress',
            name='student',
            field=models.ForeignKey(help_text='Student whose progress is being tracked', on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL, verbose_name='student'),
        ),
        migrations.AddField(
            model_name='studentprogress',
            name='teacher',
            field=models.ForeignKey(help_text="Teacher tracking this student's progress", on_delete=django.db.models.deletion.CASCADE, related_name='student_progress_records', to='accounts.teacherprofile', verbose_name='teacher'),
        ),
        migrations.AddField(
            model_name='progressassessment',
            name='student_progress',
            field=models.ForeignKey(help_text='Progress record this assessment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='accounts.studentprogress', verbose_name='student progress'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['student', 'course'], name='accounts_st_student_c3cfb7_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['teacher', '-updated_at'], name='accounts_st_teacher_99c5b0_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['school', 'course'], name='accounts_st_school__8f60be_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['completion_percentage'], name='accounts_st_complet_91605f_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprogress',
            index=models.Index(fields=['current_level'], name='accounts_st_current_168bda_idx'),
        ),
        migrations.AddConstraint(
            model_name='studentprogress',
            constraint=models.UniqueConstraint(fields=('student', 'teacher', 'course'), name='unique_student_teacher_course_progress'),
        ),
        migrations.AddIndex(
            model_name='progressassessment',
            index=models.Index(fields=['student_progress', '-assessment_date'], name='accounts_pr_student_b4c179_idx'),
        ),
        migrations.AddIndex(
            model_name='progressassessment',
            index=models.Index(fields=['assessment_type', '-assessment_date'], name='accounts_pr_assessm_6a53d6_idx'),
        ),
        migrations.AddIndex(
            model_name='progressassessment',
            index=models.Index(fields=['is_graded', '-assessment_date'], name='accounts_pr_is_grad_096ae1_idx'),
        ),
        migrations.AddIndex(
            model_name='progressassessment',
            index=models.Index(fields=['assessment_date'], name='accounts_pr_assessm_33867a_idx'),
        ),
    ]
