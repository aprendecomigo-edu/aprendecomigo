# Generated by Django 5.1.11 on 2025-08-04 10:06

from django.db import migrations


def create_default_educational_system(apps, schema_editor):
    """
    Create default educational system with id=1 to satisfy foreign key defaults
    """
    EducationalSystem = apps.get_model('accounts', 'EducationalSystem')
    
    # Create or ensure Portugal system exists with id=1
    portugal_system, created = EducationalSystem.objects.get_or_create(
        id=1,
        defaults={
            'name': 'Portugal',
            'code': 'pt',
            'description': 'Portuguese educational system',
            'is_active': True
        }
    )
    
    if created:
        print(f"Created default EducationalSystem: {portugal_system.name}")
    else:
        print(f"Default EducationalSystem already exists: {portugal_system.name}")


def reverse_create_default_educational_system(apps, schema_editor):
    """
    Reverse migration - remove the default educational system
    Only if no SchoolSettings or Students reference it
    """
    EducationalSystem = apps.get_model('accounts', 'EducationalSystem')
    SchoolSettings = apps.get_model('accounts', 'SchoolSettings')
    
    try:
        # Check if any SchoolSettings reference this system
        if SchoolSettings.objects.filter(educational_system_id=1).exists():
            print("Cannot remove default EducationalSystem - SchoolSettings still reference it")
            return
            
        # Check if any Students reference this system (if Student model exists)
        try:
            Student = apps.get_model('accounts', 'Student')
            if Student.objects.filter(educational_system_id=1).exists():
                print("Cannot remove default EducationalSystem - Students still reference it")
                return
        except LookupError:
            # Student model doesn't exist yet, which is fine
            pass
            
        # Safe to remove
        EducationalSystem.objects.filter(id=1).delete()
        print("Removed default EducationalSystem")
        
    except Exception as e:
        print(f"Error during reverse migration: {e}")


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_initial'),
    ]

    operations = [
        migrations.RunPython(
            create_default_educational_system,
            reverse_create_default_educational_system,
        ),
    ]
