#!/usr/bin/env python3
"""
Quick verification script for the new communication API endpoints.
Tests API routing and basic functionality without full Django test setup.
"""

import os
import sys
import django
from django.conf import settings
from django.test.utils import get_runner
from django.urls import reverse, resolve
from django.test import TestCase

# Add the backend directory to the Python path
sys.path.insert(0, '/Users/anapmc/Code/aprendecomigo/backend')

# Set up Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aprendecomigo.settings.development')
django.setup()

from accounts.models import School, CustomUser, SchoolMembership, SchoolRole, SchoolEmailTemplate, EmailTemplateType
from accounts.views import (
    EnhancedSchoolEmailTemplateViewSet,
    SchoolBrandingAPIView,
    CommunicationAnalyticsAPIView,
    TemplateAnalyticsAPIView,
    CommunicationSettingsAPIView
)


def test_url_routing():
    """Test that all new communication API URLs are properly configured."""
    print("Testing URL routing...")
    
    # Test ViewSet URLs (should be generated by router)
    try:
        # Communication templates list
        url = reverse('accounts:communication-templates-list')
        print(f"✓ Communication templates list URL: {url}")
        
        # Communication templates detail (with sample ID)
        url = reverse('accounts:communication-templates-detail', kwargs={'pk': 1})
        print(f"✓ Communication templates detail URL: {url}")
        
        # Template preview action
        url = reverse('accounts:communication-templates-preview', kwargs={'pk': 1})
        print(f"✓ Template preview URL: {url}")
        
        # Send test action
        url = reverse('accounts:communication-templates-send-test', kwargs={'pk': 1})
        print(f"✓ Send test URL: {url}")
        
    except Exception as e:
        print(f"✗ Error with ViewSet URLs: {e}")
    
    # Test API View URLs
    try:
        url = reverse('accounts:communication-branding')
        print(f"✓ Communication branding URL: {url}")
        
        url = reverse('accounts:communication-analytics')
        print(f"✓ Communication analytics URL: {url}")
        
        url = reverse('accounts:communication-analytics-templates')
        print(f"✓ Template analytics URL: {url}")
        
        url = reverse('accounts:communication-settings')
        print(f"✓ Communication settings URL: {url}")
        
    except Exception as e:
        print(f"✗ Error with API View URLs: {e}")


def test_view_imports():
    """Test that all view classes can be imported successfully."""
    print("\nTesting view imports...")
    
    try:
        # Test that views can be imported
        view_classes = [
            EnhancedSchoolEmailTemplateViewSet,
            SchoolBrandingAPIView,
            CommunicationAnalyticsAPIView,
            TemplateAnalyticsAPIView,
            CommunicationSettingsAPIView
        ]
        
        for view_class in view_classes:
            print(f"✓ {view_class.__name__} imported successfully")
            
        print("✓ All view classes imported successfully")
        
    except Exception as e:
        print(f"✗ Error importing views: {e}")


def test_model_relationships():
    """Test that model relationships are properly configured."""
    print("\nTesting model relationships...")
    
    try:
        # Test SchoolEmailTemplate model
        template_fields = [field.name for field in SchoolEmailTemplate._meta.fields]
        required_fields = ['school', 'template_type', 'name', 'subject_template', 'html_content']
        
        for field in required_fields:
            if field in template_fields:
                print(f"✓ SchoolEmailTemplate.{field} exists")
            else:
                print(f"✗ SchoolEmailTemplate.{field} missing")
        
        # Test EmailTemplateType choices
        template_types = [choice[0] for choice in EmailTemplateType.choices]
        expected_types = ['invitation', 'reminder', 'welcome']
        
        for template_type in expected_types:
            if template_type in template_types:
                print(f"✓ EmailTemplateType.{template_type} exists")
            else:
                print(f"✗ EmailTemplateType.{template_type} missing")
                
    except Exception as e:
        print(f"✗ Error testing models: {e}")


def test_serializer_imports():
    """Test that serializers can be imported."""
    print("\nTesting serializer imports...")
    
    try:
        from accounts.serializers import SchoolEmailTemplateSerializer, SchoolBrandingSerializer
        print("✓ SchoolEmailTemplateSerializer imported successfully")
        print("✓ SchoolBrandingSerializer imported successfully")
        
    except Exception as e:
        print(f"✗ Error importing serializers: {e}")


def main():
    """Run all verification tests."""
    print("=" * 60)
    print("Communication API Implementation Verification")
    print("=" * 60)
    
    try:
        test_view_imports()
        test_model_relationships()
        test_serializer_imports()
        test_url_routing()
        
        print("\n" + "=" * 60)
        print("✓ Verification completed successfully!")
        print("✓ All communication API endpoints should be functional")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n✗ Verification failed: {e}")
        print("Please check the implementation for errors.")
        sys.exit(1)


if __name__ == "__main__":
    main()